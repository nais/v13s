// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockTagAPI is an autogenerated mock type for the TagAPI type
type MockTagAPI struct {
	mock.Mock
}

type MockTagAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagAPI) EXPECT() *MockTagAPI_Expecter {
	return &MockTagAPI_Expecter{mock: &_m.Mock}
}

// GetTags provides a mock function with given fields: ctx, policyUuid
func (_m *MockTagAPI) GetTags(ctx context.Context, policyUuid string) ApiGetTagsRequest {
	ret := _m.Called(ctx, policyUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 ApiGetTagsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTagsRequest); ok {
		r0 = rf(ctx, policyUuid)
	} else {
		r0 = ret.Get(0).(ApiGetTagsRequest)
	}

	return r0
}

// MockTagAPI_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockTagAPI_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
func (_e *MockTagAPI_Expecter) GetTags(ctx interface{}, policyUuid interface{}) *MockTagAPI_GetTags_Call {
	return &MockTagAPI_GetTags_Call{Call: _e.mock.On("GetTags", ctx, policyUuid)}
}

func (_c *MockTagAPI_GetTags_Call) Run(run func(ctx context.Context, policyUuid string)) *MockTagAPI_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_GetTags_Call) Return(_a0 ApiGetTagsRequest) *MockTagAPI_GetTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetTags_Call) RunAndReturn(run func(context.Context, string) ApiGetTagsRequest) *MockTagAPI_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetTagsExecute(r ApiGetTagsRequest) ([]Tag, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsExecute")
	}

	var r0 []Tag
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTagsRequest) ([]Tag, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTagsRequest) []Tag); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTagsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTagsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsExecute'
type MockTagAPI_GetTagsExecute_Call struct {
	*mock.Call
}

// GetTagsExecute is a helper method to define mock.On call
//   - r ApiGetTagsRequest
func (_e *MockTagAPI_Expecter) GetTagsExecute(r interface{}) *MockTagAPI_GetTagsExecute_Call {
	return &MockTagAPI_GetTagsExecute_Call{Call: _e.mock.On("GetTagsExecute", r)}
}

func (_c *MockTagAPI_GetTagsExecute_Call) Run(run func(r ApiGetTagsRequest)) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTagsRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetTagsExecute_Call) Return(_a0 []Tag, _a1 *http.Response, _a2 error) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetTagsExecute_Call) RunAndReturn(run func(ApiGetTagsRequest) ([]Tag, *http.Response, error)) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagAPI creates a new instance of MockTagAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagAPI(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockTagAPI {
	mock := &MockTagAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
