// Code generated by mockery. DO NOT EDIT.

package sources

import (
	context "context"

	source "github.com/nais/v13s/internal/sources/source"
	mock "github.com/stretchr/testify/mock"
)

// MockSource is an autogenerated mock type for the Source type
type MockSource struct {
	mock.Mock
}

type MockSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSource) EXPECT() *MockSource_Expecter {
	return &MockSource_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, imageName, imageTag
func (_m *MockSource) Delete(ctx context.Context, imageName string, imageTag string) error {
	ret := _m.Called(ctx, imageName, imageTag)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, imageName, imageTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSource_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSource_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
func (_e *MockSource_Expecter) Delete(ctx interface{}, imageName interface{}, imageTag interface{}) *MockSource_Delete_Call {
	return &MockSource_Delete_Call{Call: _e.mock.On("Delete", ctx, imageName, imageTag)}
}

func (_c *MockSource_Delete_Call) Run(run func(ctx context.Context, imageName string, imageTag string)) *MockSource_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSource_Delete_Call) Return(_a0 error) *MockSource_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSource_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSource_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilities provides a mock function with given fields: ctx, imageName, imageTag, includeSuppressed
func (_m *MockSource) GetVulnerabilities(ctx context.Context, imageName string, imageTag string, includeSuppressed bool) ([]*source.Vulnerability, error) {
	ret := _m.Called(ctx, imageName, imageTag, includeSuppressed)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilities")
	}

	var r0 []*source.Vulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) ([]*source.Vulnerability, error)); ok {
		return rf(ctx, imageName, imageTag, includeSuppressed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) []*source.Vulnerability); ok {
		r0 = rf(ctx, imageName, imageTag, includeSuppressed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*source.Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, imageName, imageTag, includeSuppressed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSource_GetVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilities'
type MockSource_GetVulnerabilities_Call struct {
	*mock.Call
}

// GetVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
//   - includeSuppressed bool
func (_e *MockSource_Expecter) GetVulnerabilities(ctx interface{}, imageName interface{}, imageTag interface{}, includeSuppressed interface{}) *MockSource_GetVulnerabilities_Call {
	return &MockSource_GetVulnerabilities_Call{Call: _e.mock.On("GetVulnerabilities", ctx, imageName, imageTag, includeSuppressed)}
}

func (_c *MockSource_GetVulnerabilities_Call) Run(run func(ctx context.Context, imageName string, imageTag string, includeSuppressed bool)) *MockSource_GetVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockSource_GetVulnerabilities_Call) Return(_a0 []*source.Vulnerability, _a1 error) *MockSource_GetVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSource_GetVulnerabilities_Call) RunAndReturn(run func(context.Context, string, string, bool) ([]*source.Vulnerability, error)) *MockSource_GetVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummary provides a mock function with given fields: ctx, imageName, imageTag
func (_m *MockSource) GetVulnerabilitySummary(ctx context.Context, imageName string, imageTag string) (*source.VulnerabilitySummary, error) {
	ret := _m.Called(ctx, imageName, imageTag)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummary")
	}

	var r0 *source.VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*source.VulnerabilitySummary, error)); ok {
		return rf(ctx, imageName, imageTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *source.VulnerabilitySummary); ok {
		r0 = rf(ctx, imageName, imageTag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*source.VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, imageName, imageTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSource_GetVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummary'
type MockSource_GetVulnerabilitySummary_Call struct {
	*mock.Call
}

// GetVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
func (_e *MockSource_Expecter) GetVulnerabilitySummary(ctx interface{}, imageName interface{}, imageTag interface{}) *MockSource_GetVulnerabilitySummary_Call {
	return &MockSource_GetVulnerabilitySummary_Call{Call: _e.mock.On("GetVulnerabilitySummary", ctx, imageName, imageTag)}
}

func (_c *MockSource_GetVulnerabilitySummary_Call) Run(run func(ctx context.Context, imageName string, imageTag string)) *MockSource_GetVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSource_GetVulnerabilitySummary_Call) Return(_a0 *source.VulnerabilitySummary, _a1 error) *MockSource_GetVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSource_GetVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, string, string) (*source.VulnerabilitySummary, error)) *MockSource_GetVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// IsTaskInProgress provides a mock function with given fields: ctx, processToken
func (_m *MockSource) IsTaskInProgress(ctx context.Context, processToken string) (bool, error) {
	ret := _m.Called(ctx, processToken)

	if len(ret) == 0 {
		panic("no return value specified for IsTaskInProgress")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, processToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, processToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSource_IsTaskInProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTaskInProgress'
type MockSource_IsTaskInProgress_Call struct {
	*mock.Call
}

// IsTaskInProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - processToken string
func (_e *MockSource_Expecter) IsTaskInProgress(ctx interface{}, processToken interface{}) *MockSource_IsTaskInProgress_Call {
	return &MockSource_IsTaskInProgress_Call{Call: _e.mock.On("IsTaskInProgress", ctx, processToken)}
}

func (_c *MockSource_IsTaskInProgress_Call) Run(run func(ctx context.Context, processToken string)) *MockSource_IsTaskInProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSource_IsTaskInProgress_Call) Return(_a0 bool, _a1 error) *MockSource_IsTaskInProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSource_IsTaskInProgress_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockSource_IsTaskInProgress_Call {
	_c.Call.Return(run)
	return _c
}

// MaintainSuppressedVulnerabilities provides a mock function with given fields: ctx, suppressed
func (_m *MockSource) MaintainSuppressedVulnerabilities(ctx context.Context, suppressed []*source.SuppressedVulnerability) error {
	ret := _m.Called(ctx, suppressed)

	if len(ret) == 0 {
		panic("no return value specified for MaintainSuppressedVulnerabilities")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*source.SuppressedVulnerability) error); ok {
		r0 = rf(ctx, suppressed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSource_MaintainSuppressedVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaintainSuppressedVulnerabilities'
type MockSource_MaintainSuppressedVulnerabilities_Call struct {
	*mock.Call
}

// MaintainSuppressedVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - suppressed []*source.SuppressedVulnerability
func (_e *MockSource_Expecter) MaintainSuppressedVulnerabilities(ctx interface{}, suppressed interface{}) *MockSource_MaintainSuppressedVulnerabilities_Call {
	return &MockSource_MaintainSuppressedVulnerabilities_Call{Call: _e.mock.On("MaintainSuppressedVulnerabilities", ctx, suppressed)}
}

func (_c *MockSource_MaintainSuppressedVulnerabilities_Call) Run(run func(ctx context.Context, suppressed []*source.SuppressedVulnerability)) *MockSource_MaintainSuppressedVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*source.SuppressedVulnerability))
	})
	return _c
}

func (_c *MockSource_MaintainSuppressedVulnerabilities_Call) Return(_a0 error) *MockSource_MaintainSuppressedVulnerabilities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSource_MaintainSuppressedVulnerabilities_Call) RunAndReturn(run func(context.Context, []*source.SuppressedVulnerability) error) *MockSource_MaintainSuppressedVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockSource) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSource_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockSource_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockSource_Expecter) Name() *MockSource_Name_Call {
	return &MockSource_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockSource_Name_Call) Run(run func()) *MockSource_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSource_Name_Call) Return(_a0 string) *MockSource_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSource_Name_Call) RunAndReturn(run func() string) *MockSource_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectExists provides a mock function with given fields: ctx, imageName, imageTag
func (_m *MockSource) ProjectExists(ctx context.Context, imageName string, imageTag string) (bool, error) {
	ret := _m.Called(ctx, imageName, imageTag)

	if len(ret) == 0 {
		panic("no return value specified for ProjectExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, imageName, imageTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, imageName, imageTag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, imageName, imageTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSource_ProjectExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectExists'
type MockSource_ProjectExists_Call struct {
	*mock.Call
}

// ProjectExists is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
func (_e *MockSource_Expecter) ProjectExists(ctx interface{}, imageName interface{}, imageTag interface{}) *MockSource_ProjectExists_Call {
	return &MockSource_ProjectExists_Call{Call: _e.mock.On("ProjectExists", ctx, imageName, imageTag)}
}

func (_c *MockSource_ProjectExists_Call) Run(run func(ctx context.Context, imageName string, imageTag string)) *MockSource_ProjectExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSource_ProjectExists_Call) Return(_a0 bool, _a1 error) *MockSource_ProjectExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSource_ProjectExists_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockSource_ProjectExists_Call {
	_c.Call.Return(run)
	return _c
}

// UploadAttestation provides a mock function with given fields: ctx, imageName, imageTag, att
func (_m *MockSource) UploadAttestation(ctx context.Context, imageName string, imageTag string, att []byte) (*source.UploadAttestationResponse, error) {
	ret := _m.Called(ctx, imageName, imageTag, att)

	if len(ret) == 0 {
		panic("no return value specified for UploadAttestation")
	}

	var r0 *source.UploadAttestationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) (*source.UploadAttestationResponse, error)); ok {
		return rf(ctx, imageName, imageTag, att)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) *source.UploadAttestationResponse); ok {
		r0 = rf(ctx, imageName, imageTag, att)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*source.UploadAttestationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) error); ok {
		r1 = rf(ctx, imageName, imageTag, att)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSource_UploadAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadAttestation'
type MockSource_UploadAttestation_Call struct {
	*mock.Call
}

// UploadAttestation is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
//   - att []byte
func (_e *MockSource_Expecter) UploadAttestation(ctx interface{}, imageName interface{}, imageTag interface{}, att interface{}) *MockSource_UploadAttestation_Call {
	return &MockSource_UploadAttestation_Call{Call: _e.mock.On("UploadAttestation", ctx, imageName, imageTag, att)}
}

func (_c *MockSource_UploadAttestation_Call) Run(run func(ctx context.Context, imageName string, imageTag string, att []byte)) *MockSource_UploadAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *MockSource_UploadAttestation_Call) Return(_a0 *source.UploadAttestationResponse, _a1 error) *MockSource_UploadAttestation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSource_UploadAttestation_Call) RunAndReturn(run func(context.Context, string, string, []byte) (*source.UploadAttestationResponse, error)) *MockSource_UploadAttestation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSource creates a new instance of MockSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSource(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSource {
	mock := &MockSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
