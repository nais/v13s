// Code generated by mockery. DO NOT EDIT.

package vulnerabilities

import (
	context "context"

	vulnerabilities "github.com/nais/v13s/pkg/api/vulnerabilities"
	mock "github.com/stretchr/testify/mock"
)

// MockVulnerabilitiesServer is an autogenerated mock type for the VulnerabilitiesServer type
type MockVulnerabilitiesServer struct {
	mock.Mock
}

type MockVulnerabilitiesServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVulnerabilitiesServer) EXPECT() *MockVulnerabilitiesServer_Expecter {
	return &MockVulnerabilitiesServer_Expecter{mock: &_m.Mock}
}

// GetVulnerability provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) GetVulnerability(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilityRequest) (*vulnerabilities.GetVulnerabilityResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerability")
	}

	var r0 *vulnerabilities.GetVulnerabilityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilityRequest) (*vulnerabilities.GetVulnerabilityResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilityRequest) *vulnerabilities.GetVulnerabilityResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.GetVulnerabilityResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.GetVulnerabilityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_GetVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerability'
type MockVulnerabilitiesServer_GetVulnerability_Call struct {
	*mock.Call
}

// GetVulnerability is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.GetVulnerabilityRequest
func (_e *MockVulnerabilitiesServer_Expecter) GetVulnerability(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_GetVulnerability_Call {
	return &MockVulnerabilitiesServer_GetVulnerability_Call{Call: _e.mock.On("GetVulnerability", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_GetVulnerability_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilityRequest)) *MockVulnerabilitiesServer_GetVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.GetVulnerabilityRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerability_Call) Return(_a0 *vulnerabilities.GetVulnerabilityResponse, _a1 error) *MockVulnerabilitiesServer_GetVulnerability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerability_Call) RunAndReturn(run func(context.Context, *vulnerabilities.GetVulnerabilityRequest) (*vulnerabilities.GetVulnerabilityResponse, error)) *MockVulnerabilitiesServer_GetVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityById provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) GetVulnerabilityById(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilityByIdRequest) (*vulnerabilities.GetVulnerabilityByIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityById")
	}

	var r0 *vulnerabilities.GetVulnerabilityByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilityByIdRequest) (*vulnerabilities.GetVulnerabilityByIdResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilityByIdRequest) *vulnerabilities.GetVulnerabilityByIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.GetVulnerabilityByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.GetVulnerabilityByIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_GetVulnerabilityById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityById'
type MockVulnerabilitiesServer_GetVulnerabilityById_Call struct {
	*mock.Call
}

// GetVulnerabilityById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.GetVulnerabilityByIdRequest
func (_e *MockVulnerabilitiesServer_Expecter) GetVulnerabilityById(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_GetVulnerabilityById_Call {
	return &MockVulnerabilitiesServer_GetVulnerabilityById_Call{Call: _e.mock.On("GetVulnerabilityById", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilityById_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilityByIdRequest)) *MockVulnerabilitiesServer_GetVulnerabilityById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.GetVulnerabilityByIdRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilityById_Call) Return(_a0 *vulnerabilities.GetVulnerabilityByIdResponse, _a1 error) *MockVulnerabilitiesServer_GetVulnerabilityById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilityById_Call) RunAndReturn(run func(context.Context, *vulnerabilities.GetVulnerabilityByIdRequest) (*vulnerabilities.GetVulnerabilityByIdResponse, error)) *MockVulnerabilitiesServer_GetVulnerabilityById_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummary provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) GetVulnerabilitySummary(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilitySummaryRequest) (*vulnerabilities.GetVulnerabilitySummaryResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummary")
	}

	var r0 *vulnerabilities.GetVulnerabilitySummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryRequest) (*vulnerabilities.GetVulnerabilitySummaryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryRequest) *vulnerabilities.GetVulnerabilitySummaryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.GetVulnerabilitySummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_GetVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummary'
type MockVulnerabilitiesServer_GetVulnerabilitySummary_Call struct {
	*mock.Call
}

// GetVulnerabilitySummary is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.GetVulnerabilitySummaryRequest
func (_e *MockVulnerabilitiesServer_Expecter) GetVulnerabilitySummary(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	return &MockVulnerabilitiesServer_GetVulnerabilitySummary_Call{Call: _e.mock.On("GetVulnerabilitySummary", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilitySummaryRequest)) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.GetVulnerabilitySummaryRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call) Return(_a0 *vulnerabilities.GetVulnerabilitySummaryResponse, _a1 error) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, *vulnerabilities.GetVulnerabilitySummaryRequest) (*vulnerabilities.GetVulnerabilitySummaryResponse, error)) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummaryForImage provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) GetVulnerabilitySummaryForImage(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilitySummaryForImageRequest) (*vulnerabilities.GetVulnerabilitySummaryForImageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummaryForImage")
	}

	var r0 *vulnerabilities.GetVulnerabilitySummaryForImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryForImageRequest) (*vulnerabilities.GetVulnerabilitySummaryForImageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryForImageRequest) *vulnerabilities.GetVulnerabilitySummaryForImageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.GetVulnerabilitySummaryForImageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryForImageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummaryForImage'
type MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call struct {
	*mock.Call
}

// GetVulnerabilitySummaryForImage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.GetVulnerabilitySummaryForImageRequest
func (_e *MockVulnerabilitiesServer_Expecter) GetVulnerabilitySummaryForImage(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call {
	return &MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call{Call: _e.mock.On("GetVulnerabilitySummaryForImage", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilitySummaryForImageRequest)) *MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.GetVulnerabilitySummaryForImageRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call) Return(_a0 *vulnerabilities.GetVulnerabilitySummaryForImageResponse, _a1 error) *MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call) RunAndReturn(run func(context.Context, *vulnerabilities.GetVulnerabilitySummaryForImageRequest) (*vulnerabilities.GetVulnerabilitySummaryForImageResponse, error)) *MockVulnerabilitiesServer_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummaryTimeSeries provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) GetVulnerabilitySummaryTimeSeries(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest) (*vulnerabilities.GetVulnerabilitySummaryTimeSeriesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummaryTimeSeries")
	}

	var r0 *vulnerabilities.GetVulnerabilitySummaryTimeSeriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest) (*vulnerabilities.GetVulnerabilitySummaryTimeSeriesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest) *vulnerabilities.GetVulnerabilitySummaryTimeSeriesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.GetVulnerabilitySummaryTimeSeriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummaryTimeSeries'
type MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call struct {
	*mock.Call
}

// GetVulnerabilitySummaryTimeSeries is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest
func (_e *MockVulnerabilitiesServer_Expecter) GetVulnerabilitySummaryTimeSeries(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call {
	return &MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call{Call: _e.mock.On("GetVulnerabilitySummaryTimeSeries", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest)) *MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call) Return(_a0 *vulnerabilities.GetVulnerabilitySummaryTimeSeriesResponse, _a1 error) *MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call) RunAndReturn(run func(context.Context, *vulnerabilities.GetVulnerabilitySummaryTimeSeriesRequest) (*vulnerabilities.GetVulnerabilitySummaryTimeSeriesResponse, error)) *MockVulnerabilitiesServer_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Return(run)
	return _c
}

// ListCriticalVulnerabilitiesSince provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) ListCriticalVulnerabilitiesSince(_a0 context.Context, _a1 *vulnerabilities.ListCriticalVulnerabilitiesSinceRequest) (*vulnerabilities.ListCriticalVulnerabilitiesSinceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListCriticalVulnerabilitiesSince")
	}

	var r0 *vulnerabilities.ListCriticalVulnerabilitiesSinceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListCriticalVulnerabilitiesSinceRequest) (*vulnerabilities.ListCriticalVulnerabilitiesSinceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListCriticalVulnerabilitiesSinceRequest) *vulnerabilities.ListCriticalVulnerabilitiesSinceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.ListCriticalVulnerabilitiesSinceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.ListCriticalVulnerabilitiesSinceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCriticalVulnerabilitiesSince'
type MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call struct {
	*mock.Call
}

// ListCriticalVulnerabilitiesSince is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.ListCriticalVulnerabilitiesSinceRequest
func (_e *MockVulnerabilitiesServer_Expecter) ListCriticalVulnerabilitiesSince(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call {
	return &MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call{Call: _e.mock.On("ListCriticalVulnerabilitiesSince", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.ListCriticalVulnerabilitiesSinceRequest)) *MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.ListCriticalVulnerabilitiesSinceRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call) Return(_a0 *vulnerabilities.ListCriticalVulnerabilitiesSinceResponse, _a1 error) *MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call) RunAndReturn(run func(context.Context, *vulnerabilities.ListCriticalVulnerabilitiesSinceRequest) (*vulnerabilities.ListCriticalVulnerabilitiesSinceResponse, error)) *MockVulnerabilitiesServer_ListCriticalVulnerabilitiesSince_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuppressedVulnerabilities provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) ListSuppressedVulnerabilities(_a0 context.Context, _a1 *vulnerabilities.ListSuppressedVulnerabilitiesRequest) (*vulnerabilities.ListSuppressedVulnerabilitiesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListSuppressedVulnerabilities")
	}

	var r0 *vulnerabilities.ListSuppressedVulnerabilitiesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListSuppressedVulnerabilitiesRequest) (*vulnerabilities.ListSuppressedVulnerabilitiesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListSuppressedVulnerabilitiesRequest) *vulnerabilities.ListSuppressedVulnerabilitiesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.ListSuppressedVulnerabilitiesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.ListSuppressedVulnerabilitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuppressedVulnerabilities'
type MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call struct {
	*mock.Call
}

// ListSuppressedVulnerabilities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.ListSuppressedVulnerabilitiesRequest
func (_e *MockVulnerabilitiesServer_Expecter) ListSuppressedVulnerabilities(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call {
	return &MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call{Call: _e.mock.On("ListSuppressedVulnerabilities", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.ListSuppressedVulnerabilitiesRequest)) *MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.ListSuppressedVulnerabilitiesRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call) Return(_a0 *vulnerabilities.ListSuppressedVulnerabilitiesResponse, _a1 error) *MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call) RunAndReturn(run func(context.Context, *vulnerabilities.ListSuppressedVulnerabilitiesRequest) (*vulnerabilities.ListSuppressedVulnerabilitiesResponse, error)) *MockVulnerabilitiesServer_ListSuppressedVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilities provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) ListVulnerabilities(_a0 context.Context, _a1 *vulnerabilities.ListVulnerabilitiesRequest) (*vulnerabilities.ListVulnerabilitiesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilities")
	}

	var r0 *vulnerabilities.ListVulnerabilitiesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListVulnerabilitiesRequest) (*vulnerabilities.ListVulnerabilitiesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListVulnerabilitiesRequest) *vulnerabilities.ListVulnerabilitiesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.ListVulnerabilitiesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.ListVulnerabilitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_ListVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilities'
type MockVulnerabilitiesServer_ListVulnerabilities_Call struct {
	*mock.Call
}

// ListVulnerabilities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.ListVulnerabilitiesRequest
func (_e *MockVulnerabilitiesServer_Expecter) ListVulnerabilities(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	return &MockVulnerabilitiesServer_ListVulnerabilities_Call{Call: _e.mock.On("ListVulnerabilities", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilities_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.ListVulnerabilitiesRequest)) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.ListVulnerabilitiesRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilities_Call) Return(_a0 *vulnerabilities.ListVulnerabilitiesResponse, _a1 error) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilities_Call) RunAndReturn(run func(context.Context, *vulnerabilities.ListVulnerabilitiesRequest) (*vulnerabilities.ListVulnerabilitiesResponse, error)) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitiesForImage provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) ListVulnerabilitiesForImage(_a0 context.Context, _a1 *vulnerabilities.ListVulnerabilitiesForImageRequest) (*vulnerabilities.ListVulnerabilitiesForImageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitiesForImage")
	}

	var r0 *vulnerabilities.ListVulnerabilitiesForImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListVulnerabilitiesForImageRequest) (*vulnerabilities.ListVulnerabilitiesForImageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListVulnerabilitiesForImageRequest) *vulnerabilities.ListVulnerabilitiesForImageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.ListVulnerabilitiesForImageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.ListVulnerabilitiesForImageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitiesForImage'
type MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// ListVulnerabilitiesForImage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.ListVulnerabilitiesForImageRequest
func (_e *MockVulnerabilitiesServer_Expecter) ListVulnerabilitiesForImage(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call {
	return &MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call{Call: _e.mock.On("ListVulnerabilitiesForImage", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.ListVulnerabilitiesForImageRequest)) *MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.ListVulnerabilitiesForImageRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call) Return(_a0 *vulnerabilities.ListVulnerabilitiesForImageResponse, _a1 error) *MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, *vulnerabilities.ListVulnerabilitiesForImageRequest) (*vulnerabilities.ListVulnerabilitiesForImageResponse, error)) *MockVulnerabilitiesServer_ListVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitySummaries provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) ListVulnerabilitySummaries(_a0 context.Context, _a1 *vulnerabilities.ListVulnerabilitySummariesRequest) (*vulnerabilities.ListVulnerabilitySummariesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitySummaries")
	}

	var r0 *vulnerabilities.ListVulnerabilitySummariesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListVulnerabilitySummariesRequest) (*vulnerabilities.ListVulnerabilitySummariesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.ListVulnerabilitySummariesRequest) *vulnerabilities.ListVulnerabilitySummariesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.ListVulnerabilitySummariesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.ListVulnerabilitySummariesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitySummaries'
type MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call struct {
	*mock.Call
}

// ListVulnerabilitySummaries is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.ListVulnerabilitySummariesRequest
func (_e *MockVulnerabilitiesServer_Expecter) ListVulnerabilitySummaries(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	return &MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call{Call: _e.mock.On("ListVulnerabilitySummaries", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.ListVulnerabilitySummariesRequest)) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.ListVulnerabilitySummariesRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call) Return(_a0 *vulnerabilities.ListVulnerabilitySummariesResponse, _a1 error) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call) RunAndReturn(run func(context.Context, *vulnerabilities.ListVulnerabilitySummariesRequest) (*vulnerabilities.ListVulnerabilitySummariesResponse, error)) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	_c.Call.Return(run)
	return _c
}

// SuppressVulnerability provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) SuppressVulnerability(_a0 context.Context, _a1 *vulnerabilities.SuppressVulnerabilityRequest) (*vulnerabilities.SuppressVulnerabilityResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SuppressVulnerability")
	}

	var r0 *vulnerabilities.SuppressVulnerabilityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.SuppressVulnerabilityRequest) (*vulnerabilities.SuppressVulnerabilityResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vulnerabilities.SuppressVulnerabilityRequest) *vulnerabilities.SuppressVulnerabilityResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vulnerabilities.SuppressVulnerabilityResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vulnerabilities.SuppressVulnerabilityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_SuppressVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuppressVulnerability'
type MockVulnerabilitiesServer_SuppressVulnerability_Call struct {
	*mock.Call
}

// SuppressVulnerability is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *vulnerabilities.SuppressVulnerabilityRequest
func (_e *MockVulnerabilitiesServer_Expecter) SuppressVulnerability(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_SuppressVulnerability_Call {
	return &MockVulnerabilitiesServer_SuppressVulnerability_Call{Call: _e.mock.On("SuppressVulnerability", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_SuppressVulnerability_Call) Run(run func(_a0 context.Context, _a1 *vulnerabilities.SuppressVulnerabilityRequest)) *MockVulnerabilitiesServer_SuppressVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*vulnerabilities.SuppressVulnerabilityRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_SuppressVulnerability_Call) Return(_a0 *vulnerabilities.SuppressVulnerabilityResponse, _a1 error) *MockVulnerabilitiesServer_SuppressVulnerability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_SuppressVulnerability_Call) RunAndReturn(run func(context.Context, *vulnerabilities.SuppressVulnerabilityRequest) (*vulnerabilities.SuppressVulnerabilityResponse, error)) *MockVulnerabilitiesServer_SuppressVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedVulnerabilitiesServer provides a mock function with no fields
func (_m *MockVulnerabilitiesServer) mustEmbedUnimplementedVulnerabilitiesServer() {
	_m.Called()
}

// MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedVulnerabilitiesServer'
type MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedVulnerabilitiesServer is a helper method to define mock.On call
func (_e *MockVulnerabilitiesServer_Expecter) mustEmbedUnimplementedVulnerabilitiesServer() *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	return &MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call{Call: _e.mock.On("mustEmbedUnimplementedVulnerabilitiesServer")}
}

func (_c *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call) Run(run func()) *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call) Return() *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call) RunAndReturn(run func()) *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	_c.Run(run)
	return _c
}

// NewMockVulnerabilitiesServer creates a new instance of MockVulnerabilitiesServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVulnerabilitiesServer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockVulnerabilitiesServer {
	mock := &MockVulnerabilitiesServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
