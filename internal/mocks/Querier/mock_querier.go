// Code generated by mockery. DO NOT EDIT.

package sql

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/nais/v13s/internal/database/sql"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// AddWorkloadEvent provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddWorkloadEvent(ctx context.Context, arg sql.AddWorkloadEventParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddWorkloadEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.AddWorkloadEventParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_AddWorkloadEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorkloadEvent'
type MockQuerier_AddWorkloadEvent_Call struct {
	*mock.Call
}

// AddWorkloadEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.AddWorkloadEventParams
func (_e *MockQuerier_Expecter) AddWorkloadEvent(ctx interface{}, arg interface{}) *MockQuerier_AddWorkloadEvent_Call {
	return &MockQuerier_AddWorkloadEvent_Call{Call: _e.mock.On("AddWorkloadEvent", ctx, arg)}
}

func (_c *MockQuerier_AddWorkloadEvent_Call) Run(run func(ctx context.Context, arg sql.AddWorkloadEventParams)) *MockQuerier_AddWorkloadEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.AddWorkloadEventParams))
	})
	return _c
}

func (_c *MockQuerier_AddWorkloadEvent_Call) Return(_a0 error) *MockQuerier_AddWorkloadEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_AddWorkloadEvent_Call) RunAndReturn(run func(context.Context, sql.AddWorkloadEventParams) error) *MockQuerier_AddWorkloadEvent_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpdateImageState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpdateImageState(ctx context.Context, arg []sql.BatchUpdateImageStateParams) *sql.BatchUpdateImageStateBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateImageState")
	}

	var r0 *sql.BatchUpdateImageStateBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []sql.BatchUpdateImageStateParams) *sql.BatchUpdateImageStateBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.BatchUpdateImageStateBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpdateImageState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpdateImageState'
type MockQuerier_BatchUpdateImageState_Call struct {
	*mock.Call
}

// BatchUpdateImageState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sql.BatchUpdateImageStateParams
func (_e *MockQuerier_Expecter) BatchUpdateImageState(ctx interface{}, arg interface{}) *MockQuerier_BatchUpdateImageState_Call {
	return &MockQuerier_BatchUpdateImageState_Call{Call: _e.mock.On("BatchUpdateImageState", ctx, arg)}
}

func (_c *MockQuerier_BatchUpdateImageState_Call) Run(run func(ctx context.Context, arg []sql.BatchUpdateImageStateParams)) *MockQuerier_BatchUpdateImageState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sql.BatchUpdateImageStateParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpdateImageState_Call) Return(_a0 *sql.BatchUpdateImageStateBatchResults) *MockQuerier_BatchUpdateImageState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpdateImageState_Call) RunAndReturn(run func(context.Context, []sql.BatchUpdateImageStateParams) *sql.BatchUpdateImageStateBatchResults) *MockQuerier_BatchUpdateImageState_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpsertCve provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertCve(ctx context.Context, arg []sql.BatchUpsertCveParams) *sql.BatchUpsertCveBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertCve")
	}

	var r0 *sql.BatchUpsertCveBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []sql.BatchUpsertCveParams) *sql.BatchUpsertCveBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.BatchUpsertCveBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertCve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertCve'
type MockQuerier_BatchUpsertCve_Call struct {
	*mock.Call
}

// BatchUpsertCve is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sql.BatchUpsertCveParams
func (_e *MockQuerier_Expecter) BatchUpsertCve(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertCve_Call {
	return &MockQuerier_BatchUpsertCve_Call{Call: _e.mock.On("BatchUpsertCve", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertCve_Call) Run(run func(ctx context.Context, arg []sql.BatchUpsertCveParams)) *MockQuerier_BatchUpsertCve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sql.BatchUpsertCveParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertCve_Call) Return(_a0 *sql.BatchUpsertCveBatchResults) *MockQuerier_BatchUpsertCve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertCve_Call) RunAndReturn(run func(context.Context, []sql.BatchUpsertCveParams) *sql.BatchUpsertCveBatchResults) *MockQuerier_BatchUpsertCve_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpsertVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertVulnerabilities(ctx context.Context, arg []sql.BatchUpsertVulnerabilitiesParams) *sql.BatchUpsertVulnerabilitiesBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertVulnerabilities")
	}

	var r0 *sql.BatchUpsertVulnerabilitiesBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []sql.BatchUpsertVulnerabilitiesParams) *sql.BatchUpsertVulnerabilitiesBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.BatchUpsertVulnerabilitiesBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertVulnerabilities'
type MockQuerier_BatchUpsertVulnerabilities_Call struct {
	*mock.Call
}

// BatchUpsertVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sql.BatchUpsertVulnerabilitiesParams
func (_e *MockQuerier_Expecter) BatchUpsertVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertVulnerabilities_Call {
	return &MockQuerier_BatchUpsertVulnerabilities_Call{Call: _e.mock.On("BatchUpsertVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) Run(run func(ctx context.Context, arg []sql.BatchUpsertVulnerabilitiesParams)) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sql.BatchUpsertVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) Return(_a0 *sql.BatchUpsertVulnerabilitiesBatchResults) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) RunAndReturn(run func(context.Context, []sql.BatchUpsertVulnerabilitiesParams) *sql.BatchUpsertVulnerabilitiesBatchResults) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpsertVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertVulnerabilitySummary(ctx context.Context, arg []sql.BatchUpsertVulnerabilitySummaryParams) *sql.BatchUpsertVulnerabilitySummaryBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertVulnerabilitySummary")
	}

	var r0 *sql.BatchUpsertVulnerabilitySummaryBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []sql.BatchUpsertVulnerabilitySummaryParams) *sql.BatchUpsertVulnerabilitySummaryBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.BatchUpsertVulnerabilitySummaryBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertVulnerabilitySummary'
type MockQuerier_BatchUpsertVulnerabilitySummary_Call struct {
	*mock.Call
}

// BatchUpsertVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []sql.BatchUpsertVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) BatchUpsertVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	return &MockQuerier_BatchUpsertVulnerabilitySummary_Call{Call: _e.mock.On("BatchUpsertVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg []sql.BatchUpsertVulnerabilitySummaryParams)) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]sql.BatchUpsertVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilitySummary_Call) Return(_a0 *sql.BatchUpsertVulnerabilitySummaryBatchResults) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, []sql.BatchUpsertVulnerabilitySummaryParams) *sql.BatchUpsertVulnerabilitySummaryBatchResults) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// CountSuppressedVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CountSuppressedVulnerabilities(ctx context.Context, arg sql.CountSuppressedVulnerabilitiesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountSuppressedVulnerabilities")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CountSuppressedVulnerabilitiesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CountSuppressedVulnerabilitiesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CountSuppressedVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CountSuppressedVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSuppressedVulnerabilities'
type MockQuerier_CountSuppressedVulnerabilities_Call struct {
	*mock.Call
}

// CountSuppressedVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.CountSuppressedVulnerabilitiesParams
func (_e *MockQuerier_Expecter) CountSuppressedVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_CountSuppressedVulnerabilities_Call {
	return &MockQuerier_CountSuppressedVulnerabilities_Call{Call: _e.mock.On("CountSuppressedVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_CountSuppressedVulnerabilities_Call) Run(run func(ctx context.Context, arg sql.CountSuppressedVulnerabilitiesParams)) *MockQuerier_CountSuppressedVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CountSuppressedVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_CountSuppressedVulnerabilities_Call) Return(_a0 int64, _a1 error) *MockQuerier_CountSuppressedVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CountSuppressedVulnerabilities_Call) RunAndReturn(run func(context.Context, sql.CountSuppressedVulnerabilitiesParams) (int64, error)) *MockQuerier_CountSuppressedVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// CountVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CountVulnerabilities(ctx context.Context, arg sql.CountVulnerabilitiesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountVulnerabilities")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CountVulnerabilitiesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CountVulnerabilitiesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CountVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CountVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountVulnerabilities'
type MockQuerier_CountVulnerabilities_Call struct {
	*mock.Call
}

// CountVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.CountVulnerabilitiesParams
func (_e *MockQuerier_Expecter) CountVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_CountVulnerabilities_Call {
	return &MockQuerier_CountVulnerabilities_Call{Call: _e.mock.On("CountVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_CountVulnerabilities_Call) Run(run func(ctx context.Context, arg sql.CountVulnerabilitiesParams)) *MockQuerier_CountVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CountVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_CountVulnerabilities_Call) Return(_a0 int64, _a1 error) *MockQuerier_CountVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CountVulnerabilities_Call) RunAndReturn(run func(context.Context, sql.CountVulnerabilitiesParams) (int64, error)) *MockQuerier_CountVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// CountWorkloadVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CountWorkloadVulnerabilities(ctx context.Context, arg sql.CountWorkloadVulnerabilitiesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountWorkloadVulnerabilities")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CountWorkloadVulnerabilitiesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CountWorkloadVulnerabilitiesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CountWorkloadVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CountWorkloadVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountWorkloadVulnerabilities'
type MockQuerier_CountWorkloadVulnerabilities_Call struct {
	*mock.Call
}

// CountWorkloadVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.CountWorkloadVulnerabilitiesParams
func (_e *MockQuerier_Expecter) CountWorkloadVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_CountWorkloadVulnerabilities_Call {
	return &MockQuerier_CountWorkloadVulnerabilities_Call{Call: _e.mock.On("CountWorkloadVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_CountWorkloadVulnerabilities_Call) Run(run func(ctx context.Context, arg sql.CountWorkloadVulnerabilitiesParams)) *MockQuerier_CountWorkloadVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CountWorkloadVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_CountWorkloadVulnerabilities_Call) Return(_a0 int64, _a1 error) *MockQuerier_CountWorkloadVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CountWorkloadVulnerabilities_Call) RunAndReturn(run func(context.Context, sql.CountWorkloadVulnerabilitiesParams) (int64, error)) *MockQuerier_CountWorkloadVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateImage(ctx context.Context, arg sql.CreateImageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateImageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImage'
type MockQuerier_CreateImage_Call struct {
	*mock.Call
}

// CreateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.CreateImageParams
func (_e *MockQuerier_Expecter) CreateImage(ctx interface{}, arg interface{}) *MockQuerier_CreateImage_Call {
	return &MockQuerier_CreateImage_Call{Call: _e.mock.On("CreateImage", ctx, arg)}
}

func (_c *MockQuerier_CreateImage_Call) Run(run func(ctx context.Context, arg sql.CreateImageParams)) *MockQuerier_CreateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateImageParams))
	})
	return _c
}

func (_c *MockQuerier_CreateImage_Call) Return(_a0 error) *MockQuerier_CreateImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateImage_Call) RunAndReturn(run func(context.Context, sql.CreateImageParams) error) *MockQuerier_CreateImage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSourceRef provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateSourceRef(ctx context.Context, arg sql.CreateSourceRefParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSourceRef")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateSourceRefParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateSourceRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSourceRef'
type MockQuerier_CreateSourceRef_Call struct {
	*mock.Call
}

// CreateSourceRef is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.CreateSourceRefParams
func (_e *MockQuerier_Expecter) CreateSourceRef(ctx interface{}, arg interface{}) *MockQuerier_CreateSourceRef_Call {
	return &MockQuerier_CreateSourceRef_Call{Call: _e.mock.On("CreateSourceRef", ctx, arg)}
}

func (_c *MockQuerier_CreateSourceRef_Call) Run(run func(ctx context.Context, arg sql.CreateSourceRefParams)) *MockQuerier_CreateSourceRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateSourceRefParams))
	})
	return _c
}

func (_c *MockQuerier_CreateSourceRef_Call) Return(_a0 error) *MockQuerier_CreateSourceRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateSourceRef_Call) RunAndReturn(run func(context.Context, sql.CreateSourceRefParams) error) *MockQuerier_CreateSourceRef_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateVulnerabilitySummary(ctx context.Context, arg sql.CreateVulnerabilitySummaryParams) (*sql.VulnerabilitySummary, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateVulnerabilitySummary")
	}

	var r0 *sql.VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateVulnerabilitySummaryParams) (*sql.VulnerabilitySummary, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateVulnerabilitySummaryParams) *sql.VulnerabilitySummary); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateVulnerabilitySummaryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVulnerabilitySummary'
type MockQuerier_CreateVulnerabilitySummary_Call struct {
	*mock.Call
}

// CreateVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.CreateVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) CreateVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_CreateVulnerabilitySummary_Call {
	return &MockQuerier_CreateVulnerabilitySummary_Call{Call: _e.mock.On("CreateVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg sql.CreateVulnerabilitySummaryParams)) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) Return(_a0 *sql.VulnerabilitySummary, _a1 error) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, sql.CreateVulnerabilitySummaryParams) (*sql.VulnerabilitySummary, error)) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateWorkload(ctx context.Context, arg sql.CreateWorkloadParams) (*sql.Workload, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkload")
	}

	var r0 *sql.Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWorkloadParams) (*sql.Workload, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.CreateWorkloadParams) *sql.Workload); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.CreateWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkload'
type MockQuerier_CreateWorkload_Call struct {
	*mock.Call
}

// CreateWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.CreateWorkloadParams
func (_e *MockQuerier_Expecter) CreateWorkload(ctx interface{}, arg interface{}) *MockQuerier_CreateWorkload_Call {
	return &MockQuerier_CreateWorkload_Call{Call: _e.mock.On("CreateWorkload", ctx, arg)}
}

func (_c *MockQuerier_CreateWorkload_Call) Run(run func(ctx context.Context, arg sql.CreateWorkloadParams)) *MockQuerier_CreateWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.CreateWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_CreateWorkload_Call) Return(_a0 *sql.Workload, _a1 error) *MockQuerier_CreateWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateWorkload_Call) RunAndReturn(run func(context.Context, sql.CreateWorkloadParams) (*sql.Workload, error)) *MockQuerier_CreateWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSourceRef provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) DeleteSourceRef(ctx context.Context, arg sql.DeleteSourceRefParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSourceRef")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteSourceRefParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteSourceRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSourceRef'
type MockQuerier_DeleteSourceRef_Call struct {
	*mock.Call
}

// DeleteSourceRef is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.DeleteSourceRefParams
func (_e *MockQuerier_Expecter) DeleteSourceRef(ctx interface{}, arg interface{}) *MockQuerier_DeleteSourceRef_Call {
	return &MockQuerier_DeleteSourceRef_Call{Call: _e.mock.On("DeleteSourceRef", ctx, arg)}
}

func (_c *MockQuerier_DeleteSourceRef_Call) Run(run func(ctx context.Context, arg sql.DeleteSourceRefParams)) *MockQuerier_DeleteSourceRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteSourceRefParams))
	})
	return _c
}

func (_c *MockQuerier_DeleteSourceRef_Call) Return(_a0 error) *MockQuerier_DeleteSourceRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteSourceRef_Call) RunAndReturn(run func(context.Context, sql.DeleteSourceRefParams) error) *MockQuerier_DeleteSourceRef_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) DeleteWorkload(ctx context.Context, arg sql.DeleteWorkloadParams) (pgtype.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkload")
	}

	var r0 pgtype.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteWorkloadParams) (pgtype.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.DeleteWorkloadParams) pgtype.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.UUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.DeleteWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DeleteWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkload'
type MockQuerier_DeleteWorkload_Call struct {
	*mock.Call
}

// DeleteWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.DeleteWorkloadParams
func (_e *MockQuerier_Expecter) DeleteWorkload(ctx interface{}, arg interface{}) *MockQuerier_DeleteWorkload_Call {
	return &MockQuerier_DeleteWorkload_Call{Call: _e.mock.On("DeleteWorkload", ctx, arg)}
}

func (_c *MockQuerier_DeleteWorkload_Call) Run(run func(ctx context.Context, arg sql.DeleteWorkloadParams)) *MockQuerier_DeleteWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.DeleteWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_DeleteWorkload_Call) Return(_a0 pgtype.UUID, _a1 error) *MockQuerier_DeleteWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DeleteWorkload_Call) RunAndReturn(run func(context.Context, sql.DeleteWorkloadParams) (pgtype.UUID, error)) *MockQuerier_DeleteWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateVulnerabilitySummaryForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GenerateVulnerabilitySummaryForImage(ctx context.Context, arg sql.GenerateVulnerabilitySummaryForImageParams) (*sql.GenerateVulnerabilitySummaryForImageRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVulnerabilitySummaryForImage")
	}

	var r0 *sql.GenerateVulnerabilitySummaryForImageRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GenerateVulnerabilitySummaryForImageParams) (*sql.GenerateVulnerabilitySummaryForImageRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GenerateVulnerabilitySummaryForImageParams) *sql.GenerateVulnerabilitySummaryForImageRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GenerateVulnerabilitySummaryForImageRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GenerateVulnerabilitySummaryForImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GenerateVulnerabilitySummaryForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateVulnerabilitySummaryForImage'
type MockQuerier_GenerateVulnerabilitySummaryForImage_Call struct {
	*mock.Call
}

// GenerateVulnerabilitySummaryForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GenerateVulnerabilitySummaryForImageParams
func (_e *MockQuerier_Expecter) GenerateVulnerabilitySummaryForImage(ctx interface{}, arg interface{}) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	return &MockQuerier_GenerateVulnerabilitySummaryForImage_Call{Call: _e.mock.On("GenerateVulnerabilitySummaryForImage", ctx, arg)}
}

func (_c *MockQuerier_GenerateVulnerabilitySummaryForImage_Call) Run(run func(ctx context.Context, arg sql.GenerateVulnerabilitySummaryForImageParams)) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GenerateVulnerabilitySummaryForImageParams))
	})
	return _c
}

func (_c *MockQuerier_GenerateVulnerabilitySummaryForImage_Call) Return(_a0 *sql.GenerateVulnerabilitySummaryForImageRow, _a1 error) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GenerateVulnerabilitySummaryForImage_Call) RunAndReturn(run func(context.Context, sql.GenerateVulnerabilitySummaryForImageParams) (*sql.GenerateVulnerabilitySummaryForImageRow, error)) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetCve provides a mock function with given fields: ctx, cveID
func (_m *MockQuerier) GetCve(ctx context.Context, cveID string) (*sql.Cve, error) {
	ret := _m.Called(ctx, cveID)

	if len(ret) == 0 {
		panic("no return value specified for GetCve")
	}

	var r0 *sql.Cve
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Cve, error)); ok {
		return rf(ctx, cveID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Cve); ok {
		r0 = rf(ctx, cveID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Cve)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cveID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetCve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCve'
type MockQuerier_GetCve_Call struct {
	*mock.Call
}

// GetCve is a helper method to define mock.On call
//   - ctx context.Context
//   - cveID string
func (_e *MockQuerier_Expecter) GetCve(ctx interface{}, cveID interface{}) *MockQuerier_GetCve_Call {
	return &MockQuerier_GetCve_Call{Call: _e.mock.On("GetCve", ctx, cveID)}
}

func (_c *MockQuerier_GetCve_Call) Run(run func(ctx context.Context, cveID string)) *MockQuerier_GetCve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetCve_Call) Return(_a0 *sql.Cve, _a1 error) *MockQuerier_GetCve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetCve_Call) RunAndReturn(run func(context.Context, string) (*sql.Cve, error)) *MockQuerier_GetCve_Call {
	_c.Call.Return(run)
	return _c
}

// GetEarliestSeveritySinceForVulnerability provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetEarliestSeveritySinceForVulnerability(ctx context.Context, arg sql.GetEarliestSeveritySinceForVulnerabilityParams) (pgtype.Timestamptz, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetEarliestSeveritySinceForVulnerability")
	}

	var r0 pgtype.Timestamptz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetEarliestSeveritySinceForVulnerabilityParams) (pgtype.Timestamptz, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetEarliestSeveritySinceForVulnerabilityParams) pgtype.Timestamptz); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.Timestamptz)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetEarliestSeveritySinceForVulnerabilityParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetEarliestSeveritySinceForVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEarliestSeveritySinceForVulnerability'
type MockQuerier_GetEarliestSeveritySinceForVulnerability_Call struct {
	*mock.Call
}

// GetEarliestSeveritySinceForVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetEarliestSeveritySinceForVulnerabilityParams
func (_e *MockQuerier_Expecter) GetEarliestSeveritySinceForVulnerability(ctx interface{}, arg interface{}) *MockQuerier_GetEarliestSeveritySinceForVulnerability_Call {
	return &MockQuerier_GetEarliestSeveritySinceForVulnerability_Call{Call: _e.mock.On("GetEarliestSeveritySinceForVulnerability", ctx, arg)}
}

func (_c *MockQuerier_GetEarliestSeveritySinceForVulnerability_Call) Run(run func(ctx context.Context, arg sql.GetEarliestSeveritySinceForVulnerabilityParams)) *MockQuerier_GetEarliestSeveritySinceForVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetEarliestSeveritySinceForVulnerabilityParams))
	})
	return _c
}

func (_c *MockQuerier_GetEarliestSeveritySinceForVulnerability_Call) Return(_a0 pgtype.Timestamptz, _a1 error) *MockQuerier_GetEarliestSeveritySinceForVulnerability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetEarliestSeveritySinceForVulnerability_Call) RunAndReturn(run func(context.Context, sql.GetEarliestSeveritySinceForVulnerabilityParams) (pgtype.Timestamptz, error)) *MockQuerier_GetEarliestSeveritySinceForVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetImage(ctx context.Context, arg sql.GetImageParams) (*sql.Image, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *sql.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetImageParams) (*sql.Image, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetImageParams) *sql.Image); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockQuerier_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetImageParams
func (_e *MockQuerier_Expecter) GetImage(ctx interface{}, arg interface{}) *MockQuerier_GetImage_Call {
	return &MockQuerier_GetImage_Call{Call: _e.mock.On("GetImage", ctx, arg)}
}

func (_c *MockQuerier_GetImage_Call) Run(run func(ctx context.Context, arg sql.GetImageParams)) *MockQuerier_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetImageParams))
	})
	return _c
}

func (_c *MockQuerier_GetImage_Call) Return(_a0 *sql.Image, _a1 error) *MockQuerier_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetImage_Call) RunAndReturn(run func(context.Context, sql.GetImageParams) (*sql.Image, error)) *MockQuerier_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetImagesScheduledForSync provides a mock function with given fields: ctx
func (_m *MockQuerier) GetImagesScheduledForSync(ctx context.Context) ([]*sql.Image, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetImagesScheduledForSync")
	}

	var r0 []*sql.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*sql.Image, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*sql.Image); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetImagesScheduledForSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImagesScheduledForSync'
type MockQuerier_GetImagesScheduledForSync_Call struct {
	*mock.Call
}

// GetImagesScheduledForSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetImagesScheduledForSync(ctx interface{}) *MockQuerier_GetImagesScheduledForSync_Call {
	return &MockQuerier_GetImagesScheduledForSync_Call{Call: _e.mock.On("GetImagesScheduledForSync", ctx)}
}

func (_c *MockQuerier_GetImagesScheduledForSync_Call) Run(run func(ctx context.Context)) *MockQuerier_GetImagesScheduledForSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetImagesScheduledForSync_Call) Return(_a0 []*sql.Image, _a1 error) *MockQuerier_GetImagesScheduledForSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetImagesScheduledForSync_Call) RunAndReturn(run func(context.Context) ([]*sql.Image, error)) *MockQuerier_GetImagesScheduledForSync_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastSnapshotDateForVulnerabilitySummary provides a mock function with given fields: ctx
func (_m *MockQuerier) GetLastSnapshotDateForVulnerabilitySummary(ctx context.Context) (pgtype.Date, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastSnapshotDateForVulnerabilitySummary")
	}

	var r0 pgtype.Date
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgtype.Date, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgtype.Date); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pgtype.Date)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSnapshotDateForVulnerabilitySummary'
type MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call struct {
	*mock.Call
}

// GetLastSnapshotDateForVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetLastSnapshotDateForVulnerabilitySummary(ctx interface{}) *MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call {
	return &MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call{Call: _e.mock.On("GetLastSnapshotDateForVulnerabilitySummary", ctx)}
}

func (_c *MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call) Run(run func(ctx context.Context)) *MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call) Return(_a0 pgtype.Date, _a1 error) *MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call) RunAndReturn(run func(context.Context) (pgtype.Date, error)) *MockQuerier_GetLastSnapshotDateForVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceRef provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetSourceRef(ctx context.Context, arg sql.GetSourceRefParams) (*sql.SourceRef, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceRef")
	}

	var r0 *sql.SourceRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetSourceRefParams) (*sql.SourceRef, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetSourceRefParams) *sql.SourceRef); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.SourceRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetSourceRefParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetSourceRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceRef'
type MockQuerier_GetSourceRef_Call struct {
	*mock.Call
}

// GetSourceRef is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetSourceRefParams
func (_e *MockQuerier_Expecter) GetSourceRef(ctx interface{}, arg interface{}) *MockQuerier_GetSourceRef_Call {
	return &MockQuerier_GetSourceRef_Call{Call: _e.mock.On("GetSourceRef", ctx, arg)}
}

func (_c *MockQuerier_GetSourceRef_Call) Run(run func(ctx context.Context, arg sql.GetSourceRefParams)) *MockQuerier_GetSourceRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetSourceRefParams))
	})
	return _c
}

func (_c *MockQuerier_GetSourceRef_Call) Return(_a0 *sql.SourceRef, _a1 error) *MockQuerier_GetSourceRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetSourceRef_Call) RunAndReturn(run func(context.Context, sql.GetSourceRefParams) (*sql.SourceRef, error)) *MockQuerier_GetSourceRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerability provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerability(ctx context.Context, arg sql.GetVulnerabilityParams) (*sql.GetVulnerabilityRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerability")
	}

	var r0 *sql.GetVulnerabilityRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilityParams) (*sql.GetVulnerabilityRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilityParams) *sql.GetVulnerabilityRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetVulnerabilityRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetVulnerabilityParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerability'
type MockQuerier_GetVulnerability_Call struct {
	*mock.Call
}

// GetVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetVulnerabilityParams
func (_e *MockQuerier_Expecter) GetVulnerability(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerability_Call {
	return &MockQuerier_GetVulnerability_Call{Call: _e.mock.On("GetVulnerability", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerability_Call) Run(run func(ctx context.Context, arg sql.GetVulnerabilityParams)) *MockQuerier_GetVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetVulnerabilityParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerability_Call) Return(_a0 *sql.GetVulnerabilityRow, _a1 error) *MockQuerier_GetVulnerability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerability_Call) RunAndReturn(run func(context.Context, sql.GetVulnerabilityParams) (*sql.GetVulnerabilityRow, error)) *MockQuerier_GetVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetVulnerabilityById(ctx context.Context, id pgtype.UUID) (*sql.GetVulnerabilityByIdRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityById")
	}

	var r0 *sql.GetVulnerabilityByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID) (*sql.GetVulnerabilityByIdRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID) *sql.GetVulnerabilityByIdRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetVulnerabilityByIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilityById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityById'
type MockQuerier_GetVulnerabilityById_Call struct {
	*mock.Call
}

// GetVulnerabilityById is a helper method to define mock.On call
//   - ctx context.Context
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetVulnerabilityById(ctx interface{}, id interface{}) *MockQuerier_GetVulnerabilityById_Call {
	return &MockQuerier_GetVulnerabilityById_Call{Call: _e.mock.On("GetVulnerabilityById", ctx, id)}
}

func (_c *MockQuerier_GetVulnerabilityById_Call) Run(run func(ctx context.Context, id pgtype.UUID)) *MockQuerier_GetVulnerabilityById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilityById_Call) Return(_a0 *sql.GetVulnerabilityByIdRow, _a1 error) *MockQuerier_GetVulnerabilityById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilityById_Call) RunAndReturn(run func(context.Context, pgtype.UUID) (*sql.GetVulnerabilityByIdRow, error)) *MockQuerier_GetVulnerabilityById_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerabilitySummary(ctx context.Context, arg sql.GetVulnerabilitySummaryParams) (*sql.GetVulnerabilitySummaryRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummary")
	}

	var r0 *sql.GetVulnerabilitySummaryRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilitySummaryParams) (*sql.GetVulnerabilitySummaryRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilitySummaryParams) *sql.GetVulnerabilitySummaryRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GetVulnerabilitySummaryRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetVulnerabilitySummaryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummary'
type MockQuerier_GetVulnerabilitySummary_Call struct {
	*mock.Call
}

// GetVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) GetVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerabilitySummary_Call {
	return &MockQuerier_GetVulnerabilitySummary_Call{Call: _e.mock.On("GetVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg sql.GetVulnerabilitySummaryParams)) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) Return(_a0 *sql.GetVulnerabilitySummaryRow, _a1 error) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, sql.GetVulnerabilitySummaryParams) (*sql.GetVulnerabilitySummaryRow, error)) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummaryForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerabilitySummaryForImage(ctx context.Context, arg sql.GetVulnerabilitySummaryForImageParams) (*sql.VulnerabilitySummary, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummaryForImage")
	}

	var r0 *sql.VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilitySummaryForImageParams) (*sql.VulnerabilitySummary, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilitySummaryForImageParams) *sql.VulnerabilitySummary); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetVulnerabilitySummaryForImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilitySummaryForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummaryForImage'
type MockQuerier_GetVulnerabilitySummaryForImage_Call struct {
	*mock.Call
}

// GetVulnerabilitySummaryForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetVulnerabilitySummaryForImageParams
func (_e *MockQuerier_Expecter) GetVulnerabilitySummaryForImage(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	return &MockQuerier_GetVulnerabilitySummaryForImage_Call{Call: _e.mock.On("GetVulnerabilitySummaryForImage", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerabilitySummaryForImage_Call) Run(run func(ctx context.Context, arg sql.GetVulnerabilitySummaryForImageParams)) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetVulnerabilitySummaryForImageParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryForImage_Call) Return(_a0 *sql.VulnerabilitySummary, _a1 error) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryForImage_Call) RunAndReturn(run func(context.Context, sql.GetVulnerabilitySummaryForImageParams) (*sql.VulnerabilitySummary, error)) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummaryTimeSeries provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerabilitySummaryTimeSeries(ctx context.Context, arg sql.GetVulnerabilitySummaryTimeSeriesParams) ([]*sql.GetVulnerabilitySummaryTimeSeriesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummaryTimeSeries")
	}

	var r0 []*sql.GetVulnerabilitySummaryTimeSeriesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilitySummaryTimeSeriesParams) ([]*sql.GetVulnerabilitySummaryTimeSeriesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetVulnerabilitySummaryTimeSeriesParams) []*sql.GetVulnerabilitySummaryTimeSeriesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.GetVulnerabilitySummaryTimeSeriesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetVulnerabilitySummaryTimeSeriesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilitySummaryTimeSeries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummaryTimeSeries'
type MockQuerier_GetVulnerabilitySummaryTimeSeries_Call struct {
	*mock.Call
}

// GetVulnerabilitySummaryTimeSeries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetVulnerabilitySummaryTimeSeriesParams
func (_e *MockQuerier_Expecter) GetVulnerabilitySummaryTimeSeries(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	return &MockQuerier_GetVulnerabilitySummaryTimeSeries_Call{Call: _e.mock.On("GetVulnerabilitySummaryTimeSeries", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call) Run(run func(ctx context.Context, arg sql.GetVulnerabilitySummaryTimeSeriesParams)) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetVulnerabilitySummaryTimeSeriesParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call) Return(_a0 []*sql.GetVulnerabilitySummaryTimeSeriesRow, _a1 error) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call) RunAndReturn(run func(context.Context, sql.GetVulnerabilitySummaryTimeSeriesParams) ([]*sql.GetVulnerabilitySummaryTimeSeriesRow, error)) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetWorkload(ctx context.Context, arg sql.GetWorkloadParams) (*sql.Workload, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkload")
	}

	var r0 *sql.Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWorkloadParams) (*sql.Workload, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.GetWorkloadParams) *sql.Workload); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.GetWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkload'
type MockQuerier_GetWorkload_Call struct {
	*mock.Call
}

// GetWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.GetWorkloadParams
func (_e *MockQuerier_Expecter) GetWorkload(ctx interface{}, arg interface{}) *MockQuerier_GetWorkload_Call {
	return &MockQuerier_GetWorkload_Call{Call: _e.mock.On("GetWorkload", ctx, arg)}
}

func (_c *MockQuerier_GetWorkload_Call) Run(run func(ctx context.Context, arg sql.GetWorkloadParams)) *MockQuerier_GetWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.GetWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_GetWorkload_Call) Return(_a0 *sql.Workload, _a1 error) *MockQuerier_GetWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetWorkload_Call) RunAndReturn(run func(context.Context, sql.GetWorkloadParams) (*sql.Workload, error)) *MockQuerier_GetWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) InitializeWorkload(ctx context.Context, arg sql.InitializeWorkloadParams) (pgtype.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InitializeWorkload")
	}

	var r0 pgtype.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.InitializeWorkloadParams) (pgtype.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.InitializeWorkloadParams) pgtype.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.UUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.InitializeWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_InitializeWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeWorkload'
type MockQuerier_InitializeWorkload_Call struct {
	*mock.Call
}

// InitializeWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.InitializeWorkloadParams
func (_e *MockQuerier_Expecter) InitializeWorkload(ctx interface{}, arg interface{}) *MockQuerier_InitializeWorkload_Call {
	return &MockQuerier_InitializeWorkload_Call{Call: _e.mock.On("InitializeWorkload", ctx, arg)}
}

func (_c *MockQuerier_InitializeWorkload_Call) Run(run func(ctx context.Context, arg sql.InitializeWorkloadParams)) *MockQuerier_InitializeWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.InitializeWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_InitializeWorkload_Call) Return(_a0 pgtype.UUID, _a1 error) *MockQuerier_InitializeWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_InitializeWorkload_Call) RunAndReturn(run func(context.Context, sql.InitializeWorkloadParams) (pgtype.UUID, error)) *MockQuerier_InitializeWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobsForWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListJobsForWorkload(ctx context.Context, arg sql.ListJobsForWorkloadParams) ([]*sql.ListJobsForWorkloadRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListJobsForWorkload")
	}

	var r0 []*sql.ListJobsForWorkloadRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListJobsForWorkloadParams) ([]*sql.ListJobsForWorkloadRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListJobsForWorkloadParams) []*sql.ListJobsForWorkloadRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListJobsForWorkloadRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListJobsForWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListJobsForWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobsForWorkload'
type MockQuerier_ListJobsForWorkload_Call struct {
	*mock.Call
}

// ListJobsForWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListJobsForWorkloadParams
func (_e *MockQuerier_Expecter) ListJobsForWorkload(ctx interface{}, arg interface{}) *MockQuerier_ListJobsForWorkload_Call {
	return &MockQuerier_ListJobsForWorkload_Call{Call: _e.mock.On("ListJobsForWorkload", ctx, arg)}
}

func (_c *MockQuerier_ListJobsForWorkload_Call) Run(run func(ctx context.Context, arg sql.ListJobsForWorkloadParams)) *MockQuerier_ListJobsForWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListJobsForWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_ListJobsForWorkload_Call) Return(_a0 []*sql.ListJobsForWorkloadRow, _a1 error) *MockQuerier_ListJobsForWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListJobsForWorkload_Call) RunAndReturn(run func(context.Context, sql.ListJobsForWorkloadParams) ([]*sql.ListJobsForWorkloadRow, error)) *MockQuerier_ListJobsForWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// ListRiverJobs provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListRiverJobs(ctx context.Context, arg sql.ListRiverJobsParams) ([]*sql.RiverJob, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListRiverJobs")
	}

	var r0 []*sql.RiverJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListRiverJobsParams) ([]*sql.RiverJob, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListRiverJobsParams) []*sql.RiverJob); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.RiverJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListRiverJobsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListRiverJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRiverJobs'
type MockQuerier_ListRiverJobs_Call struct {
	*mock.Call
}

// ListRiverJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListRiverJobsParams
func (_e *MockQuerier_Expecter) ListRiverJobs(ctx interface{}, arg interface{}) *MockQuerier_ListRiverJobs_Call {
	return &MockQuerier_ListRiverJobs_Call{Call: _e.mock.On("ListRiverJobs", ctx, arg)}
}

func (_c *MockQuerier_ListRiverJobs_Call) Run(run func(ctx context.Context, arg sql.ListRiverJobsParams)) *MockQuerier_ListRiverJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListRiverJobsParams))
	})
	return _c
}

func (_c *MockQuerier_ListRiverJobs_Call) Return(_a0 []*sql.RiverJob, _a1 error) *MockQuerier_ListRiverJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListRiverJobs_Call) RunAndReturn(run func(context.Context, sql.ListRiverJobsParams) ([]*sql.RiverJob, error)) *MockQuerier_ListRiverJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListSeverityVulnerabilitiesSince provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListSeverityVulnerabilitiesSince(ctx context.Context, arg sql.ListSeverityVulnerabilitiesSinceParams) ([]*sql.ListSeverityVulnerabilitiesSinceRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListSeverityVulnerabilitiesSince")
	}

	var r0 []*sql.ListSeverityVulnerabilitiesSinceRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListSeverityVulnerabilitiesSinceParams) ([]*sql.ListSeverityVulnerabilitiesSinceRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListSeverityVulnerabilitiesSinceParams) []*sql.ListSeverityVulnerabilitiesSinceRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListSeverityVulnerabilitiesSinceRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListSeverityVulnerabilitiesSinceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListSeverityVulnerabilitiesSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSeverityVulnerabilitiesSince'
type MockQuerier_ListSeverityVulnerabilitiesSince_Call struct {
	*mock.Call
}

// ListSeverityVulnerabilitiesSince is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListSeverityVulnerabilitiesSinceParams
func (_e *MockQuerier_Expecter) ListSeverityVulnerabilitiesSince(ctx interface{}, arg interface{}) *MockQuerier_ListSeverityVulnerabilitiesSince_Call {
	return &MockQuerier_ListSeverityVulnerabilitiesSince_Call{Call: _e.mock.On("ListSeverityVulnerabilitiesSince", ctx, arg)}
}

func (_c *MockQuerier_ListSeverityVulnerabilitiesSince_Call) Run(run func(ctx context.Context, arg sql.ListSeverityVulnerabilitiesSinceParams)) *MockQuerier_ListSeverityVulnerabilitiesSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListSeverityVulnerabilitiesSinceParams))
	})
	return _c
}

func (_c *MockQuerier_ListSeverityVulnerabilitiesSince_Call) Return(_a0 []*sql.ListSeverityVulnerabilitiesSinceRow, _a1 error) *MockQuerier_ListSeverityVulnerabilitiesSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListSeverityVulnerabilitiesSince_Call) RunAndReturn(run func(context.Context, sql.ListSeverityVulnerabilitiesSinceParams) ([]*sql.ListSeverityVulnerabilitiesSinceRow, error)) *MockQuerier_ListSeverityVulnerabilitiesSince_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuppressedVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListSuppressedVulnerabilities(ctx context.Context, arg sql.ListSuppressedVulnerabilitiesParams) ([]*sql.ListSuppressedVulnerabilitiesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListSuppressedVulnerabilities")
	}

	var r0 []*sql.ListSuppressedVulnerabilitiesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListSuppressedVulnerabilitiesParams) ([]*sql.ListSuppressedVulnerabilitiesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListSuppressedVulnerabilitiesParams) []*sql.ListSuppressedVulnerabilitiesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListSuppressedVulnerabilitiesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListSuppressedVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListSuppressedVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuppressedVulnerabilities'
type MockQuerier_ListSuppressedVulnerabilities_Call struct {
	*mock.Call
}

// ListSuppressedVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListSuppressedVulnerabilitiesParams
func (_e *MockQuerier_Expecter) ListSuppressedVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_ListSuppressedVulnerabilities_Call {
	return &MockQuerier_ListSuppressedVulnerabilities_Call{Call: _e.mock.On("ListSuppressedVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_ListSuppressedVulnerabilities_Call) Run(run func(ctx context.Context, arg sql.ListSuppressedVulnerabilitiesParams)) *MockQuerier_ListSuppressedVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListSuppressedVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilities_Call) Return(_a0 []*sql.ListSuppressedVulnerabilitiesRow, _a1 error) *MockQuerier_ListSuppressedVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilities_Call) RunAndReturn(run func(context.Context, sql.ListSuppressedVulnerabilitiesParams) ([]*sql.ListSuppressedVulnerabilitiesRow, error)) *MockQuerier_ListSuppressedVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuppressedVulnerabilitiesForImage provides a mock function with given fields: ctx, imageName
func (_m *MockQuerier) ListSuppressedVulnerabilitiesForImage(ctx context.Context, imageName string) ([]*sql.SuppressedVulnerability, error) {
	ret := _m.Called(ctx, imageName)

	if len(ret) == 0 {
		panic("no return value specified for ListSuppressedVulnerabilitiesForImage")
	}

	var r0 []*sql.SuppressedVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*sql.SuppressedVulnerability, error)); ok {
		return rf(ctx, imageName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*sql.SuppressedVulnerability); ok {
		r0 = rf(ctx, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.SuppressedVulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListSuppressedVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuppressedVulnerabilitiesForImage'
type MockQuerier_ListSuppressedVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// ListSuppressedVulnerabilitiesForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
func (_e *MockQuerier_Expecter) ListSuppressedVulnerabilitiesForImage(ctx interface{}, imageName interface{}) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	return &MockQuerier_ListSuppressedVulnerabilitiesForImage_Call{Call: _e.mock.On("ListSuppressedVulnerabilitiesForImage", ctx, imageName)}
}

func (_c *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call) Run(run func(ctx context.Context, imageName string)) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call) Return(_a0 []*sql.SuppressedVulnerability, _a1 error) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, string) ([]*sql.SuppressedVulnerability, error)) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListUnusedImages provides a mock function with given fields: ctx, name
func (_m *MockQuerier) ListUnusedImages(ctx context.Context, name *string) ([]*sql.ListUnusedImagesRow, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ListUnusedImages")
	}

	var r0 []*sql.ListUnusedImagesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) ([]*sql.ListUnusedImagesRow, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) []*sql.ListUnusedImagesRow); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListUnusedImagesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListUnusedImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUnusedImages'
type MockQuerier_ListUnusedImages_Call struct {
	*mock.Call
}

// ListUnusedImages is a helper method to define mock.On call
//   - ctx context.Context
//   - name *string
func (_e *MockQuerier_Expecter) ListUnusedImages(ctx interface{}, name interface{}) *MockQuerier_ListUnusedImages_Call {
	return &MockQuerier_ListUnusedImages_Call{Call: _e.mock.On("ListUnusedImages", ctx, name)}
}

func (_c *MockQuerier_ListUnusedImages_Call) Run(run func(ctx context.Context, name *string)) *MockQuerier_ListUnusedImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string))
	})
	return _c
}

func (_c *MockQuerier_ListUnusedImages_Call) Return(_a0 []*sql.ListUnusedImagesRow, _a1 error) *MockQuerier_ListUnusedImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListUnusedImages_Call) RunAndReturn(run func(context.Context, *string) ([]*sql.ListUnusedImagesRow, error)) *MockQuerier_ListUnusedImages_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListVulnerabilities(ctx context.Context, arg sql.ListVulnerabilitiesParams) ([]*sql.ListVulnerabilitiesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilities")
	}

	var r0 []*sql.ListVulnerabilitiesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVulnerabilitiesParams) ([]*sql.ListVulnerabilitiesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVulnerabilitiesParams) []*sql.ListVulnerabilitiesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListVulnerabilitiesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilities'
type MockQuerier_ListVulnerabilities_Call struct {
	*mock.Call
}

// ListVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListVulnerabilitiesParams
func (_e *MockQuerier_Expecter) ListVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_ListVulnerabilities_Call {
	return &MockQuerier_ListVulnerabilities_Call{Call: _e.mock.On("ListVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_ListVulnerabilities_Call) Run(run func(ctx context.Context, arg sql.ListVulnerabilitiesParams)) *MockQuerier_ListVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_ListVulnerabilities_Call) Return(_a0 []*sql.ListVulnerabilitiesRow, _a1 error) *MockQuerier_ListVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListVulnerabilities_Call) RunAndReturn(run func(context.Context, sql.ListVulnerabilitiesParams) ([]*sql.ListVulnerabilitiesRow, error)) *MockQuerier_ListVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitiesForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListVulnerabilitiesForImage(ctx context.Context, arg sql.ListVulnerabilitiesForImageParams) ([]*sql.ListVulnerabilitiesForImageRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitiesForImage")
	}

	var r0 []*sql.ListVulnerabilitiesForImageRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVulnerabilitiesForImageParams) ([]*sql.ListVulnerabilitiesForImageRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVulnerabilitiesForImageParams) []*sql.ListVulnerabilitiesForImageRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListVulnerabilitiesForImageRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListVulnerabilitiesForImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitiesForImage'
type MockQuerier_ListVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// ListVulnerabilitiesForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListVulnerabilitiesForImageParams
func (_e *MockQuerier_Expecter) ListVulnerabilitiesForImage(ctx interface{}, arg interface{}) *MockQuerier_ListVulnerabilitiesForImage_Call {
	return &MockQuerier_ListVulnerabilitiesForImage_Call{Call: _e.mock.On("ListVulnerabilitiesForImage", ctx, arg)}
}

func (_c *MockQuerier_ListVulnerabilitiesForImage_Call) Run(run func(ctx context.Context, arg sql.ListVulnerabilitiesForImageParams)) *MockQuerier_ListVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListVulnerabilitiesForImageParams))
	})
	return _c
}

func (_c *MockQuerier_ListVulnerabilitiesForImage_Call) Return(_a0 []*sql.ListVulnerabilitiesForImageRow, _a1 error) *MockQuerier_ListVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, sql.ListVulnerabilitiesForImageParams) ([]*sql.ListVulnerabilitiesForImageRow, error)) *MockQuerier_ListVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitySummaries provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListVulnerabilitySummaries(ctx context.Context, arg sql.ListVulnerabilitySummariesParams) ([]*sql.ListVulnerabilitySummariesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitySummaries")
	}

	var r0 []*sql.ListVulnerabilitySummariesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVulnerabilitySummariesParams) ([]*sql.ListVulnerabilitySummariesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListVulnerabilitySummariesParams) []*sql.ListVulnerabilitySummariesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListVulnerabilitySummariesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListVulnerabilitySummariesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListVulnerabilitySummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitySummaries'
type MockQuerier_ListVulnerabilitySummaries_Call struct {
	*mock.Call
}

// ListVulnerabilitySummaries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListVulnerabilitySummariesParams
func (_e *MockQuerier_Expecter) ListVulnerabilitySummaries(ctx interface{}, arg interface{}) *MockQuerier_ListVulnerabilitySummaries_Call {
	return &MockQuerier_ListVulnerabilitySummaries_Call{Call: _e.mock.On("ListVulnerabilitySummaries", ctx, arg)}
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) Run(run func(ctx context.Context, arg sql.ListVulnerabilitySummariesParams)) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListVulnerabilitySummariesParams))
	})
	return _c
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) Return(_a0 []*sql.ListVulnerabilitySummariesRow, _a1 error) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) RunAndReturn(run func(context.Context, sql.ListVulnerabilitySummariesParams) ([]*sql.ListVulnerabilitySummariesRow, error)) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadStatus provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListWorkloadStatus(ctx context.Context, arg sql.ListWorkloadStatusParams) ([]*sql.ListWorkloadStatusRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadStatus")
	}

	var r0 []*sql.ListWorkloadStatusRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadStatusParams) ([]*sql.ListWorkloadStatusRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadStatusParams) []*sql.ListWorkloadStatusRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListWorkloadStatusRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListWorkloadStatusParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadStatus'
type MockQuerier_ListWorkloadStatus_Call struct {
	*mock.Call
}

// ListWorkloadStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListWorkloadStatusParams
func (_e *MockQuerier_Expecter) ListWorkloadStatus(ctx interface{}, arg interface{}) *MockQuerier_ListWorkloadStatus_Call {
	return &MockQuerier_ListWorkloadStatus_Call{Call: _e.mock.On("ListWorkloadStatus", ctx, arg)}
}

func (_c *MockQuerier_ListWorkloadStatus_Call) Run(run func(ctx context.Context, arg sql.ListWorkloadStatusParams)) *MockQuerier_ListWorkloadStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWorkloadStatusParams))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadStatus_Call) Return(_a0 []*sql.ListWorkloadStatusRow, _a1 error) *MockQuerier_ListWorkloadStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadStatus_Call) RunAndReturn(run func(context.Context, sql.ListWorkloadStatusParams) ([]*sql.ListWorkloadStatusRow, error)) *MockQuerier_ListWorkloadStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadStatusWithJobs provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListWorkloadStatusWithJobs(ctx context.Context, arg sql.ListWorkloadStatusWithJobsParams) ([]*sql.ListWorkloadStatusWithJobsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadStatusWithJobs")
	}

	var r0 []*sql.ListWorkloadStatusWithJobsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadStatusWithJobsParams) ([]*sql.ListWorkloadStatusWithJobsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadStatusWithJobsParams) []*sql.ListWorkloadStatusWithJobsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListWorkloadStatusWithJobsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListWorkloadStatusWithJobsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadStatusWithJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadStatusWithJobs'
type MockQuerier_ListWorkloadStatusWithJobs_Call struct {
	*mock.Call
}

// ListWorkloadStatusWithJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListWorkloadStatusWithJobsParams
func (_e *MockQuerier_Expecter) ListWorkloadStatusWithJobs(ctx interface{}, arg interface{}) *MockQuerier_ListWorkloadStatusWithJobs_Call {
	return &MockQuerier_ListWorkloadStatusWithJobs_Call{Call: _e.mock.On("ListWorkloadStatusWithJobs", ctx, arg)}
}

func (_c *MockQuerier_ListWorkloadStatusWithJobs_Call) Run(run func(ctx context.Context, arg sql.ListWorkloadStatusWithJobsParams)) *MockQuerier_ListWorkloadStatusWithJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWorkloadStatusWithJobsParams))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadStatusWithJobs_Call) Return(_a0 []*sql.ListWorkloadStatusWithJobsRow, _a1 error) *MockQuerier_ListWorkloadStatusWithJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadStatusWithJobs_Call) RunAndReturn(run func(context.Context, sql.ListWorkloadStatusWithJobsParams) ([]*sql.ListWorkloadStatusWithJobsRow, error)) *MockQuerier_ListWorkloadStatusWithJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadVulnerabilitiesBecameCriticalSince provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListWorkloadVulnerabilitiesBecameCriticalSince(ctx context.Context, arg sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams) ([]*sql.ListWorkloadVulnerabilitiesBecameCriticalSinceRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadVulnerabilitiesBecameCriticalSince")
	}

	var r0 []*sql.ListWorkloadVulnerabilitiesBecameCriticalSinceRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams) ([]*sql.ListWorkloadVulnerabilitiesBecameCriticalSinceRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams) []*sql.ListWorkloadVulnerabilitiesBecameCriticalSinceRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListWorkloadVulnerabilitiesBecameCriticalSinceRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadVulnerabilitiesBecameCriticalSince'
type MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call struct {
	*mock.Call
}

// ListWorkloadVulnerabilitiesBecameCriticalSince is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams
func (_e *MockQuerier_Expecter) ListWorkloadVulnerabilitiesBecameCriticalSince(ctx interface{}, arg interface{}) *MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call {
	return &MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call{Call: _e.mock.On("ListWorkloadVulnerabilitiesBecameCriticalSince", ctx, arg)}
}

func (_c *MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call) Run(run func(ctx context.Context, arg sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams)) *MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call) Return(_a0 []*sql.ListWorkloadVulnerabilitiesBecameCriticalSinceRow, _a1 error) *MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call) RunAndReturn(run func(context.Context, sql.ListWorkloadVulnerabilitiesBecameCriticalSinceParams) ([]*sql.ListWorkloadVulnerabilitiesBecameCriticalSinceRow, error)) *MockQuerier_ListWorkloadVulnerabilitiesBecameCriticalSince_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadsByCluster provides a mock function with given fields: ctx, cluster
func (_m *MockQuerier) ListWorkloadsByCluster(ctx context.Context, cluster string) ([]*sql.Workload, error) {
	ret := _m.Called(ctx, cluster)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadsByCluster")
	}

	var r0 []*sql.Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*sql.Workload, error)); ok {
		return rf(ctx, cluster)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*sql.Workload); ok {
		r0 = rf(ctx, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadsByCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadsByCluster'
type MockQuerier_ListWorkloadsByCluster_Call struct {
	*mock.Call
}

// ListWorkloadsByCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - cluster string
func (_e *MockQuerier_Expecter) ListWorkloadsByCluster(ctx interface{}, cluster interface{}) *MockQuerier_ListWorkloadsByCluster_Call {
	return &MockQuerier_ListWorkloadsByCluster_Call{Call: _e.mock.On("ListWorkloadsByCluster", ctx, cluster)}
}

func (_c *MockQuerier_ListWorkloadsByCluster_Call) Run(run func(ctx context.Context, cluster string)) *MockQuerier_ListWorkloadsByCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadsByCluster_Call) Return(_a0 []*sql.Workload, _a1 error) *MockQuerier_ListWorkloadsByCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadsByCluster_Call) RunAndReturn(run func(context.Context, string) ([]*sql.Workload, error)) *MockQuerier_ListWorkloadsByCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadsByImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListWorkloadsByImage(ctx context.Context, arg sql.ListWorkloadsByImageParams) ([]*sql.ListWorkloadsByImageRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadsByImage")
	}

	var r0 []*sql.ListWorkloadsByImageRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadsByImageParams) ([]*sql.ListWorkloadsByImageRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadsByImageParams) []*sql.ListWorkloadsByImageRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListWorkloadsByImageRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListWorkloadsByImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadsByImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadsByImage'
type MockQuerier_ListWorkloadsByImage_Call struct {
	*mock.Call
}

// ListWorkloadsByImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListWorkloadsByImageParams
func (_e *MockQuerier_Expecter) ListWorkloadsByImage(ctx interface{}, arg interface{}) *MockQuerier_ListWorkloadsByImage_Call {
	return &MockQuerier_ListWorkloadsByImage_Call{Call: _e.mock.On("ListWorkloadsByImage", ctx, arg)}
}

func (_c *MockQuerier_ListWorkloadsByImage_Call) Run(run func(ctx context.Context, arg sql.ListWorkloadsByImageParams)) *MockQuerier_ListWorkloadsByImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWorkloadsByImageParams))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadsByImage_Call) Return(_a0 []*sql.ListWorkloadsByImageRow, _a1 error) *MockQuerier_ListWorkloadsByImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadsByImage_Call) RunAndReturn(run func(context.Context, sql.ListWorkloadsByImageParams) ([]*sql.ListWorkloadsByImageRow, error)) *MockQuerier_ListWorkloadsByImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadsForVulnerabilityById provides a mock function with given fields: ctx, vulnerabilityID
func (_m *MockQuerier) ListWorkloadsForVulnerabilityById(ctx context.Context, vulnerabilityID pgtype.UUID) ([]*sql.ListWorkloadsForVulnerabilityByIdRow, error) {
	ret := _m.Called(ctx, vulnerabilityID)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadsForVulnerabilityById")
	}

	var r0 []*sql.ListWorkloadsForVulnerabilityByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID) ([]*sql.ListWorkloadsForVulnerabilityByIdRow, error)); ok {
		return rf(ctx, vulnerabilityID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID) []*sql.ListWorkloadsForVulnerabilityByIdRow); ok {
		r0 = rf(ctx, vulnerabilityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListWorkloadsForVulnerabilityByIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID) error); ok {
		r1 = rf(ctx, vulnerabilityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadsForVulnerabilityById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadsForVulnerabilityById'
type MockQuerier_ListWorkloadsForVulnerabilityById_Call struct {
	*mock.Call
}

// ListWorkloadsForVulnerabilityById is a helper method to define mock.On call
//   - ctx context.Context
//   - vulnerabilityID pgtype.UUID
func (_e *MockQuerier_Expecter) ListWorkloadsForVulnerabilityById(ctx interface{}, vulnerabilityID interface{}) *MockQuerier_ListWorkloadsForVulnerabilityById_Call {
	return &MockQuerier_ListWorkloadsForVulnerabilityById_Call{Call: _e.mock.On("ListWorkloadsForVulnerabilityById", ctx, vulnerabilityID)}
}

func (_c *MockQuerier_ListWorkloadsForVulnerabilityById_Call) Run(run func(ctx context.Context, vulnerabilityID pgtype.UUID)) *MockQuerier_ListWorkloadsForVulnerabilityById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadsForVulnerabilityById_Call) Return(_a0 []*sql.ListWorkloadsForVulnerabilityByIdRow, _a1 error) *MockQuerier_ListWorkloadsForVulnerabilityById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadsForVulnerabilityById_Call) RunAndReturn(run func(context.Context, pgtype.UUID) ([]*sql.ListWorkloadsForVulnerabilityByIdRow, error)) *MockQuerier_ListWorkloadsForVulnerabilityById_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadsMeanHoursToFixCriticalVulns provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListWorkloadsMeanHoursToFixCriticalVulns(ctx context.Context, arg sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams) ([]*sql.ListWorkloadsMeanHoursToFixCriticalVulnsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadsMeanHoursToFixCriticalVulns")
	}

	var r0 []*sql.ListWorkloadsMeanHoursToFixCriticalVulnsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams) ([]*sql.ListWorkloadsMeanHoursToFixCriticalVulnsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams) []*sql.ListWorkloadsMeanHoursToFixCriticalVulnsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.ListWorkloadsMeanHoursToFixCriticalVulnsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadsMeanHoursToFixCriticalVulns'
type MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call struct {
	*mock.Call
}

// ListWorkloadsMeanHoursToFixCriticalVulns is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams
func (_e *MockQuerier_Expecter) ListWorkloadsMeanHoursToFixCriticalVulns(ctx interface{}, arg interface{}) *MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call {
	return &MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call{Call: _e.mock.On("ListWorkloadsMeanHoursToFixCriticalVulns", ctx, arg)}
}

func (_c *MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call) Run(run func(ctx context.Context, arg sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams)) *MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call) Return(_a0 []*sql.ListWorkloadsMeanHoursToFixCriticalVulnsRow, _a1 error) *MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call) RunAndReturn(run func(context.Context, sql.ListWorkloadsMeanHoursToFixCriticalVulnsParams) ([]*sql.ListWorkloadsMeanHoursToFixCriticalVulnsRow, error)) *MockQuerier_ListWorkloadsMeanHoursToFixCriticalVulns_Call {
	_c.Call.Return(run)
	return _c
}

// MarkImagesAsUntracked provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) MarkImagesAsUntracked(ctx context.Context, arg sql.MarkImagesAsUntrackedParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MarkImagesAsUntracked")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.MarkImagesAsUntrackedParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.MarkImagesAsUntrackedParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.MarkImagesAsUntrackedParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_MarkImagesAsUntracked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkImagesAsUntracked'
type MockQuerier_MarkImagesAsUntracked_Call struct {
	*mock.Call
}

// MarkImagesAsUntracked is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.MarkImagesAsUntrackedParams
func (_e *MockQuerier_Expecter) MarkImagesAsUntracked(ctx interface{}, arg interface{}) *MockQuerier_MarkImagesAsUntracked_Call {
	return &MockQuerier_MarkImagesAsUntracked_Call{Call: _e.mock.On("MarkImagesAsUntracked", ctx, arg)}
}

func (_c *MockQuerier_MarkImagesAsUntracked_Call) Run(run func(ctx context.Context, arg sql.MarkImagesAsUntrackedParams)) *MockQuerier_MarkImagesAsUntracked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.MarkImagesAsUntrackedParams))
	})
	return _c
}

func (_c *MockQuerier_MarkImagesAsUntracked_Call) Return(_a0 int64, _a1 error) *MockQuerier_MarkImagesAsUntracked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_MarkImagesAsUntracked_Call) RunAndReturn(run func(context.Context, sql.MarkImagesAsUntrackedParams) (int64, error)) *MockQuerier_MarkImagesAsUntracked_Call {
	_c.Call.Return(run)
	return _c
}

// MarkImagesForResync provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) MarkImagesForResync(ctx context.Context, arg sql.MarkImagesForResyncParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MarkImagesForResync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.MarkImagesForResyncParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_MarkImagesForResync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkImagesForResync'
type MockQuerier_MarkImagesForResync_Call struct {
	*mock.Call
}

// MarkImagesForResync is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.MarkImagesForResyncParams
func (_e *MockQuerier_Expecter) MarkImagesForResync(ctx interface{}, arg interface{}) *MockQuerier_MarkImagesForResync_Call {
	return &MockQuerier_MarkImagesForResync_Call{Call: _e.mock.On("MarkImagesForResync", ctx, arg)}
}

func (_c *MockQuerier_MarkImagesForResync_Call) Run(run func(ctx context.Context, arg sql.MarkImagesForResyncParams)) *MockQuerier_MarkImagesForResync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.MarkImagesForResyncParams))
	})
	return _c
}

func (_c *MockQuerier_MarkImagesForResync_Call) Return(_a0 error) *MockQuerier_MarkImagesForResync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_MarkImagesForResync_Call) RunAndReturn(run func(context.Context, sql.MarkImagesForResyncParams) error) *MockQuerier_MarkImagesForResync_Call {
	_c.Call.Return(run)
	return _c
}

// MarkUnusedImages provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) MarkUnusedImages(ctx context.Context, arg sql.MarkUnusedImagesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MarkUnusedImages")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.MarkUnusedImagesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.MarkUnusedImagesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.MarkUnusedImagesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_MarkUnusedImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkUnusedImages'
type MockQuerier_MarkUnusedImages_Call struct {
	*mock.Call
}

// MarkUnusedImages is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.MarkUnusedImagesParams
func (_e *MockQuerier_Expecter) MarkUnusedImages(ctx interface{}, arg interface{}) *MockQuerier_MarkUnusedImages_Call {
	return &MockQuerier_MarkUnusedImages_Call{Call: _e.mock.On("MarkUnusedImages", ctx, arg)}
}

func (_c *MockQuerier_MarkUnusedImages_Call) Run(run func(ctx context.Context, arg sql.MarkUnusedImagesParams)) *MockQuerier_MarkUnusedImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.MarkUnusedImagesParams))
	})
	return _c
}

func (_c *MockQuerier_MarkUnusedImages_Call) Return(_a0 int64, _a1 error) *MockQuerier_MarkUnusedImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_MarkUnusedImages_Call) RunAndReturn(run func(context.Context, sql.MarkUnusedImagesParams) (int64, error)) *MockQuerier_MarkUnusedImages_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshVulnerabilitySummaryDailyView provides a mock function with given fields: ctx
func (_m *MockQuerier) RefreshVulnerabilitySummaryDailyView(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshVulnerabilitySummaryDailyView")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RefreshVulnerabilitySummaryDailyView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshVulnerabilitySummaryDailyView'
type MockQuerier_RefreshVulnerabilitySummaryDailyView_Call struct {
	*mock.Call
}

// RefreshVulnerabilitySummaryDailyView is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) RefreshVulnerabilitySummaryDailyView(ctx interface{}) *MockQuerier_RefreshVulnerabilitySummaryDailyView_Call {
	return &MockQuerier_RefreshVulnerabilitySummaryDailyView_Call{Call: _e.mock.On("RefreshVulnerabilitySummaryDailyView", ctx)}
}

func (_c *MockQuerier_RefreshVulnerabilitySummaryDailyView_Call) Run(run func(ctx context.Context)) *MockQuerier_RefreshVulnerabilitySummaryDailyView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_RefreshVulnerabilitySummaryDailyView_Call) Return(_a0 error) *MockQuerier_RefreshVulnerabilitySummaryDailyView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RefreshVulnerabilitySummaryDailyView_Call) RunAndReturn(run func(context.Context) error) *MockQuerier_RefreshVulnerabilitySummaryDailyView_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshVulnerabilitySummaryForDate provides a mock function with given fields: ctx, date
func (_m *MockQuerier) RefreshVulnerabilitySummaryForDate(ctx context.Context, date pgtype.Date) error {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for RefreshVulnerabilitySummaryForDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Date) error); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RefreshVulnerabilitySummaryForDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshVulnerabilitySummaryForDate'
type MockQuerier_RefreshVulnerabilitySummaryForDate_Call struct {
	*mock.Call
}

// RefreshVulnerabilitySummaryForDate is a helper method to define mock.On call
//   - ctx context.Context
//   - date pgtype.Date
func (_e *MockQuerier_Expecter) RefreshVulnerabilitySummaryForDate(ctx interface{}, date interface{}) *MockQuerier_RefreshVulnerabilitySummaryForDate_Call {
	return &MockQuerier_RefreshVulnerabilitySummaryForDate_Call{Call: _e.mock.On("RefreshVulnerabilitySummaryForDate", ctx, date)}
}

func (_c *MockQuerier_RefreshVulnerabilitySummaryForDate_Call) Run(run func(ctx context.Context, date pgtype.Date)) *MockQuerier_RefreshVulnerabilitySummaryForDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Date))
	})
	return _c
}

func (_c *MockQuerier_RefreshVulnerabilitySummaryForDate_Call) Return(_a0 error) *MockQuerier_RefreshVulnerabilitySummaryForDate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RefreshVulnerabilitySummaryForDate_Call) RunAndReturn(run func(context.Context, pgtype.Date) error) *MockQuerier_RefreshVulnerabilitySummaryForDate_Call {
	_c.Call.Return(run)
	return _c
}

// ResetDatabase provides a mock function with given fields: ctx
func (_m *MockQuerier) ResetDatabase(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ResetDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ResetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetDatabase'
type MockQuerier_ResetDatabase_Call struct {
	*mock.Call
}

// ResetDatabase is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ResetDatabase(ctx interface{}) *MockQuerier_ResetDatabase_Call {
	return &MockQuerier_ResetDatabase_Call{Call: _e.mock.On("ResetDatabase", ctx)}
}

func (_c *MockQuerier_ResetDatabase_Call) Run(run func(ctx context.Context)) *MockQuerier_ResetDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_ResetDatabase_Call) Return(_a0 error) *MockQuerier_ResetDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ResetDatabase_Call) RunAndReturn(run func(context.Context) error) *MockQuerier_ResetDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveWorkloadVulnerabilitiesForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ResolveWorkloadVulnerabilitiesForImage(ctx context.Context, arg sql.ResolveWorkloadVulnerabilitiesForImageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ResolveWorkloadVulnerabilitiesForImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.ResolveWorkloadVulnerabilitiesForImageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveWorkloadVulnerabilitiesForImage'
type MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// ResolveWorkloadVulnerabilitiesForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.ResolveWorkloadVulnerabilitiesForImageParams
func (_e *MockQuerier_Expecter) ResolveWorkloadVulnerabilitiesForImage(ctx interface{}, arg interface{}) *MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call {
	return &MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call{Call: _e.mock.On("ResolveWorkloadVulnerabilitiesForImage", ctx, arg)}
}

func (_c *MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call) Run(run func(ctx context.Context, arg sql.ResolveWorkloadVulnerabilitiesForImageParams)) *MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.ResolveWorkloadVulnerabilitiesForImageParams))
	})
	return _c
}

func (_c *MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call) Return(_a0 error) *MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, sql.ResolveWorkloadVulnerabilitiesForImageParams) error) *MockQuerier_ResolveWorkloadVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorkloadState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) SetWorkloadState(ctx context.Context, arg sql.SetWorkloadStateParams) ([]*sql.SetWorkloadStateRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkloadState")
	}

	var r0 []*sql.SetWorkloadStateRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.SetWorkloadStateParams) ([]*sql.SetWorkloadStateRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.SetWorkloadStateParams) []*sql.SetWorkloadStateRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.SetWorkloadStateRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.SetWorkloadStateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_SetWorkloadState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkloadState'
type MockQuerier_SetWorkloadState_Call struct {
	*mock.Call
}

// SetWorkloadState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.SetWorkloadStateParams
func (_e *MockQuerier_Expecter) SetWorkloadState(ctx interface{}, arg interface{}) *MockQuerier_SetWorkloadState_Call {
	return &MockQuerier_SetWorkloadState_Call{Call: _e.mock.On("SetWorkloadState", ctx, arg)}
}

func (_c *MockQuerier_SetWorkloadState_Call) Run(run func(ctx context.Context, arg sql.SetWorkloadStateParams)) *MockQuerier_SetWorkloadState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.SetWorkloadStateParams))
	})
	return _c
}

func (_c *MockQuerier_SetWorkloadState_Call) Return(_a0 []*sql.SetWorkloadStateRow, _a1 error) *MockQuerier_SetWorkloadState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_SetWorkloadState_Call) RunAndReturn(run func(context.Context, sql.SetWorkloadStateParams) ([]*sql.SetWorkloadStateRow, error)) *MockQuerier_SetWorkloadState_Call {
	_c.Call.Return(run)
	return _c
}

// SuppressVulnerability provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) SuppressVulnerability(ctx context.Context, arg sql.SuppressVulnerabilityParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SuppressVulnerability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.SuppressVulnerabilityParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SuppressVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuppressVulnerability'
type MockQuerier_SuppressVulnerability_Call struct {
	*mock.Call
}

// SuppressVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.SuppressVulnerabilityParams
func (_e *MockQuerier_Expecter) SuppressVulnerability(ctx interface{}, arg interface{}) *MockQuerier_SuppressVulnerability_Call {
	return &MockQuerier_SuppressVulnerability_Call{Call: _e.mock.On("SuppressVulnerability", ctx, arg)}
}

func (_c *MockQuerier_SuppressVulnerability_Call) Run(run func(ctx context.Context, arg sql.SuppressVulnerabilityParams)) *MockQuerier_SuppressVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.SuppressVulnerabilityParams))
	})
	return _c
}

func (_c *MockQuerier_SuppressVulnerability_Call) Return(_a0 error) *MockQuerier_SuppressVulnerability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SuppressVulnerability_Call) RunAndReturn(run func(context.Context, sql.SuppressVulnerabilityParams) error) *MockQuerier_SuppressVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// SyncWorkloadVulnerabilitiesForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) SyncWorkloadVulnerabilitiesForImage(ctx context.Context, arg sql.SyncWorkloadVulnerabilitiesForImageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SyncWorkloadVulnerabilitiesForImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.SyncWorkloadVulnerabilitiesForImageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncWorkloadVulnerabilitiesForImage'
type MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// SyncWorkloadVulnerabilitiesForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.SyncWorkloadVulnerabilitiesForImageParams
func (_e *MockQuerier_Expecter) SyncWorkloadVulnerabilitiesForImage(ctx interface{}, arg interface{}) *MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call {
	return &MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call{Call: _e.mock.On("SyncWorkloadVulnerabilitiesForImage", ctx, arg)}
}

func (_c *MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call) Run(run func(ctx context.Context, arg sql.SyncWorkloadVulnerabilitiesForImageParams)) *MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.SyncWorkloadVulnerabilitiesForImageParams))
	})
	return _c
}

func (_c *MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call) Return(_a0 error) *MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, sql.SyncWorkloadVulnerabilitiesForImageParams) error) *MockQuerier_SyncWorkloadVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateImage(ctx context.Context, arg sql.UpdateImageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateImageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImage'
type MockQuerier_UpdateImage_Call struct {
	*mock.Call
}

// UpdateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.UpdateImageParams
func (_e *MockQuerier_Expecter) UpdateImage(ctx interface{}, arg interface{}) *MockQuerier_UpdateImage_Call {
	return &MockQuerier_UpdateImage_Call{Call: _e.mock.On("UpdateImage", ctx, arg)}
}

func (_c *MockQuerier_UpdateImage_Call) Run(run func(ctx context.Context, arg sql.UpdateImageParams)) *MockQuerier_UpdateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpdateImageParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateImage_Call) Return(_a0 error) *MockQuerier_UpdateImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateImage_Call) RunAndReturn(run func(context.Context, sql.UpdateImageParams) error) *MockQuerier_UpdateImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImageState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateImageState(ctx context.Context, arg sql.UpdateImageStateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateImageStateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateImageState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImageState'
type MockQuerier_UpdateImageState_Call struct {
	*mock.Call
}

// UpdateImageState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.UpdateImageStateParams
func (_e *MockQuerier_Expecter) UpdateImageState(ctx interface{}, arg interface{}) *MockQuerier_UpdateImageState_Call {
	return &MockQuerier_UpdateImageState_Call{Call: _e.mock.On("UpdateImageState", ctx, arg)}
}

func (_c *MockQuerier_UpdateImageState_Call) Run(run func(ctx context.Context, arg sql.UpdateImageStateParams)) *MockQuerier_UpdateImageState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpdateImageStateParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateImageState_Call) Return(_a0 error) *MockQuerier_UpdateImageState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateImageState_Call) RunAndReturn(run func(context.Context, sql.UpdateImageStateParams) error) *MockQuerier_UpdateImageState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImageSyncStatus provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateImageSyncStatus(ctx context.Context, arg sql.UpdateImageSyncStatusParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageSyncStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateImageSyncStatusParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateImageSyncStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImageSyncStatus'
type MockQuerier_UpdateImageSyncStatus_Call struct {
	*mock.Call
}

// UpdateImageSyncStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.UpdateImageSyncStatusParams
func (_e *MockQuerier_Expecter) UpdateImageSyncStatus(ctx interface{}, arg interface{}) *MockQuerier_UpdateImageSyncStatus_Call {
	return &MockQuerier_UpdateImageSyncStatus_Call{Call: _e.mock.On("UpdateImageSyncStatus", ctx, arg)}
}

func (_c *MockQuerier_UpdateImageSyncStatus_Call) Run(run func(ctx context.Context, arg sql.UpdateImageSyncStatusParams)) *MockQuerier_UpdateImageSyncStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpdateImageSyncStatusParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateImageSyncStatus_Call) Return(_a0 error) *MockQuerier_UpdateImageSyncStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateImageSyncStatus_Call) RunAndReturn(run func(context.Context, sql.UpdateImageSyncStatusParams) error) *MockQuerier_UpdateImageSyncStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkloadState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateWorkloadState(ctx context.Context, arg sql.UpdateWorkloadStateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkloadState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpdateWorkloadStateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateWorkloadState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkloadState'
type MockQuerier_UpdateWorkloadState_Call struct {
	*mock.Call
}

// UpdateWorkloadState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.UpdateWorkloadStateParams
func (_e *MockQuerier_Expecter) UpdateWorkloadState(ctx interface{}, arg interface{}) *MockQuerier_UpdateWorkloadState_Call {
	return &MockQuerier_UpdateWorkloadState_Call{Call: _e.mock.On("UpdateWorkloadState", ctx, arg)}
}

func (_c *MockQuerier_UpdateWorkloadState_Call) Run(run func(ctx context.Context, arg sql.UpdateWorkloadStateParams)) *MockQuerier_UpdateWorkloadState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpdateWorkloadStateParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateWorkloadState_Call) Return(_a0 error) *MockQuerier_UpdateWorkloadState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateWorkloadState_Call) RunAndReturn(run func(context.Context, sql.UpdateWorkloadStateParams) error) *MockQuerier_UpdateWorkloadState_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpsertWorkload(ctx context.Context, arg sql.UpsertWorkloadParams) (pgtype.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertWorkload")
	}

	var r0 pgtype.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpsertWorkloadParams) (pgtype.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.UpsertWorkloadParams) pgtype.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.UUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.UpsertWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpsertWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkload'
type MockQuerier_UpsertWorkload_Call struct {
	*mock.Call
}

// UpsertWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sql.UpsertWorkloadParams
func (_e *MockQuerier_Expecter) UpsertWorkload(ctx interface{}, arg interface{}) *MockQuerier_UpsertWorkload_Call {
	return &MockQuerier_UpsertWorkload_Call{Call: _e.mock.On("UpsertWorkload", ctx, arg)}
}

func (_c *MockQuerier_UpsertWorkload_Call) Run(run func(ctx context.Context, arg sql.UpsertWorkloadParams)) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.UpsertWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_UpsertWorkload_Call) Return(_a0 pgtype.UUID, _a1 error) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpsertWorkload_Call) RunAndReturn(run func(context.Context, sql.UpsertWorkloadParams) (pgtype.UUID, error)) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
