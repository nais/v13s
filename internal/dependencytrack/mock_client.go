// Code generated by mockery. DO NOT EDIT.

package dependencytrack

import (
	context "context"

	client "github.com/nais/v13s/internal/dependencytrack/client"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetFindings provides a mock function with given fields: ctx, uuid, suppressed
func (_m *MockClient) GetFindings(ctx context.Context, uuid string, suppressed bool) ([]client.Finding, error) {
	ret := _m.Called(ctx, uuid, suppressed)

	if len(ret) == 0 {
		panic("no return value specified for GetFindings")
	}

	var r0 []client.Finding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ([]client.Finding, error)); ok {
		return rf(ctx, uuid, suppressed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []client.Finding); ok {
		r0 = rf(ctx, uuid, suppressed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Finding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, uuid, suppressed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindings'
type MockClient_GetFindings_Call struct {
	*mock.Call
}

// GetFindings is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - suppressed bool
func (_e *MockClient_Expecter) GetFindings(ctx interface{}, uuid interface{}, suppressed interface{}) *MockClient_GetFindings_Call {
	return &MockClient_GetFindings_Call{Call: _e.mock.On("GetFindings", ctx, uuid, suppressed)}
}

func (_c *MockClient_GetFindings_Call) Run(run func(ctx context.Context, uuid string, suppressed bool)) *MockClient_GetFindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockClient_GetFindings_Call) Return(_a0 []client.Finding, _a1 error) *MockClient_GetFindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFindings_Call) RunAndReturn(run func(context.Context, string, bool) ([]client.Finding, error)) *MockClient_GetFindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, name, version
func (_m *MockClient) GetProject(ctx context.Context, name string, version string) (*client.Project, error) {
	ret := _m.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*client.Project, error)); ok {
		return rf(ctx, name, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *client.Project); ok {
		r0 = rf(ctx, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockClient_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockClient_Expecter) GetProject(ctx interface{}, name interface{}, version interface{}) *MockClient_GetProject_Call {
	return &MockClient_GetProject_Call{Call: _e.mock.On("GetProject", ctx, name, version)}
}

func (_c *MockClient_GetProject_Call) Run(run func(ctx context.Context, name string, version string)) *MockClient_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetProject_Call) Return(_a0 *client.Project, _a1 error) *MockClient_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProject_Call) RunAndReturn(run func(context.Context, string, string) (*client.Project, error)) *MockClient_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx, limit, offset
func (_m *MockClient) GetProjects(ctx context.Context, limit int32, offset int32) ([]client.Project, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 []client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]client.Project, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []client.Project); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockClient_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
//   - offset int32
func (_e *MockClient_Expecter) GetProjects(ctx interface{}, limit interface{}, offset interface{}) *MockClient_GetProjects_Call {
	return &MockClient_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx, limit, offset)}
}

func (_c *MockClient_GetProjects_Call) Run(run func(ctx context.Context, limit int32, offset int32)) *MockClient_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *MockClient_GetProjects_Call) Return(_a0 []client.Project, _a1 error) *MockClient_GetProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProjects_Call) RunAndReturn(run func(context.Context, int32, int32) ([]client.Project, error)) *MockClient_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByTag provides a mock function with given fields: ctx, tag, limit, offset
func (_m *MockClient) GetProjectsByTag(ctx context.Context, tag string, limit int32, offset int32) ([]client.Project, error) {
	ret := _m.Called(ctx, tag, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByTag")
	}

	var r0 []client.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) ([]client.Project, error)); ok {
		return rf(ctx, tag, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) []client.Project); ok {
		r0 = rf(ctx, tag, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32) error); ok {
		r1 = rf(ctx, tag, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjectsByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByTag'
type MockClient_GetProjectsByTag_Call struct {
	*mock.Call
}

// GetProjectsByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
//   - limit int32
//   - offset int32
func (_e *MockClient_Expecter) GetProjectsByTag(ctx interface{}, tag interface{}, limit interface{}, offset interface{}) *MockClient_GetProjectsByTag_Call {
	return &MockClient_GetProjectsByTag_Call{Call: _e.mock.On("GetProjectsByTag", ctx, tag, limit, offset)}
}

func (_c *MockClient_GetProjectsByTag_Call) Run(run func(ctx context.Context, tag string, limit int32, offset int32)) *MockClient_GetProjectsByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockClient_GetProjectsByTag_Call) Return(_a0 []client.Project, _a1 error) *MockClient_GetProjectsByTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProjectsByTag_Call) RunAndReturn(run func(context.Context, string, int32, int32) ([]client.Project, error)) *MockClient_GetProjectsByTag_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
