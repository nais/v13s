/*
Dependency-Track API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.11.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CloneProjectRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloneProjectRequest{}

// CloneProjectRequest struct for CloneProjectRequest
type CloneProjectRequest struct {
	Project string  `json:"project" validate:"regexp=^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"`
	Version *string `json:"version,omitempty" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}\\\\n\\\\r\\\\t]*$"`
}

type _CloneProjectRequest CloneProjectRequest

// NewCloneProjectRequest instantiates a new CloneProjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneProjectRequest(project string) *CloneProjectRequest {
	this := CloneProjectRequest{}
	this.Project = project
	return &this
}

// NewCloneProjectRequestWithDefaults instantiates a new CloneProjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneProjectRequestWithDefaults() *CloneProjectRequest {
	this := CloneProjectRequest{}
	return &this
}

// GetProject returns the Project field value
func (o *CloneProjectRequest) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *CloneProjectRequest) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *CloneProjectRequest) SetProject(v string) {
	o.Project = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CloneProjectRequest) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneProjectRequest) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CloneProjectRequest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CloneProjectRequest) SetVersion(v string) {
	o.Version = &v
}

func (o CloneProjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloneProjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project"] = o.Project
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *CloneProjectRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"project",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloneProjectRequest := _CloneProjectRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloneProjectRequest)

	if err != nil {
		return err
	}

	*o = CloneProjectRequest(varCloneProjectRequest)

	return err
}

type NullableCloneProjectRequest struct {
	value *CloneProjectRequest
	isSet bool
}

func (v NullableCloneProjectRequest) Get() *CloneProjectRequest {
	return v.value
}

func (v *NullableCloneProjectRequest) Set(val *CloneProjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneProjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneProjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneProjectRequest(val *CloneProjectRequest) *NullableCloneProjectRequest {
	return &NullableCloneProjectRequest{value: val, isSet: true}
}

func (v NullableCloneProjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneProjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
