/*
Dependency-Track API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.11.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GroupedFinding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupedFinding{}

// GroupedFinding struct for GroupedFinding
type GroupedFinding struct {
	Vulnerability map[string]map[string]interface{} `json:"vulnerability,omitempty"`
	Attribution   map[string]map[string]interface{} `json:"attribution,omitempty"`
}

// NewGroupedFinding instantiates a new GroupedFinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupedFinding() *GroupedFinding {
	this := GroupedFinding{}
	return &this
}

// NewGroupedFindingWithDefaults instantiates a new GroupedFinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupedFindingWithDefaults() *GroupedFinding {
	this := GroupedFinding{}
	return &this
}

// GetVulnerability returns the Vulnerability field value if set, zero value otherwise.
func (o *GroupedFinding) GetVulnerability() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Vulnerability) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Vulnerability
}

// GetVulnerabilityOk returns a tuple with the Vulnerability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupedFinding) GetVulnerabilityOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Vulnerability) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Vulnerability, true
}

// HasVulnerability returns a boolean if a field has been set.
func (o *GroupedFinding) HasVulnerability() bool {
	if o != nil && !IsNil(o.Vulnerability) {
		return true
	}

	return false
}

// SetVulnerability gets a reference to the given map[string]map[string]interface{} and assigns it to the Vulnerability field.
func (o *GroupedFinding) SetVulnerability(v map[string]map[string]interface{}) {
	o.Vulnerability = v
}

// GetAttribution returns the Attribution field value if set, zero value otherwise.
func (o *GroupedFinding) GetAttribution() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Attribution) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Attribution
}

// GetAttributionOk returns a tuple with the Attribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupedFinding) GetAttributionOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attribution) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Attribution, true
}

// HasAttribution returns a boolean if a field has been set.
func (o *GroupedFinding) HasAttribution() bool {
	if o != nil && !IsNil(o.Attribution) {
		return true
	}

	return false
}

// SetAttribution gets a reference to the given map[string]map[string]interface{} and assigns it to the Attribution field.
func (o *GroupedFinding) SetAttribution(v map[string]map[string]interface{}) {
	o.Attribution = v
}

func (o GroupedFinding) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupedFinding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vulnerability) {
		toSerialize["vulnerability"] = o.Vulnerability
	}
	if !IsNil(o.Attribution) {
		toSerialize["attribution"] = o.Attribution
	}
	return toSerialize, nil
}

type NullableGroupedFinding struct {
	value *GroupedFinding
	isSet bool
}

func (v NullableGroupedFinding) Get() *GroupedFinding {
	return v.value
}

func (v *NullableGroupedFinding) Set(val *GroupedFinding) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupedFinding) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupedFinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupedFinding(val *GroupedFinding) *NullableGroupedFinding {
	return &NullableGroupedFinding{value: val, isSet: true}
}

func (v NullableGroupedFinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupedFinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
