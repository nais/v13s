// Code generated by sqlc. DO NOT EDIT.
// source: workloads.sql

package sql

import (
	"context"
)

const createWorkload = `-- name: CreateWorkload :one
INSERT INTO
    workloads (name, workload_type, namespace, cluster, image_name, image_tag)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING
    id, name, workload_type, namespace, cluster, image_name, image_tag, created_at, updated_at
`

type CreateWorkloadParams struct {
	Name         string
	WorkloadType string
	Namespace    string
	Cluster      string
	ImageName    string
	ImageTag     string
}

func (q *Queries) CreateWorkload(ctx context.Context, arg CreateWorkloadParams) (*Workload, error) {
	row := q.db.QueryRow(ctx, createWorkload,
		arg.Name,
		arg.WorkloadType,
		arg.Namespace,
		arg.Cluster,
		arg.ImageName,
		arg.ImageTag,
	)
	var i Workload
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WorkloadType,
		&i.Namespace,
		&i.Cluster,
		&i.ImageName,
		&i.ImageTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateWorkload = `-- name: UpdateWorkload :one
UPDATE workloads
SET
    image_name = $1,
    image_tag = $2
WHERE
    cluster = $3 AND
    namespace = $4 AND
    workload_type = $5 AND
    name = $6
RETURNING
    id, name, workload_type, namespace, cluster, image_name, image_tag, created_at, updated_at
`

type UpdateWorkloadParams struct {
	ImageName    string
	ImageTag     string
	Cluster      string
	Namespace    string
	WorkloadType string
	Name         string
}

func (q *Queries) UpdateWorkload(ctx context.Context, arg UpdateWorkloadParams) (*Workload, error) {
	row := q.db.QueryRow(ctx, updateWorkload,
		arg.ImageName,
		arg.ImageTag,
		arg.Cluster,
		arg.Namespace,
		arg.WorkloadType,
		arg.Name,
	)
	var i Workload
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WorkloadType,
		&i.Namespace,
		&i.Cluster,
		&i.ImageName,
		&i.ImageTag,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const upsertWorkload = `-- name: UpsertWorkload :exec
INSERT INTO workloads(
    name,
    workload_type,
    namespace,
    cluster,
    image_name,
    image_tag
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) ON CONFLICT
    ON CONSTRAINT workload_id DO
        UPDATE
    SET
        image_name = $5,
        image_tag = $6
`

type UpsertWorkloadParams struct {
	Name         string
	WorkloadType string
	Namespace    string
	Cluster      string
	ImageName    string
	ImageTag     string
}

func (q *Queries) UpsertWorkload(ctx context.Context, arg UpsertWorkloadParams) error {
	_, err := q.db.Exec(ctx, upsertWorkload,
		arg.Name,
		arg.WorkloadType,
		arg.Namespace,
		arg.Cluster,
		arg.ImageName,
		arg.ImageTag,
	)
	return err
}
