// Code generated by sqlc. DO NOT EDIT.
// source: image.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	typeext "github.com/nais/v13s/internal/database/typeext"
)

const createImage = `-- name: CreateImage :exec
INSERT INTO
        images (name, tag, metadata)
VALUES
        ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type CreateImageParams struct {
	Name     string
	Tag      string
	Metadata typeext.MapStringString
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.Exec(ctx, createImage, arg.Name, arg.Tag, arg.Metadata)
	return err
}

const getImage = `-- name: GetImage :one
SELECT name, tag, metadata, state, created_at, updated_at FROM images WHERE name = $1 AND tag = $2
`

type GetImageParams struct {
	Name string
	Tag  string
}

func (q *Queries) GetImage(ctx context.Context, arg GetImageParams) (*Image, error) {
	row := q.db.QueryRow(ctx, getImage, arg.Name, arg.Tag)
	var i Image
	err := row.Scan(
		&i.Name,
		&i.Tag,
		&i.Metadata,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getImagesScheduledForSync = `-- name: GetImagesScheduledForSync :many
SELECT name, tag, metadata, state, created_at, updated_at
FROM images
WHERE state IN ('initialized', 'resync')
ORDER BY updated_at DESC
`

func (q *Queries) GetImagesScheduledForSync(ctx context.Context) ([]*Image, error) {
	rows, err := q.db.Query(ctx, getImagesScheduledForSync)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.Name,
			&i.Tag,
			&i.Metadata,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markImagesAsUntracked = `-- name: MarkImagesAsUntracked :exec
UPDATE images
SET
    state = 'untracked',
    updated_at = NOW()
WHERE state = ANY($1::image_state[])
    AND updated_at < $2
`

type MarkImagesAsUntrackedParams struct {
	IncludedStates []ImageState
	ThresholdTime  pgtype.Timestamptz
}

func (q *Queries) MarkImagesAsUntracked(ctx context.Context, arg MarkImagesAsUntrackedParams) error {
	_, err := q.db.Exec(ctx, markImagesAsUntracked, arg.IncludedStates, arg.ThresholdTime)
	return err
}

const markImagesForResync = `-- name: MarkImagesForResync :exec
UPDATE images
SET state      = 'resync',
    updated_at = NOW()
FROM workloads w
WHERE images.name = w.image_name
  AND images.tag = w.image_tag
  AND images.updated_at < $1
  AND images.state != 'resync'
  AND images.state != ANY($2::image_state[])
`

type MarkImagesForResyncParams struct {
	ThresholdTime  pgtype.Timestamptz
	ExcludedStates []ImageState
}

func (q *Queries) MarkImagesForResync(ctx context.Context, arg MarkImagesForResyncParams) error {
	_, err := q.db.Exec(ctx, markImagesForResync, arg.ThresholdTime, arg.ExcludedStates)
	return err
}

const markUnusedImages = `-- name: MarkUnusedImages :exec
UPDATE images
SET state      = 'unused',
    updated_at = NOW()
WHERE NOT EXISTS (SELECT 1 FROM workloads WHERE image_name = images.name AND image_tag = images.tag)
  AND images.state != 'unused'
  AND images.state != ANY($1::image_state[])
`

func (q *Queries) MarkUnusedImages(ctx context.Context, excludedStates []ImageState) error {
	_, err := q.db.Exec(ctx, markUnusedImages, excludedStates)
	return err
}

const updateImageState = `-- name: UpdateImageState :exec
UPDATE images
SET
    state = $1,
    updated_at = NOW()
WHERE name = $2 AND tag = $3
`

type UpdateImageStateParams struct {
	State ImageState
	Name  string
	Tag   string
}

func (q *Queries) UpdateImageState(ctx context.Context, arg UpdateImageStateParams) error {
	_, err := q.db.Exec(ctx, updateImageState, arg.State, arg.Name, arg.Tag)
	return err
}

const updateImageSyncStatus = `-- name: UpdateImageSyncStatus :exec
INSERT INTO image_sync_status (image_name, image_tag, status_code, reason, source)
VALUES ($1, $2, $3, $4, $5) ON CONFLICT (image_name, image_tag) DO
UPDATE
    SET
        status_code = $3,
    reason = $4,
    updated_at = NOW()
`

type UpdateImageSyncStatusParams struct {
	ImageName  string
	ImageTag   string
	StatusCode string
	Reason     string
	Source     string
}

func (q *Queries) UpdateImageSyncStatus(ctx context.Context, arg UpdateImageSyncStatusParams) error {
	_, err := q.db.Exec(ctx, updateImageSyncStatus,
		arg.ImageName,
		arg.ImageTag,
		arg.StatusCode,
		arg.Reason,
		arg.Source,
	)
	return err
}
