// Code generated by sqlc. DO NOT EDIT.
// source: image.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	typeext "github.com/nais/v13s/internal/database/typeext"
)

const createImage = `-- name: CreateImage :exec
INSERT INTO
        images (name, tag, metadata)
VALUES
        ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type CreateImageParams struct {
	Name     string
	Tag      string
	Metadata typeext.MapStringString
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.Exec(ctx, createImage, arg.Name, arg.Tag, arg.Metadata)
	return err
}

const getImage = `-- name: GetImage :one
SELECT name, tag, metadata, state, created_at, updated_at, ready_for_resync_at FROM images WHERE name = $1 AND tag = $2
`

type GetImageParams struct {
	Name string
	Tag  string
}

func (q *Queries) GetImage(ctx context.Context, arg GetImageParams) (*Image, error) {
	row := q.db.QueryRow(ctx, getImage, arg.Name, arg.Tag)
	var i Image
	err := row.Scan(
		&i.Name,
		&i.Tag,
		&i.Metadata,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReadyForResyncAt,
	)
	return &i, err
}

const getImagesScheduledForSync = `-- name: GetImagesScheduledForSync :many
SELECT name, tag, metadata, state, created_at, updated_at, ready_for_resync_at
FROM images
WHERE ready_for_resync_at IS NOT NULL
  AND ready_for_resync_at <= NOW()
  AND state IN ('initialized', 'resync')
ORDER BY updated_at DESC
`

func (q *Queries) GetImagesScheduledForSync(ctx context.Context) ([]*Image, error) {
	rows, err := q.db.Query(ctx, getImagesScheduledForSync)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.Name,
			&i.Tag,
			&i.Metadata,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadyForResyncAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImagesWithWorkloadsByState = `-- name: ListImagesWithWorkloadsByState :many
SELECT
    i.name AS image_name,
    i.tag AS image_tag,
    w.name AS workload_name,
    w.cluster AS workload_cluster,
    w.namespace AS workload_namespace,
    w.workload_type AS workload_type
FROM images i
         JOIN workloads w
              ON w.image_name = i.name
                  AND w.image_tag = i.tag
WHERE i.state = $1::image_state
  AND ($2::TEXT IS NULL OR i.name = $2::TEXT)
  AND ($3::TEXT IS NULL OR i.tag = $3::TEXT)
ORDER BY i.updated_at, w.name
`

type ListImagesWithWorkloadsByStateParams struct {
	State ImageState
	Name  *string
	Tag   *string
}

type ListImagesWithWorkloadsByStateRow struct {
	ImageName         string
	ImageTag          string
	WorkloadName      string
	WorkloadCluster   string
	WorkloadNamespace string
	WorkloadType      string
}

func (q *Queries) ListImagesWithWorkloadsByState(ctx context.Context, arg ListImagesWithWorkloadsByStateParams) ([]*ListImagesWithWorkloadsByStateRow, error) {
	rows, err := q.db.Query(ctx, listImagesWithWorkloadsByState, arg.State, arg.Name, arg.Tag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListImagesWithWorkloadsByStateRow{}
	for rows.Next() {
		var i ListImagesWithWorkloadsByStateRow
		if err := rows.Scan(
			&i.ImageName,
			&i.ImageTag,
			&i.WorkloadName,
			&i.WorkloadCluster,
			&i.WorkloadNamespace,
			&i.WorkloadType,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnusedImages = `-- name: ListUnusedImages :many
SELECT name, tag
FROM images
WHERE NOT EXISTS (SELECT 1 FROM workloads WHERE image_name = images.name AND image_tag = images.tag)
   AND ($1::TEXT IS NULL OR name = $1::TEXT)
ORDER BY updated_at
`

type ListUnusedImagesRow struct {
	Name string
	Tag  string
}

func (q *Queries) ListUnusedImages(ctx context.Context, name *string) ([]*ListUnusedImagesRow, error) {
	rows, err := q.db.Query(ctx, listUnusedImages, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListUnusedImagesRow{}
	for rows.Next() {
		var i ListUnusedImagesRow
		if err := rows.Scan(&i.Name, &i.Tag); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markImagesAsUntracked = `-- name: MarkImagesAsUntracked :execrows
UPDATE images
SET
    state = 'untracked',
    updated_at = NOW()
WHERE state = ANY($1::image_state[])
    AND updated_at < $2
`

type MarkImagesAsUntrackedParams struct {
	IncludedStates []ImageState
	ThresholdTime  pgtype.Timestamptz
}

func (q *Queries) MarkImagesAsUntracked(ctx context.Context, arg MarkImagesAsUntrackedParams) (int64, error) {
	result, err := q.db.Exec(ctx, markImagesAsUntracked, arg.IncludedStates, arg.ThresholdTime)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const markImagesForResync = `-- name: MarkImagesForResync :exec
UPDATE images
SET state      = 'resync',
    updated_at = NOW()
FROM workloads w
WHERE images.name = w.image_name
  AND images.tag = w.image_tag
  AND images.updated_at < $1
  AND images.state != 'resync'
  AND images.state != ANY($2::image_state[])
`

type MarkImagesForResyncParams struct {
	ThresholdTime  pgtype.Timestamptz
	ExcludedStates []ImageState
}

func (q *Queries) MarkImagesForResync(ctx context.Context, arg MarkImagesForResyncParams) error {
	_, err := q.db.Exec(ctx, markImagesForResync, arg.ThresholdTime, arg.ExcludedStates)
	return err
}

const markUnusedImages = `-- name: MarkUnusedImages :execrows
UPDATE images
SET state      = 'unused',
    updated_at = NOW()
WHERE NOT EXISTS (SELECT 1 FROM workloads WHERE image_name = images.name AND image_tag = images.tag)
  AND images.updated_at < $1
  AND images.state != 'unused'
  AND images.state != ANY($2::image_state[])
`

type MarkUnusedImagesParams struct {
	ThresholdTime  pgtype.Timestamptz
	ExcludedStates []ImageState
}

func (q *Queries) MarkUnusedImages(ctx context.Context, arg MarkUnusedImagesParams) (int64, error) {
	result, err := q.db.Exec(ctx, markUnusedImages, arg.ThresholdTime, arg.ExcludedStates)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateImage = `-- name: UpdateImage :exec
UPDATE images SET
    metadata = $1,
    updated_at = NOW()
WHERE name = $2 AND tag = $3
`

type UpdateImageParams struct {
	Metadata typeext.MapStringString
	Name     string
	Tag      string
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.Exec(ctx, updateImage, arg.Metadata, arg.Name, arg.Tag)
	return err
}

const updateImageState = `-- name: UpdateImageState :exec
UPDATE images
SET
    state = $1,
    ready_for_resync_at = $2,
    updated_at = NOW()
WHERE name = $3 AND tag = $4
`

type UpdateImageStateParams struct {
	State            ImageState
	ReadyForResyncAt pgtype.Timestamptz
	Name             string
	Tag              string
}

func (q *Queries) UpdateImageState(ctx context.Context, arg UpdateImageStateParams) error {
	_, err := q.db.Exec(ctx, updateImageState,
		arg.State,
		arg.ReadyForResyncAt,
		arg.Name,
		arg.Tag,
	)
	return err
}

const updateImageSyncStatus = `-- name: UpdateImageSyncStatus :exec
INSERT INTO image_sync_status (image_name, image_tag, status_code, reason, source)
VALUES ($1, $2, $3, $4, $5) ON CONFLICT (image_name, image_tag) DO
UPDATE
    SET
        status_code = $3,
    reason = $4,
    updated_at = NOW()
`

type UpdateImageSyncStatusParams struct {
	ImageName  string
	ImageTag   string
	StatusCode string
	Reason     string
	Source     string
}

func (q *Queries) UpdateImageSyncStatus(ctx context.Context, arg UpdateImageSyncStatusParams) error {
	_, err := q.db.Exec(ctx, updateImageSyncStatus,
		arg.ImageName,
		arg.ImageTag,
		arg.StatusCode,
		arg.Reason,
		arg.Source,
	)
	return err
}
