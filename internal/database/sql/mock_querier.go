// Code generated by mockery. DO NOT EDIT.

package sql

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// BatchUpsertCwe provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertCwe(ctx context.Context, arg []BatchUpsertCweParams) *BatchUpsertCweBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertCwe")
	}

	var r0 *BatchUpsertCweBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []BatchUpsertCweParams) *BatchUpsertCweBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchUpsertCweBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertCwe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertCwe'
type MockQuerier_BatchUpsertCwe_Call struct {
	*mock.Call
}

// BatchUpsertCwe is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []BatchUpsertCweParams
func (_e *MockQuerier_Expecter) BatchUpsertCwe(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertCwe_Call {
	return &MockQuerier_BatchUpsertCwe_Call{Call: _e.mock.On("BatchUpsertCwe", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertCwe_Call) Run(run func(ctx context.Context, arg []BatchUpsertCweParams)) *MockQuerier_BatchUpsertCwe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]BatchUpsertCweParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertCwe_Call) Return(_a0 *BatchUpsertCweBatchResults) *MockQuerier_BatchUpsertCwe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertCwe_Call) RunAndReturn(run func(context.Context, []BatchUpsertCweParams) *BatchUpsertCweBatchResults) *MockQuerier_BatchUpsertCwe_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpsertVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertVulnerabilities(ctx context.Context, arg []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertVulnerabilities")
	}

	var r0 *BatchUpsertVulnerabilitiesBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchUpsertVulnerabilitiesBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertVulnerabilities'
type MockQuerier_BatchUpsertVulnerabilities_Call struct {
	*mock.Call
}

// BatchUpsertVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []BatchUpsertVulnerabilitiesParams
func (_e *MockQuerier_Expecter) BatchUpsertVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertVulnerabilities_Call {
	return &MockQuerier_BatchUpsertVulnerabilities_Call{Call: _e.mock.On("BatchUpsertVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) Run(run func(ctx context.Context, arg []BatchUpsertVulnerabilitiesParams)) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]BatchUpsertVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) Return(_a0 *BatchUpsertVulnerabilitiesBatchResults) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) RunAndReturn(run func(context.Context, []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateImage(ctx context.Context, arg CreateImageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateImageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImage'
type MockQuerier_CreateImage_Call struct {
	*mock.Call
}

// CreateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateImageParams
func (_e *MockQuerier_Expecter) CreateImage(ctx interface{}, arg interface{}) *MockQuerier_CreateImage_Call {
	return &MockQuerier_CreateImage_Call{Call: _e.mock.On("CreateImage", ctx, arg)}
}

func (_c *MockQuerier_CreateImage_Call) Run(run func(ctx context.Context, arg CreateImageParams)) *MockQuerier_CreateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateImageParams))
	})
	return _c
}

func (_c *MockQuerier_CreateImage_Call) Return(_a0 error) *MockQuerier_CreateImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateImage_Call) RunAndReturn(run func(context.Context, CreateImageParams) error) *MockQuerier_CreateImage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateVulnerabilitySummary(ctx context.Context, arg CreateVulnerabilitySummaryParams) (*VulnerabilitySummary, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateVulnerabilitySummary")
	}

	var r0 *VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateVulnerabilitySummaryParams) (*VulnerabilitySummary, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateVulnerabilitySummaryParams) *VulnerabilitySummary); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateVulnerabilitySummaryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVulnerabilitySummary'
type MockQuerier_CreateVulnerabilitySummary_Call struct {
	*mock.Call
}

// CreateVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) CreateVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_CreateVulnerabilitySummary_Call {
	return &MockQuerier_CreateVulnerabilitySummary_Call{Call: _e.mock.On("CreateVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg CreateVulnerabilitySummaryParams)) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) Return(_a0 *VulnerabilitySummary, _a1 error) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, CreateVulnerabilitySummaryParams) (*VulnerabilitySummary, error)) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateWorkload(ctx context.Context, arg CreateWorkloadParams) (*Workload, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkload")
	}

	var r0 *Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateWorkloadParams) (*Workload, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateWorkloadParams) *Workload); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkload'
type MockQuerier_CreateWorkload_Call struct {
	*mock.Call
}

// CreateWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateWorkloadParams
func (_e *MockQuerier_Expecter) CreateWorkload(ctx interface{}, arg interface{}) *MockQuerier_CreateWorkload_Call {
	return &MockQuerier_CreateWorkload_Call{Call: _e.mock.On("CreateWorkload", ctx, arg)}
}

func (_c *MockQuerier_CreateWorkload_Call) Run(run func(ctx context.Context, arg CreateWorkloadParams)) *MockQuerier_CreateWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_CreateWorkload_Call) Return(_a0 *Workload, _a1 error) *MockQuerier_CreateWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateWorkload_Call) RunAndReturn(run func(context.Context, CreateWorkloadParams) (*Workload, error)) *MockQuerier_CreateWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// GetCwe provides a mock function with given fields: ctx, cweID
func (_m *MockQuerier) GetCwe(ctx context.Context, cweID string) (*Cwe, error) {
	ret := _m.Called(ctx, cweID)

	if len(ret) == 0 {
		panic("no return value specified for GetCwe")
	}

	var r0 *Cwe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Cwe, error)); ok {
		return rf(ctx, cweID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Cwe); ok {
		r0 = rf(ctx, cweID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cwe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cweID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetCwe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCwe'
type MockQuerier_GetCwe_Call struct {
	*mock.Call
}

// GetCwe is a helper method to define mock.On call
//   - ctx context.Context
//   - cweID string
func (_e *MockQuerier_Expecter) GetCwe(ctx interface{}, cweID interface{}) *MockQuerier_GetCwe_Call {
	return &MockQuerier_GetCwe_Call{Call: _e.mock.On("GetCwe", ctx, cweID)}
}

func (_c *MockQuerier_GetCwe_Call) Run(run func(ctx context.Context, cweID string)) *MockQuerier_GetCwe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetCwe_Call) Return(_a0 *Cwe, _a1 error) *MockQuerier_GetCwe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetCwe_Call) RunAndReturn(run func(context.Context, string) (*Cwe, error)) *MockQuerier_GetCwe_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetImage(ctx context.Context, arg GetImageParams) (*Image, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetImageParams) (*Image, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetImageParams) *Image); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockQuerier_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetImageParams
func (_e *MockQuerier_Expecter) GetImage(ctx interface{}, arg interface{}) *MockQuerier_GetImage_Call {
	return &MockQuerier_GetImage_Call{Call: _e.mock.On("GetImage", ctx, arg)}
}

func (_c *MockQuerier_GetImage_Call) Run(run func(ctx context.Context, arg GetImageParams)) *MockQuerier_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetImageParams))
	})
	return _c
}

func (_c *MockQuerier_GetImage_Call) Return(_a0 *Image, _a1 error) *MockQuerier_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetImage_Call) RunAndReturn(run func(context.Context, GetImageParams) (*Image, error)) *MockQuerier_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerability provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerability(ctx context.Context, arg GetVulnerabilityParams) (*Vulnerability, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerability")
	}

	var r0 *Vulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilityParams) (*Vulnerability, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilityParams) *Vulnerability); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetVulnerabilityParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerability'
type MockQuerier_GetVulnerability_Call struct {
	*mock.Call
}

// GetVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetVulnerabilityParams
func (_e *MockQuerier_Expecter) GetVulnerability(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerability_Call {
	return &MockQuerier_GetVulnerability_Call{Call: _e.mock.On("GetVulnerability", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerability_Call) Run(run func(ctx context.Context, arg GetVulnerabilityParams)) *MockQuerier_GetVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetVulnerabilityParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerability_Call) Return(_a0 *Vulnerability, _a1 error) *MockQuerier_GetVulnerability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerability_Call) RunAndReturn(run func(context.Context, GetVulnerabilityParams) (*Vulnerability, error)) *MockQuerier_GetVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerabilitySummary(ctx context.Context, arg GetVulnerabilitySummaryParams) (*GetVulnerabilitySummaryRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummary")
	}

	var r0 *GetVulnerabilitySummaryRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryParams) (*GetVulnerabilitySummaryRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryParams) *GetVulnerabilitySummaryRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetVulnerabilitySummaryRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetVulnerabilitySummaryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummary'
type MockQuerier_GetVulnerabilitySummary_Call struct {
	*mock.Call
}

// GetVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) GetVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerabilitySummary_Call {
	return &MockQuerier_GetVulnerabilitySummary_Call{Call: _e.mock.On("GetVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg GetVulnerabilitySummaryParams)) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) Return(_a0 *GetVulnerabilitySummaryRow, _a1 error) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, GetVulnerabilitySummaryParams) (*GetVulnerabilitySummaryRow, error)) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllVulnerabilitySummaries provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListAllVulnerabilitySummaries(ctx context.Context, arg ListAllVulnerabilitySummariesParams) ([]*VulnerabilitySummary, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListAllVulnerabilitySummaries")
	}

	var r0 []*VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ListAllVulnerabilitySummariesParams) ([]*VulnerabilitySummary, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ListAllVulnerabilitySummariesParams) []*VulnerabilitySummary); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ListAllVulnerabilitySummariesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListAllVulnerabilitySummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllVulnerabilitySummaries'
type MockQuerier_ListAllVulnerabilitySummaries_Call struct {
	*mock.Call
}

// ListAllVulnerabilitySummaries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ListAllVulnerabilitySummariesParams
func (_e *MockQuerier_Expecter) ListAllVulnerabilitySummaries(ctx interface{}, arg interface{}) *MockQuerier_ListAllVulnerabilitySummaries_Call {
	return &MockQuerier_ListAllVulnerabilitySummaries_Call{Call: _e.mock.On("ListAllVulnerabilitySummaries", ctx, arg)}
}

func (_c *MockQuerier_ListAllVulnerabilitySummaries_Call) Run(run func(ctx context.Context, arg ListAllVulnerabilitySummariesParams)) *MockQuerier_ListAllVulnerabilitySummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ListAllVulnerabilitySummariesParams))
	})
	return _c
}

func (_c *MockQuerier_ListAllVulnerabilitySummaries_Call) Return(_a0 []*VulnerabilitySummary, _a1 error) *MockQuerier_ListAllVulnerabilitySummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListAllVulnerabilitySummaries_Call) RunAndReturn(run func(context.Context, ListAllVulnerabilitySummariesParams) ([]*VulnerabilitySummary, error)) *MockQuerier_ListAllVulnerabilitySummaries_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitySummaries provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListVulnerabilitySummaries(ctx context.Context, arg ListVulnerabilitySummariesParams) ([]*ListVulnerabilitySummariesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitySummaries")
	}

	var r0 []*ListVulnerabilitySummariesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitySummariesParams) ([]*ListVulnerabilitySummariesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitySummariesParams) []*ListVulnerabilitySummariesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ListVulnerabilitySummariesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ListVulnerabilitySummariesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListVulnerabilitySummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitySummaries'
type MockQuerier_ListVulnerabilitySummaries_Call struct {
	*mock.Call
}

// ListVulnerabilitySummaries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ListVulnerabilitySummariesParams
func (_e *MockQuerier_Expecter) ListVulnerabilitySummaries(ctx interface{}, arg interface{}) *MockQuerier_ListVulnerabilitySummaries_Call {
	return &MockQuerier_ListVulnerabilitySummaries_Call{Call: _e.mock.On("ListVulnerabilitySummaries", ctx, arg)}
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) Run(run func(ctx context.Context, arg ListVulnerabilitySummariesParams)) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ListVulnerabilitySummariesParams))
	})
	return _c
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) Return(_a0 []*ListVulnerabilitySummariesRow, _a1 error) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) RunAndReturn(run func(context.Context, ListVulnerabilitySummariesParams) ([]*ListVulnerabilitySummariesRow, error)) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Return(run)
	return _c
}

// ResetDatabase provides a mock function with given fields: ctx
func (_m *MockQuerier) ResetDatabase(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ResetDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ResetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetDatabase'
type MockQuerier_ResetDatabase_Call struct {
	*mock.Call
}

// ResetDatabase is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ResetDatabase(ctx interface{}) *MockQuerier_ResetDatabase_Call {
	return &MockQuerier_ResetDatabase_Call{Call: _e.mock.On("ResetDatabase", ctx)}
}

func (_c *MockQuerier_ResetDatabase_Call) Run(run func(ctx context.Context)) *MockQuerier_ResetDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_ResetDatabase_Call) Return(_a0 error) *MockQuerier_ResetDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ResetDatabase_Call) RunAndReturn(run func(context.Context) error) *MockQuerier_ResetDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateVulnerabilitySummary(ctx context.Context, arg UpdateVulnerabilitySummaryParams) (*VulnerabilitySummary, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVulnerabilitySummary")
	}

	var r0 *VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateVulnerabilitySummaryParams) (*VulnerabilitySummary, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, UpdateVulnerabilitySummaryParams) *VulnerabilitySummary); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, UpdateVulnerabilitySummaryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVulnerabilitySummary'
type MockQuerier_UpdateVulnerabilitySummary_Call struct {
	*mock.Call
}

// UpdateVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) UpdateVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_UpdateVulnerabilitySummary_Call {
	return &MockQuerier_UpdateVulnerabilitySummary_Call{Call: _e.mock.On("UpdateVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_UpdateVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg UpdateVulnerabilitySummaryParams)) *MockQuerier_UpdateVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateVulnerabilitySummary_Call) Return(_a0 *VulnerabilitySummary, _a1 error) *MockQuerier_UpdateVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, UpdateVulnerabilitySummaryParams) (*VulnerabilitySummary, error)) *MockQuerier_UpdateVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateWorkload(ctx context.Context, arg UpdateWorkloadParams) (*Workload, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkload")
	}

	var r0 *Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateWorkloadParams) (*Workload, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, UpdateWorkloadParams) *Workload); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, UpdateWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkload'
type MockQuerier_UpdateWorkload_Call struct {
	*mock.Call
}

// UpdateWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateWorkloadParams
func (_e *MockQuerier_Expecter) UpdateWorkload(ctx interface{}, arg interface{}) *MockQuerier_UpdateWorkload_Call {
	return &MockQuerier_UpdateWorkload_Call{Call: _e.mock.On("UpdateWorkload", ctx, arg)}
}

func (_c *MockQuerier_UpdateWorkload_Call) Run(run func(ctx context.Context, arg UpdateWorkloadParams)) *MockQuerier_UpdateWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateWorkload_Call) Return(_a0 *Workload, _a1 error) *MockQuerier_UpdateWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateWorkload_Call) RunAndReturn(run func(context.Context, UpdateWorkloadParams) (*Workload, error)) *MockQuerier_UpdateWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpsertVulnerabilitySummary(ctx context.Context, arg UpsertVulnerabilitySummaryParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertVulnerabilitySummary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpsertVulnerabilitySummaryParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpsertVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertVulnerabilitySummary'
type MockQuerier_UpsertVulnerabilitySummary_Call struct {
	*mock.Call
}

// UpsertVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpsertVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) UpsertVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_UpsertVulnerabilitySummary_Call {
	return &MockQuerier_UpsertVulnerabilitySummary_Call{Call: _e.mock.On("UpsertVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_UpsertVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg UpsertVulnerabilitySummaryParams)) *MockQuerier_UpsertVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpsertVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_UpsertVulnerabilitySummary_Call) Return(_a0 error) *MockQuerier_UpsertVulnerabilitySummary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpsertVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, UpsertVulnerabilitySummaryParams) error) *MockQuerier_UpsertVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpsertWorkload(ctx context.Context, arg UpsertWorkloadParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertWorkload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpsertWorkloadParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpsertWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkload'
type MockQuerier_UpsertWorkload_Call struct {
	*mock.Call
}

// UpsertWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpsertWorkloadParams
func (_e *MockQuerier_Expecter) UpsertWorkload(ctx interface{}, arg interface{}) *MockQuerier_UpsertWorkload_Call {
	return &MockQuerier_UpsertWorkload_Call{Call: _e.mock.On("UpsertWorkload", ctx, arg)}
}

func (_c *MockQuerier_UpsertWorkload_Call) Run(run func(ctx context.Context, arg UpsertWorkloadParams)) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpsertWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_UpsertWorkload_Call) Return(_a0 error) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpsertWorkload_Call) RunAndReturn(run func(context.Context, UpsertWorkloadParams) error) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
