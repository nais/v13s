// Code generated by mockery. DO NOT EDIT.

package sql

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// AddWorkloadEvent provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) AddWorkloadEvent(ctx context.Context, arg AddWorkloadEventParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddWorkloadEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AddWorkloadEventParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_AddWorkloadEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorkloadEvent'
type MockQuerier_AddWorkloadEvent_Call struct {
	*mock.Call
}

// AddWorkloadEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - arg AddWorkloadEventParams
func (_e *MockQuerier_Expecter) AddWorkloadEvent(ctx interface{}, arg interface{}) *MockQuerier_AddWorkloadEvent_Call {
	return &MockQuerier_AddWorkloadEvent_Call{Call: _e.mock.On("AddWorkloadEvent", ctx, arg)}
}

func (_c *MockQuerier_AddWorkloadEvent_Call) Run(run func(ctx context.Context, arg AddWorkloadEventParams)) *MockQuerier_AddWorkloadEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AddWorkloadEventParams))
	})
	return _c
}

func (_c *MockQuerier_AddWorkloadEvent_Call) Return(_a0 error) *MockQuerier_AddWorkloadEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_AddWorkloadEvent_Call) RunAndReturn(run func(context.Context, AddWorkloadEventParams) error) *MockQuerier_AddWorkloadEvent_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpdateImageState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpdateImageState(ctx context.Context, arg []BatchUpdateImageStateParams) *BatchUpdateImageStateBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateImageState")
	}

	var r0 *BatchUpdateImageStateBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []BatchUpdateImageStateParams) *BatchUpdateImageStateBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchUpdateImageStateBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpdateImageState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpdateImageState'
type MockQuerier_BatchUpdateImageState_Call struct {
	*mock.Call
}

// BatchUpdateImageState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []BatchUpdateImageStateParams
func (_e *MockQuerier_Expecter) BatchUpdateImageState(ctx interface{}, arg interface{}) *MockQuerier_BatchUpdateImageState_Call {
	return &MockQuerier_BatchUpdateImageState_Call{Call: _e.mock.On("BatchUpdateImageState", ctx, arg)}
}

func (_c *MockQuerier_BatchUpdateImageState_Call) Run(run func(ctx context.Context, arg []BatchUpdateImageStateParams)) *MockQuerier_BatchUpdateImageState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]BatchUpdateImageStateParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpdateImageState_Call) Return(_a0 *BatchUpdateImageStateBatchResults) *MockQuerier_BatchUpdateImageState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpdateImageState_Call) RunAndReturn(run func(context.Context, []BatchUpdateImageStateParams) *BatchUpdateImageStateBatchResults) *MockQuerier_BatchUpdateImageState_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpsertCve provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertCve(ctx context.Context, arg []BatchUpsertCveParams) *BatchUpsertCveBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertCve")
	}

	var r0 *BatchUpsertCveBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []BatchUpsertCveParams) *BatchUpsertCveBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchUpsertCveBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertCve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertCve'
type MockQuerier_BatchUpsertCve_Call struct {
	*mock.Call
}

// BatchUpsertCve is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []BatchUpsertCveParams
func (_e *MockQuerier_Expecter) BatchUpsertCve(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertCve_Call {
	return &MockQuerier_BatchUpsertCve_Call{Call: _e.mock.On("BatchUpsertCve", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertCve_Call) Run(run func(ctx context.Context, arg []BatchUpsertCveParams)) *MockQuerier_BatchUpsertCve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]BatchUpsertCveParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertCve_Call) Return(_a0 *BatchUpsertCveBatchResults) *MockQuerier_BatchUpsertCve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertCve_Call) RunAndReturn(run func(context.Context, []BatchUpsertCveParams) *BatchUpsertCveBatchResults) *MockQuerier_BatchUpsertCve_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpsertVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertVulnerabilities(ctx context.Context, arg []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertVulnerabilities")
	}

	var r0 *BatchUpsertVulnerabilitiesBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchUpsertVulnerabilitiesBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertVulnerabilities'
type MockQuerier_BatchUpsertVulnerabilities_Call struct {
	*mock.Call
}

// BatchUpsertVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []BatchUpsertVulnerabilitiesParams
func (_e *MockQuerier_Expecter) BatchUpsertVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertVulnerabilities_Call {
	return &MockQuerier_BatchUpsertVulnerabilities_Call{Call: _e.mock.On("BatchUpsertVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) Run(run func(ctx context.Context, arg []BatchUpsertVulnerabilitiesParams)) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]BatchUpsertVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) Return(_a0 *BatchUpsertVulnerabilitiesBatchResults) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilities_Call) RunAndReturn(run func(context.Context, []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults) *MockQuerier_BatchUpsertVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// BatchUpsertVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) BatchUpsertVulnerabilitySummary(ctx context.Context, arg []BatchUpsertVulnerabilitySummaryParams) *BatchUpsertVulnerabilitySummaryBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertVulnerabilitySummary")
	}

	var r0 *BatchUpsertVulnerabilitySummaryBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []BatchUpsertVulnerabilitySummaryParams) *BatchUpsertVulnerabilitySummaryBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchUpsertVulnerabilitySummaryBatchResults)
		}
	}

	return r0
}

// MockQuerier_BatchUpsertVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpsertVulnerabilitySummary'
type MockQuerier_BatchUpsertVulnerabilitySummary_Call struct {
	*mock.Call
}

// BatchUpsertVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []BatchUpsertVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) BatchUpsertVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	return &MockQuerier_BatchUpsertVulnerabilitySummary_Call{Call: _e.mock.On("BatchUpsertVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_BatchUpsertVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg []BatchUpsertVulnerabilitySummaryParams)) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]BatchUpsertVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilitySummary_Call) Return(_a0 *BatchUpsertVulnerabilitySummaryBatchResults) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_BatchUpsertVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, []BatchUpsertVulnerabilitySummaryParams) *BatchUpsertVulnerabilitySummaryBatchResults) *MockQuerier_BatchUpsertVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// CountSuppressedVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CountSuppressedVulnerabilities(ctx context.Context, arg CountSuppressedVulnerabilitiesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountSuppressedVulnerabilities")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CountSuppressedVulnerabilitiesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CountSuppressedVulnerabilitiesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CountSuppressedVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CountSuppressedVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSuppressedVulnerabilities'
type MockQuerier_CountSuppressedVulnerabilities_Call struct {
	*mock.Call
}

// CountSuppressedVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CountSuppressedVulnerabilitiesParams
func (_e *MockQuerier_Expecter) CountSuppressedVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_CountSuppressedVulnerabilities_Call {
	return &MockQuerier_CountSuppressedVulnerabilities_Call{Call: _e.mock.On("CountSuppressedVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_CountSuppressedVulnerabilities_Call) Run(run func(ctx context.Context, arg CountSuppressedVulnerabilitiesParams)) *MockQuerier_CountSuppressedVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CountSuppressedVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_CountSuppressedVulnerabilities_Call) Return(_a0 int64, _a1 error) *MockQuerier_CountSuppressedVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CountSuppressedVulnerabilities_Call) RunAndReturn(run func(context.Context, CountSuppressedVulnerabilitiesParams) (int64, error)) *MockQuerier_CountSuppressedVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// CountVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CountVulnerabilities(ctx context.Context, arg CountVulnerabilitiesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountVulnerabilities")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CountVulnerabilitiesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CountVulnerabilitiesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CountVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CountVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountVulnerabilities'
type MockQuerier_CountVulnerabilities_Call struct {
	*mock.Call
}

// CountVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CountVulnerabilitiesParams
func (_e *MockQuerier_Expecter) CountVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_CountVulnerabilities_Call {
	return &MockQuerier_CountVulnerabilities_Call{Call: _e.mock.On("CountVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_CountVulnerabilities_Call) Run(run func(ctx context.Context, arg CountVulnerabilitiesParams)) *MockQuerier_CountVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CountVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_CountVulnerabilities_Call) Return(_a0 int64, _a1 error) *MockQuerier_CountVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CountVulnerabilities_Call) RunAndReturn(run func(context.Context, CountVulnerabilitiesParams) (int64, error)) *MockQuerier_CountVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// CountVulnerabilitiesForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CountVulnerabilitiesForImage(ctx context.Context, arg CountVulnerabilitiesForImageParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CountVulnerabilitiesForImage")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CountVulnerabilitiesForImageParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CountVulnerabilitiesForImageParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CountVulnerabilitiesForImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CountVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountVulnerabilitiesForImage'
type MockQuerier_CountVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// CountVulnerabilitiesForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CountVulnerabilitiesForImageParams
func (_e *MockQuerier_Expecter) CountVulnerabilitiesForImage(ctx interface{}, arg interface{}) *MockQuerier_CountVulnerabilitiesForImage_Call {
	return &MockQuerier_CountVulnerabilitiesForImage_Call{Call: _e.mock.On("CountVulnerabilitiesForImage", ctx, arg)}
}

func (_c *MockQuerier_CountVulnerabilitiesForImage_Call) Run(run func(ctx context.Context, arg CountVulnerabilitiesForImageParams)) *MockQuerier_CountVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CountVulnerabilitiesForImageParams))
	})
	return _c
}

func (_c *MockQuerier_CountVulnerabilitiesForImage_Call) Return(_a0 int64, _a1 error) *MockQuerier_CountVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CountVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, CountVulnerabilitiesForImageParams) (int64, error)) *MockQuerier_CountVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateImage(ctx context.Context, arg CreateImageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateImageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImage'
type MockQuerier_CreateImage_Call struct {
	*mock.Call
}

// CreateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateImageParams
func (_e *MockQuerier_Expecter) CreateImage(ctx interface{}, arg interface{}) *MockQuerier_CreateImage_Call {
	return &MockQuerier_CreateImage_Call{Call: _e.mock.On("CreateImage", ctx, arg)}
}

func (_c *MockQuerier_CreateImage_Call) Run(run func(ctx context.Context, arg CreateImageParams)) *MockQuerier_CreateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateImageParams))
	})
	return _c
}

func (_c *MockQuerier_CreateImage_Call) Return(_a0 error) *MockQuerier_CreateImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateImage_Call) RunAndReturn(run func(context.Context, CreateImageParams) error) *MockQuerier_CreateImage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSourceRef provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateSourceRef(ctx context.Context, arg CreateSourceRefParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSourceRef")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateSourceRefParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateSourceRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSourceRef'
type MockQuerier_CreateSourceRef_Call struct {
	*mock.Call
}

// CreateSourceRef is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateSourceRefParams
func (_e *MockQuerier_Expecter) CreateSourceRef(ctx interface{}, arg interface{}) *MockQuerier_CreateSourceRef_Call {
	return &MockQuerier_CreateSourceRef_Call{Call: _e.mock.On("CreateSourceRef", ctx, arg)}
}

func (_c *MockQuerier_CreateSourceRef_Call) Run(run func(ctx context.Context, arg CreateSourceRefParams)) *MockQuerier_CreateSourceRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateSourceRefParams))
	})
	return _c
}

func (_c *MockQuerier_CreateSourceRef_Call) Return(_a0 error) *MockQuerier_CreateSourceRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateSourceRef_Call) RunAndReturn(run func(context.Context, CreateSourceRefParams) error) *MockQuerier_CreateSourceRef_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateVulnerabilitySummary(ctx context.Context, arg CreateVulnerabilitySummaryParams) (*VulnerabilitySummary, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateVulnerabilitySummary")
	}

	var r0 *VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateVulnerabilitySummaryParams) (*VulnerabilitySummary, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateVulnerabilitySummaryParams) *VulnerabilitySummary); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateVulnerabilitySummaryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVulnerabilitySummary'
type MockQuerier_CreateVulnerabilitySummary_Call struct {
	*mock.Call
}

// CreateVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) CreateVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_CreateVulnerabilitySummary_Call {
	return &MockQuerier_CreateVulnerabilitySummary_Call{Call: _e.mock.On("CreateVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg CreateVulnerabilitySummaryParams)) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) Return(_a0 *VulnerabilitySummary, _a1 error) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, CreateVulnerabilitySummaryParams) (*VulnerabilitySummary, error)) *MockQuerier_CreateVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateWorkload(ctx context.Context, arg CreateWorkloadParams) (*Workload, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkload")
	}

	var r0 *Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateWorkloadParams) (*Workload, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateWorkloadParams) *Workload); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkload'
type MockQuerier_CreateWorkload_Call struct {
	*mock.Call
}

// CreateWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateWorkloadParams
func (_e *MockQuerier_Expecter) CreateWorkload(ctx interface{}, arg interface{}) *MockQuerier_CreateWorkload_Call {
	return &MockQuerier_CreateWorkload_Call{Call: _e.mock.On("CreateWorkload", ctx, arg)}
}

func (_c *MockQuerier_CreateWorkload_Call) Run(run func(ctx context.Context, arg CreateWorkloadParams)) *MockQuerier_CreateWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_CreateWorkload_Call) Return(_a0 *Workload, _a1 error) *MockQuerier_CreateWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateWorkload_Call) RunAndReturn(run func(context.Context, CreateWorkloadParams) (*Workload, error)) *MockQuerier_CreateWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSourceRef provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) DeleteSourceRef(ctx context.Context, arg DeleteSourceRefParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSourceRef")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DeleteSourceRefParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteSourceRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSourceRef'
type MockQuerier_DeleteSourceRef_Call struct {
	*mock.Call
}

// DeleteSourceRef is a helper method to define mock.On call
//   - ctx context.Context
//   - arg DeleteSourceRefParams
func (_e *MockQuerier_Expecter) DeleteSourceRef(ctx interface{}, arg interface{}) *MockQuerier_DeleteSourceRef_Call {
	return &MockQuerier_DeleteSourceRef_Call{Call: _e.mock.On("DeleteSourceRef", ctx, arg)}
}

func (_c *MockQuerier_DeleteSourceRef_Call) Run(run func(ctx context.Context, arg DeleteSourceRefParams)) *MockQuerier_DeleteSourceRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DeleteSourceRefParams))
	})
	return _c
}

func (_c *MockQuerier_DeleteSourceRef_Call) Return(_a0 error) *MockQuerier_DeleteSourceRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteSourceRef_Call) RunAndReturn(run func(context.Context, DeleteSourceRefParams) error) *MockQuerier_DeleteSourceRef_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) DeleteWorkload(ctx context.Context, arg DeleteWorkloadParams) (pgtype.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkload")
	}

	var r0 pgtype.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DeleteWorkloadParams) (pgtype.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DeleteWorkloadParams) pgtype.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.UUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DeleteWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DeleteWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkload'
type MockQuerier_DeleteWorkload_Call struct {
	*mock.Call
}

// DeleteWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg DeleteWorkloadParams
func (_e *MockQuerier_Expecter) DeleteWorkload(ctx interface{}, arg interface{}) *MockQuerier_DeleteWorkload_Call {
	return &MockQuerier_DeleteWorkload_Call{Call: _e.mock.On("DeleteWorkload", ctx, arg)}
}

func (_c *MockQuerier_DeleteWorkload_Call) Run(run func(ctx context.Context, arg DeleteWorkloadParams)) *MockQuerier_DeleteWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DeleteWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_DeleteWorkload_Call) Return(_a0 pgtype.UUID, _a1 error) *MockQuerier_DeleteWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DeleteWorkload_Call) RunAndReturn(run func(context.Context, DeleteWorkloadParams) (pgtype.UUID, error)) *MockQuerier_DeleteWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateVulnerabilitySummaryForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GenerateVulnerabilitySummaryForImage(ctx context.Context, arg GenerateVulnerabilitySummaryForImageParams) (*GenerateVulnerabilitySummaryForImageRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVulnerabilitySummaryForImage")
	}

	var r0 *GenerateVulnerabilitySummaryForImageRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GenerateVulnerabilitySummaryForImageParams) (*GenerateVulnerabilitySummaryForImageRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GenerateVulnerabilitySummaryForImageParams) *GenerateVulnerabilitySummaryForImageRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GenerateVulnerabilitySummaryForImageRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GenerateVulnerabilitySummaryForImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GenerateVulnerabilitySummaryForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateVulnerabilitySummaryForImage'
type MockQuerier_GenerateVulnerabilitySummaryForImage_Call struct {
	*mock.Call
}

// GenerateVulnerabilitySummaryForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GenerateVulnerabilitySummaryForImageParams
func (_e *MockQuerier_Expecter) GenerateVulnerabilitySummaryForImage(ctx interface{}, arg interface{}) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	return &MockQuerier_GenerateVulnerabilitySummaryForImage_Call{Call: _e.mock.On("GenerateVulnerabilitySummaryForImage", ctx, arg)}
}

func (_c *MockQuerier_GenerateVulnerabilitySummaryForImage_Call) Run(run func(ctx context.Context, arg GenerateVulnerabilitySummaryForImageParams)) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GenerateVulnerabilitySummaryForImageParams))
	})
	return _c
}

func (_c *MockQuerier_GenerateVulnerabilitySummaryForImage_Call) Return(_a0 *GenerateVulnerabilitySummaryForImageRow, _a1 error) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GenerateVulnerabilitySummaryForImage_Call) RunAndReturn(run func(context.Context, GenerateVulnerabilitySummaryForImageParams) (*GenerateVulnerabilitySummaryForImageRow, error)) *MockQuerier_GenerateVulnerabilitySummaryForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetCve provides a mock function with given fields: ctx, cveID
func (_m *MockQuerier) GetCve(ctx context.Context, cveID string) (*Cve, error) {
	ret := _m.Called(ctx, cveID)

	if len(ret) == 0 {
		panic("no return value specified for GetCve")
	}

	var r0 *Cve
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Cve, error)); ok {
		return rf(ctx, cveID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Cve); ok {
		r0 = rf(ctx, cveID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cve)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cveID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetCve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCve'
type MockQuerier_GetCve_Call struct {
	*mock.Call
}

// GetCve is a helper method to define mock.On call
//   - ctx context.Context
//   - cveID string
func (_e *MockQuerier_Expecter) GetCve(ctx interface{}, cveID interface{}) *MockQuerier_GetCve_Call {
	return &MockQuerier_GetCve_Call{Call: _e.mock.On("GetCve", ctx, cveID)}
}

func (_c *MockQuerier_GetCve_Call) Run(run func(ctx context.Context, cveID string)) *MockQuerier_GetCve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetCve_Call) Return(_a0 *Cve, _a1 error) *MockQuerier_GetCve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetCve_Call) RunAndReturn(run func(context.Context, string) (*Cve, error)) *MockQuerier_GetCve_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetImage(ctx context.Context, arg GetImageParams) (*Image, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetImageParams) (*Image, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetImageParams) *Image); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockQuerier_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetImageParams
func (_e *MockQuerier_Expecter) GetImage(ctx interface{}, arg interface{}) *MockQuerier_GetImage_Call {
	return &MockQuerier_GetImage_Call{Call: _e.mock.On("GetImage", ctx, arg)}
}

func (_c *MockQuerier_GetImage_Call) Run(run func(ctx context.Context, arg GetImageParams)) *MockQuerier_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetImageParams))
	})
	return _c
}

func (_c *MockQuerier_GetImage_Call) Return(_a0 *Image, _a1 error) *MockQuerier_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetImage_Call) RunAndReturn(run func(context.Context, GetImageParams) (*Image, error)) *MockQuerier_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetImagesScheduledForSync provides a mock function with given fields: ctx
func (_m *MockQuerier) GetImagesScheduledForSync(ctx context.Context) ([]*Image, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetImagesScheduledForSync")
	}

	var r0 []*Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Image, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Image); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetImagesScheduledForSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImagesScheduledForSync'
type MockQuerier_GetImagesScheduledForSync_Call struct {
	*mock.Call
}

// GetImagesScheduledForSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetImagesScheduledForSync(ctx interface{}) *MockQuerier_GetImagesScheduledForSync_Call {
	return &MockQuerier_GetImagesScheduledForSync_Call{Call: _e.mock.On("GetImagesScheduledForSync", ctx)}
}

func (_c *MockQuerier_GetImagesScheduledForSync_Call) Run(run func(ctx context.Context)) *MockQuerier_GetImagesScheduledForSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetImagesScheduledForSync_Call) Return(_a0 []*Image, _a1 error) *MockQuerier_GetImagesScheduledForSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetImagesScheduledForSync_Call) RunAndReturn(run func(context.Context) ([]*Image, error)) *MockQuerier_GetImagesScheduledForSync_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceRef provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetSourceRef(ctx context.Context, arg GetSourceRefParams) (*SourceRef, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceRef")
	}

	var r0 *SourceRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetSourceRefParams) (*SourceRef, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetSourceRefParams) *SourceRef); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SourceRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetSourceRefParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetSourceRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceRef'
type MockQuerier_GetSourceRef_Call struct {
	*mock.Call
}

// GetSourceRef is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetSourceRefParams
func (_e *MockQuerier_Expecter) GetSourceRef(ctx interface{}, arg interface{}) *MockQuerier_GetSourceRef_Call {
	return &MockQuerier_GetSourceRef_Call{Call: _e.mock.On("GetSourceRef", ctx, arg)}
}

func (_c *MockQuerier_GetSourceRef_Call) Run(run func(ctx context.Context, arg GetSourceRefParams)) *MockQuerier_GetSourceRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetSourceRefParams))
	})
	return _c
}

func (_c *MockQuerier_GetSourceRef_Call) Return(_a0 *SourceRef, _a1 error) *MockQuerier_GetSourceRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetSourceRef_Call) RunAndReturn(run func(context.Context, GetSourceRefParams) (*SourceRef, error)) *MockQuerier_GetSourceRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerability provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerability(ctx context.Context, arg GetVulnerabilityParams) (*Vulnerability, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerability")
	}

	var r0 *Vulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilityParams) (*Vulnerability, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilityParams) *Vulnerability); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetVulnerabilityParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerability'
type MockQuerier_GetVulnerability_Call struct {
	*mock.Call
}

// GetVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetVulnerabilityParams
func (_e *MockQuerier_Expecter) GetVulnerability(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerability_Call {
	return &MockQuerier_GetVulnerability_Call{Call: _e.mock.On("GetVulnerability", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerability_Call) Run(run func(ctx context.Context, arg GetVulnerabilityParams)) *MockQuerier_GetVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetVulnerabilityParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerability_Call) Return(_a0 *Vulnerability, _a1 error) *MockQuerier_GetVulnerability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerability_Call) RunAndReturn(run func(context.Context, GetVulnerabilityParams) (*Vulnerability, error)) *MockQuerier_GetVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetVulnerabilityById(ctx context.Context, id pgtype.UUID) (*GetVulnerabilityByIdRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityById")
	}

	var r0 *GetVulnerabilityByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID) (*GetVulnerabilityByIdRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.UUID) *GetVulnerabilityByIdRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetVulnerabilityByIdRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilityById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityById'
type MockQuerier_GetVulnerabilityById_Call struct {
	*mock.Call
}

// GetVulnerabilityById is a helper method to define mock.On call
//   - ctx context.Context
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetVulnerabilityById(ctx interface{}, id interface{}) *MockQuerier_GetVulnerabilityById_Call {
	return &MockQuerier_GetVulnerabilityById_Call{Call: _e.mock.On("GetVulnerabilityById", ctx, id)}
}

func (_c *MockQuerier_GetVulnerabilityById_Call) Run(run func(ctx context.Context, id pgtype.UUID)) *MockQuerier_GetVulnerabilityById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilityById_Call) Return(_a0 *GetVulnerabilityByIdRow, _a1 error) *MockQuerier_GetVulnerabilityById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilityById_Call) RunAndReturn(run func(context.Context, pgtype.UUID) (*GetVulnerabilityByIdRow, error)) *MockQuerier_GetVulnerabilityById_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummary provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerabilitySummary(ctx context.Context, arg GetVulnerabilitySummaryParams) (*GetVulnerabilitySummaryRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummary")
	}

	var r0 *GetVulnerabilitySummaryRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryParams) (*GetVulnerabilitySummaryRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryParams) *GetVulnerabilitySummaryRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetVulnerabilitySummaryRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetVulnerabilitySummaryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummary'
type MockQuerier_GetVulnerabilitySummary_Call struct {
	*mock.Call
}

// GetVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetVulnerabilitySummaryParams
func (_e *MockQuerier_Expecter) GetVulnerabilitySummary(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerabilitySummary_Call {
	return &MockQuerier_GetVulnerabilitySummary_Call{Call: _e.mock.On("GetVulnerabilitySummary", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) Run(run func(ctx context.Context, arg GetVulnerabilitySummaryParams)) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetVulnerabilitySummaryParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) Return(_a0 *GetVulnerabilitySummaryRow, _a1 error) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, GetVulnerabilitySummaryParams) (*GetVulnerabilitySummaryRow, error)) *MockQuerier_GetVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummaryForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerabilitySummaryForImage(ctx context.Context, arg GetVulnerabilitySummaryForImageParams) (*VulnerabilitySummary, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummaryForImage")
	}

	var r0 *VulnerabilitySummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryForImageParams) (*VulnerabilitySummary, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryForImageParams) *VulnerabilitySummary); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VulnerabilitySummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetVulnerabilitySummaryForImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilitySummaryForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummaryForImage'
type MockQuerier_GetVulnerabilitySummaryForImage_Call struct {
	*mock.Call
}

// GetVulnerabilitySummaryForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetVulnerabilitySummaryForImageParams
func (_e *MockQuerier_Expecter) GetVulnerabilitySummaryForImage(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	return &MockQuerier_GetVulnerabilitySummaryForImage_Call{Call: _e.mock.On("GetVulnerabilitySummaryForImage", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerabilitySummaryForImage_Call) Run(run func(ctx context.Context, arg GetVulnerabilitySummaryForImageParams)) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetVulnerabilitySummaryForImageParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryForImage_Call) Return(_a0 *VulnerabilitySummary, _a1 error) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryForImage_Call) RunAndReturn(run func(context.Context, GetVulnerabilitySummaryForImageParams) (*VulnerabilitySummary, error)) *MockQuerier_GetVulnerabilitySummaryForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitySummaryTimeSeries provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetVulnerabilitySummaryTimeSeries(ctx context.Context, arg GetVulnerabilitySummaryTimeSeriesParams) ([]*GetVulnerabilitySummaryTimeSeriesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummaryTimeSeries")
	}

	var r0 []*GetVulnerabilitySummaryTimeSeriesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryTimeSeriesParams) ([]*GetVulnerabilitySummaryTimeSeriesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetVulnerabilitySummaryTimeSeriesParams) []*GetVulnerabilitySummaryTimeSeriesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetVulnerabilitySummaryTimeSeriesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetVulnerabilitySummaryTimeSeriesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetVulnerabilitySummaryTimeSeries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummaryTimeSeries'
type MockQuerier_GetVulnerabilitySummaryTimeSeries_Call struct {
	*mock.Call
}

// GetVulnerabilitySummaryTimeSeries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetVulnerabilitySummaryTimeSeriesParams
func (_e *MockQuerier_Expecter) GetVulnerabilitySummaryTimeSeries(ctx interface{}, arg interface{}) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	return &MockQuerier_GetVulnerabilitySummaryTimeSeries_Call{Call: _e.mock.On("GetVulnerabilitySummaryTimeSeries", ctx, arg)}
}

func (_c *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call) Run(run func(ctx context.Context, arg GetVulnerabilitySummaryTimeSeriesParams)) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetVulnerabilitySummaryTimeSeriesParams))
	})
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call) Return(_a0 []*GetVulnerabilitySummaryTimeSeriesRow, _a1 error) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call) RunAndReturn(run func(context.Context, GetVulnerabilitySummaryTimeSeriesParams) ([]*GetVulnerabilitySummaryTimeSeriesRow, error)) *MockQuerier_GetVulnerabilitySummaryTimeSeries_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetWorkload(ctx context.Context, arg GetWorkloadParams) (*Workload, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkload")
	}

	var r0 *Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetWorkloadParams) (*Workload, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetWorkloadParams) *Workload); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkload'
type MockQuerier_GetWorkload_Call struct {
	*mock.Call
}

// GetWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetWorkloadParams
func (_e *MockQuerier_Expecter) GetWorkload(ctx interface{}, arg interface{}) *MockQuerier_GetWorkload_Call {
	return &MockQuerier_GetWorkload_Call{Call: _e.mock.On("GetWorkload", ctx, arg)}
}

func (_c *MockQuerier_GetWorkload_Call) Run(run func(ctx context.Context, arg GetWorkloadParams)) *MockQuerier_GetWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_GetWorkload_Call) Return(_a0 *Workload, _a1 error) *MockQuerier_GetWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetWorkload_Call) RunAndReturn(run func(context.Context, GetWorkloadParams) (*Workload, error)) *MockQuerier_GetWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) InitializeWorkload(ctx context.Context, arg InitializeWorkloadParams) (pgtype.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for InitializeWorkload")
	}

	var r0 pgtype.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, InitializeWorkloadParams) (pgtype.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, InitializeWorkloadParams) pgtype.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.UUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, InitializeWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_InitializeWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeWorkload'
type MockQuerier_InitializeWorkload_Call struct {
	*mock.Call
}

// InitializeWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg InitializeWorkloadParams
func (_e *MockQuerier_Expecter) InitializeWorkload(ctx interface{}, arg interface{}) *MockQuerier_InitializeWorkload_Call {
	return &MockQuerier_InitializeWorkload_Call{Call: _e.mock.On("InitializeWorkload", ctx, arg)}
}

func (_c *MockQuerier_InitializeWorkload_Call) Run(run func(ctx context.Context, arg InitializeWorkloadParams)) *MockQuerier_InitializeWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InitializeWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_InitializeWorkload_Call) Return(_a0 pgtype.UUID, _a1 error) *MockQuerier_InitializeWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_InitializeWorkload_Call) RunAndReturn(run func(context.Context, InitializeWorkloadParams) (pgtype.UUID, error)) *MockQuerier_InitializeWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuppressedVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListSuppressedVulnerabilities(ctx context.Context, arg ListSuppressedVulnerabilitiesParams) ([]*ListSuppressedVulnerabilitiesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListSuppressedVulnerabilities")
	}

	var r0 []*ListSuppressedVulnerabilitiesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ListSuppressedVulnerabilitiesParams) ([]*ListSuppressedVulnerabilitiesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ListSuppressedVulnerabilitiesParams) []*ListSuppressedVulnerabilitiesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ListSuppressedVulnerabilitiesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ListSuppressedVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListSuppressedVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuppressedVulnerabilities'
type MockQuerier_ListSuppressedVulnerabilities_Call struct {
	*mock.Call
}

// ListSuppressedVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ListSuppressedVulnerabilitiesParams
func (_e *MockQuerier_Expecter) ListSuppressedVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_ListSuppressedVulnerabilities_Call {
	return &MockQuerier_ListSuppressedVulnerabilities_Call{Call: _e.mock.On("ListSuppressedVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_ListSuppressedVulnerabilities_Call) Run(run func(ctx context.Context, arg ListSuppressedVulnerabilitiesParams)) *MockQuerier_ListSuppressedVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ListSuppressedVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilities_Call) Return(_a0 []*ListSuppressedVulnerabilitiesRow, _a1 error) *MockQuerier_ListSuppressedVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilities_Call) RunAndReturn(run func(context.Context, ListSuppressedVulnerabilitiesParams) ([]*ListSuppressedVulnerabilitiesRow, error)) *MockQuerier_ListSuppressedVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// ListSuppressedVulnerabilitiesForImage provides a mock function with given fields: ctx, imageName
func (_m *MockQuerier) ListSuppressedVulnerabilitiesForImage(ctx context.Context, imageName string) ([]*SuppressedVulnerability, error) {
	ret := _m.Called(ctx, imageName)

	if len(ret) == 0 {
		panic("no return value specified for ListSuppressedVulnerabilitiesForImage")
	}

	var r0 []*SuppressedVulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*SuppressedVulnerability, error)); ok {
		return rf(ctx, imageName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*SuppressedVulnerability); ok {
		r0 = rf(ctx, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*SuppressedVulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListSuppressedVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSuppressedVulnerabilitiesForImage'
type MockQuerier_ListSuppressedVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// ListSuppressedVulnerabilitiesForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
func (_e *MockQuerier_Expecter) ListSuppressedVulnerabilitiesForImage(ctx interface{}, imageName interface{}) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	return &MockQuerier_ListSuppressedVulnerabilitiesForImage_Call{Call: _e.mock.On("ListSuppressedVulnerabilitiesForImage", ctx, imageName)}
}

func (_c *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call) Run(run func(ctx context.Context, imageName string)) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call) Return(_a0 []*SuppressedVulnerability, _a1 error) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, string) ([]*SuppressedVulnerability, error)) *MockQuerier_ListSuppressedVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListUnusedImages provides a mock function with given fields: ctx, name
func (_m *MockQuerier) ListUnusedImages(ctx context.Context, name *string) ([]*ListUnusedImagesRow, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ListUnusedImages")
	}

	var r0 []*ListUnusedImagesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) ([]*ListUnusedImagesRow, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) []*ListUnusedImagesRow); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ListUnusedImagesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListUnusedImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUnusedImages'
type MockQuerier_ListUnusedImages_Call struct {
	*mock.Call
}

// ListUnusedImages is a helper method to define mock.On call
//   - ctx context.Context
//   - name *string
func (_e *MockQuerier_Expecter) ListUnusedImages(ctx interface{}, name interface{}) *MockQuerier_ListUnusedImages_Call {
	return &MockQuerier_ListUnusedImages_Call{Call: _e.mock.On("ListUnusedImages", ctx, name)}
}

func (_c *MockQuerier_ListUnusedImages_Call) Run(run func(ctx context.Context, name *string)) *MockQuerier_ListUnusedImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string))
	})
	return _c
}

func (_c *MockQuerier_ListUnusedImages_Call) Return(_a0 []*ListUnusedImagesRow, _a1 error) *MockQuerier_ListUnusedImages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListUnusedImages_Call) RunAndReturn(run func(context.Context, *string) ([]*ListUnusedImagesRow, error)) *MockQuerier_ListUnusedImages_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilities provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListVulnerabilities(ctx context.Context, arg ListVulnerabilitiesParams) ([]*ListVulnerabilitiesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilities")
	}

	var r0 []*ListVulnerabilitiesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitiesParams) ([]*ListVulnerabilitiesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitiesParams) []*ListVulnerabilitiesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ListVulnerabilitiesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ListVulnerabilitiesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilities'
type MockQuerier_ListVulnerabilities_Call struct {
	*mock.Call
}

// ListVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ListVulnerabilitiesParams
func (_e *MockQuerier_Expecter) ListVulnerabilities(ctx interface{}, arg interface{}) *MockQuerier_ListVulnerabilities_Call {
	return &MockQuerier_ListVulnerabilities_Call{Call: _e.mock.On("ListVulnerabilities", ctx, arg)}
}

func (_c *MockQuerier_ListVulnerabilities_Call) Run(run func(ctx context.Context, arg ListVulnerabilitiesParams)) *MockQuerier_ListVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ListVulnerabilitiesParams))
	})
	return _c
}

func (_c *MockQuerier_ListVulnerabilities_Call) Return(_a0 []*ListVulnerabilitiesRow, _a1 error) *MockQuerier_ListVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListVulnerabilities_Call) RunAndReturn(run func(context.Context, ListVulnerabilitiesParams) ([]*ListVulnerabilitiesRow, error)) *MockQuerier_ListVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitiesForImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListVulnerabilitiesForImage(ctx context.Context, arg ListVulnerabilitiesForImageParams) ([]*ListVulnerabilitiesForImageRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitiesForImage")
	}

	var r0 []*ListVulnerabilitiesForImageRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitiesForImageParams) ([]*ListVulnerabilitiesForImageRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitiesForImageParams) []*ListVulnerabilitiesForImageRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ListVulnerabilitiesForImageRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ListVulnerabilitiesForImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListVulnerabilitiesForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitiesForImage'
type MockQuerier_ListVulnerabilitiesForImage_Call struct {
	*mock.Call
}

// ListVulnerabilitiesForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ListVulnerabilitiesForImageParams
func (_e *MockQuerier_Expecter) ListVulnerabilitiesForImage(ctx interface{}, arg interface{}) *MockQuerier_ListVulnerabilitiesForImage_Call {
	return &MockQuerier_ListVulnerabilitiesForImage_Call{Call: _e.mock.On("ListVulnerabilitiesForImage", ctx, arg)}
}

func (_c *MockQuerier_ListVulnerabilitiesForImage_Call) Run(run func(ctx context.Context, arg ListVulnerabilitiesForImageParams)) *MockQuerier_ListVulnerabilitiesForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ListVulnerabilitiesForImageParams))
	})
	return _c
}

func (_c *MockQuerier_ListVulnerabilitiesForImage_Call) Return(_a0 []*ListVulnerabilitiesForImageRow, _a1 error) *MockQuerier_ListVulnerabilitiesForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListVulnerabilitiesForImage_Call) RunAndReturn(run func(context.Context, ListVulnerabilitiesForImageParams) ([]*ListVulnerabilitiesForImageRow, error)) *MockQuerier_ListVulnerabilitiesForImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitySummaries provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListVulnerabilitySummaries(ctx context.Context, arg ListVulnerabilitySummariesParams) ([]*ListVulnerabilitySummariesRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitySummaries")
	}

	var r0 []*ListVulnerabilitySummariesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitySummariesParams) ([]*ListVulnerabilitySummariesRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ListVulnerabilitySummariesParams) []*ListVulnerabilitySummariesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ListVulnerabilitySummariesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ListVulnerabilitySummariesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListVulnerabilitySummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitySummaries'
type MockQuerier_ListVulnerabilitySummaries_Call struct {
	*mock.Call
}

// ListVulnerabilitySummaries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ListVulnerabilitySummariesParams
func (_e *MockQuerier_Expecter) ListVulnerabilitySummaries(ctx interface{}, arg interface{}) *MockQuerier_ListVulnerabilitySummaries_Call {
	return &MockQuerier_ListVulnerabilitySummaries_Call{Call: _e.mock.On("ListVulnerabilitySummaries", ctx, arg)}
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) Run(run func(ctx context.Context, arg ListVulnerabilitySummariesParams)) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ListVulnerabilitySummariesParams))
	})
	return _c
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) Return(_a0 []*ListVulnerabilitySummariesRow, _a1 error) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListVulnerabilitySummaries_Call) RunAndReturn(run func(context.Context, ListVulnerabilitySummariesParams) ([]*ListVulnerabilitySummariesRow, error)) *MockQuerier_ListVulnerabilitySummaries_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadsByCluster provides a mock function with given fields: ctx, cluster
func (_m *MockQuerier) ListWorkloadsByCluster(ctx context.Context, cluster string) ([]*Workload, error) {
	ret := _m.Called(ctx, cluster)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadsByCluster")
	}

	var r0 []*Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*Workload, error)); ok {
		return rf(ctx, cluster)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Workload); ok {
		r0 = rf(ctx, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadsByCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadsByCluster'
type MockQuerier_ListWorkloadsByCluster_Call struct {
	*mock.Call
}

// ListWorkloadsByCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - cluster string
func (_e *MockQuerier_Expecter) ListWorkloadsByCluster(ctx interface{}, cluster interface{}) *MockQuerier_ListWorkloadsByCluster_Call {
	return &MockQuerier_ListWorkloadsByCluster_Call{Call: _e.mock.On("ListWorkloadsByCluster", ctx, cluster)}
}

func (_c *MockQuerier_ListWorkloadsByCluster_Call) Run(run func(ctx context.Context, cluster string)) *MockQuerier_ListWorkloadsByCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadsByCluster_Call) Return(_a0 []*Workload, _a1 error) *MockQuerier_ListWorkloadsByCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadsByCluster_Call) RunAndReturn(run func(context.Context, string) ([]*Workload, error)) *MockQuerier_ListWorkloadsByCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkloadsByImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ListWorkloadsByImage(ctx context.Context, arg ListWorkloadsByImageParams) ([]*Workload, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadsByImage")
	}

	var r0 []*Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ListWorkloadsByImageParams) ([]*Workload, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ListWorkloadsByImageParams) []*Workload); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ListWorkloadsByImageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ListWorkloadsByImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkloadsByImage'
type MockQuerier_ListWorkloadsByImage_Call struct {
	*mock.Call
}

// ListWorkloadsByImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ListWorkloadsByImageParams
func (_e *MockQuerier_Expecter) ListWorkloadsByImage(ctx interface{}, arg interface{}) *MockQuerier_ListWorkloadsByImage_Call {
	return &MockQuerier_ListWorkloadsByImage_Call{Call: _e.mock.On("ListWorkloadsByImage", ctx, arg)}
}

func (_c *MockQuerier_ListWorkloadsByImage_Call) Run(run func(ctx context.Context, arg ListWorkloadsByImageParams)) *MockQuerier_ListWorkloadsByImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ListWorkloadsByImageParams))
	})
	return _c
}

func (_c *MockQuerier_ListWorkloadsByImage_Call) Return(_a0 []*Workload, _a1 error) *MockQuerier_ListWorkloadsByImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ListWorkloadsByImage_Call) RunAndReturn(run func(context.Context, ListWorkloadsByImageParams) ([]*Workload, error)) *MockQuerier_ListWorkloadsByImage_Call {
	_c.Call.Return(run)
	return _c
}

// MarkImagesAsUntracked provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) MarkImagesAsUntracked(ctx context.Context, arg MarkImagesAsUntrackedParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MarkImagesAsUntracked")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, MarkImagesAsUntrackedParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_MarkImagesAsUntracked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkImagesAsUntracked'
type MockQuerier_MarkImagesAsUntracked_Call struct {
	*mock.Call
}

// MarkImagesAsUntracked is a helper method to define mock.On call
//   - ctx context.Context
//   - arg MarkImagesAsUntrackedParams
func (_e *MockQuerier_Expecter) MarkImagesAsUntracked(ctx interface{}, arg interface{}) *MockQuerier_MarkImagesAsUntracked_Call {
	return &MockQuerier_MarkImagesAsUntracked_Call{Call: _e.mock.On("MarkImagesAsUntracked", ctx, arg)}
}

func (_c *MockQuerier_MarkImagesAsUntracked_Call) Run(run func(ctx context.Context, arg MarkImagesAsUntrackedParams)) *MockQuerier_MarkImagesAsUntracked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(MarkImagesAsUntrackedParams))
	})
	return _c
}

func (_c *MockQuerier_MarkImagesAsUntracked_Call) Return(_a0 error) *MockQuerier_MarkImagesAsUntracked_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_MarkImagesAsUntracked_Call) RunAndReturn(run func(context.Context, MarkImagesAsUntrackedParams) error) *MockQuerier_MarkImagesAsUntracked_Call {
	_c.Call.Return(run)
	return _c
}

// MarkImagesForResync provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) MarkImagesForResync(ctx context.Context, arg MarkImagesForResyncParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MarkImagesForResync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, MarkImagesForResyncParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_MarkImagesForResync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkImagesForResync'
type MockQuerier_MarkImagesForResync_Call struct {
	*mock.Call
}

// MarkImagesForResync is a helper method to define mock.On call
//   - ctx context.Context
//   - arg MarkImagesForResyncParams
func (_e *MockQuerier_Expecter) MarkImagesForResync(ctx interface{}, arg interface{}) *MockQuerier_MarkImagesForResync_Call {
	return &MockQuerier_MarkImagesForResync_Call{Call: _e.mock.On("MarkImagesForResync", ctx, arg)}
}

func (_c *MockQuerier_MarkImagesForResync_Call) Run(run func(ctx context.Context, arg MarkImagesForResyncParams)) *MockQuerier_MarkImagesForResync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(MarkImagesForResyncParams))
	})
	return _c
}

func (_c *MockQuerier_MarkImagesForResync_Call) Return(_a0 error) *MockQuerier_MarkImagesForResync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_MarkImagesForResync_Call) RunAndReturn(run func(context.Context, MarkImagesForResyncParams) error) *MockQuerier_MarkImagesForResync_Call {
	_c.Call.Return(run)
	return _c
}

// MarkUnusedImages provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) MarkUnusedImages(ctx context.Context, arg MarkUnusedImagesParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MarkUnusedImages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, MarkUnusedImagesParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_MarkUnusedImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkUnusedImages'
type MockQuerier_MarkUnusedImages_Call struct {
	*mock.Call
}

// MarkUnusedImages is a helper method to define mock.On call
//   - ctx context.Context
//   - arg MarkUnusedImagesParams
func (_e *MockQuerier_Expecter) MarkUnusedImages(ctx interface{}, arg interface{}) *MockQuerier_MarkUnusedImages_Call {
	return &MockQuerier_MarkUnusedImages_Call{Call: _e.mock.On("MarkUnusedImages", ctx, arg)}
}

func (_c *MockQuerier_MarkUnusedImages_Call) Run(run func(ctx context.Context, arg MarkUnusedImagesParams)) *MockQuerier_MarkUnusedImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(MarkUnusedImagesParams))
	})
	return _c
}

func (_c *MockQuerier_MarkUnusedImages_Call) Return(_a0 error) *MockQuerier_MarkUnusedImages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_MarkUnusedImages_Call) RunAndReturn(run func(context.Context, MarkUnusedImagesParams) error) *MockQuerier_MarkUnusedImages_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshVulnerabilitySummary provides a mock function with given fields: ctx
func (_m *MockQuerier) RefreshVulnerabilitySummary(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshVulnerabilitySummary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RefreshVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshVulnerabilitySummary'
type MockQuerier_RefreshVulnerabilitySummary_Call struct {
	*mock.Call
}

// RefreshVulnerabilitySummary is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) RefreshVulnerabilitySummary(ctx interface{}) *MockQuerier_RefreshVulnerabilitySummary_Call {
	return &MockQuerier_RefreshVulnerabilitySummary_Call{Call: _e.mock.On("RefreshVulnerabilitySummary", ctx)}
}

func (_c *MockQuerier_RefreshVulnerabilitySummary_Call) Run(run func(ctx context.Context)) *MockQuerier_RefreshVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_RefreshVulnerabilitySummary_Call) Return(_a0 error) *MockQuerier_RefreshVulnerabilitySummary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RefreshVulnerabilitySummary_Call) RunAndReturn(run func(context.Context) error) *MockQuerier_RefreshVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// ResetDatabase provides a mock function with given fields: ctx
func (_m *MockQuerier) ResetDatabase(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ResetDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ResetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetDatabase'
type MockQuerier_ResetDatabase_Call struct {
	*mock.Call
}

// ResetDatabase is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ResetDatabase(ctx interface{}) *MockQuerier_ResetDatabase_Call {
	return &MockQuerier_ResetDatabase_Call{Call: _e.mock.On("ResetDatabase", ctx)}
}

func (_c *MockQuerier_ResetDatabase_Call) Run(run func(ctx context.Context)) *MockQuerier_ResetDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_ResetDatabase_Call) Return(_a0 error) *MockQuerier_ResetDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ResetDatabase_Call) RunAndReturn(run func(context.Context) error) *MockQuerier_ResetDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorkloadState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) SetWorkloadState(ctx context.Context, arg SetWorkloadStateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkloadState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, SetWorkloadStateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SetWorkloadState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkloadState'
type MockQuerier_SetWorkloadState_Call struct {
	*mock.Call
}

// SetWorkloadState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg SetWorkloadStateParams
func (_e *MockQuerier_Expecter) SetWorkloadState(ctx interface{}, arg interface{}) *MockQuerier_SetWorkloadState_Call {
	return &MockQuerier_SetWorkloadState_Call{Call: _e.mock.On("SetWorkloadState", ctx, arg)}
}

func (_c *MockQuerier_SetWorkloadState_Call) Run(run func(ctx context.Context, arg SetWorkloadStateParams)) *MockQuerier_SetWorkloadState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(SetWorkloadStateParams))
	})
	return _c
}

func (_c *MockQuerier_SetWorkloadState_Call) Return(_a0 error) *MockQuerier_SetWorkloadState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SetWorkloadState_Call) RunAndReturn(run func(context.Context, SetWorkloadStateParams) error) *MockQuerier_SetWorkloadState_Call {
	_c.Call.Return(run)
	return _c
}

// SuppressVulnerability provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) SuppressVulnerability(ctx context.Context, arg SuppressVulnerabilityParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SuppressVulnerability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, SuppressVulnerabilityParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SuppressVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuppressVulnerability'
type MockQuerier_SuppressVulnerability_Call struct {
	*mock.Call
}

// SuppressVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - arg SuppressVulnerabilityParams
func (_e *MockQuerier_Expecter) SuppressVulnerability(ctx interface{}, arg interface{}) *MockQuerier_SuppressVulnerability_Call {
	return &MockQuerier_SuppressVulnerability_Call{Call: _e.mock.On("SuppressVulnerability", ctx, arg)}
}

func (_c *MockQuerier_SuppressVulnerability_Call) Run(run func(ctx context.Context, arg SuppressVulnerabilityParams)) *MockQuerier_SuppressVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(SuppressVulnerabilityParams))
	})
	return _c
}

func (_c *MockQuerier_SuppressVulnerability_Call) Return(_a0 error) *MockQuerier_SuppressVulnerability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SuppressVulnerability_Call) RunAndReturn(run func(context.Context, SuppressVulnerabilityParams) error) *MockQuerier_SuppressVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImage provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateImageParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImage'
type MockQuerier_UpdateImage_Call struct {
	*mock.Call
}

// UpdateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateImageParams
func (_e *MockQuerier_Expecter) UpdateImage(ctx interface{}, arg interface{}) *MockQuerier_UpdateImage_Call {
	return &MockQuerier_UpdateImage_Call{Call: _e.mock.On("UpdateImage", ctx, arg)}
}

func (_c *MockQuerier_UpdateImage_Call) Run(run func(ctx context.Context, arg UpdateImageParams)) *MockQuerier_UpdateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateImageParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateImage_Call) Return(_a0 error) *MockQuerier_UpdateImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateImage_Call) RunAndReturn(run func(context.Context, UpdateImageParams) error) *MockQuerier_UpdateImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImageState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateImageState(ctx context.Context, arg UpdateImageStateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateImageStateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateImageState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImageState'
type MockQuerier_UpdateImageState_Call struct {
	*mock.Call
}

// UpdateImageState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateImageStateParams
func (_e *MockQuerier_Expecter) UpdateImageState(ctx interface{}, arg interface{}) *MockQuerier_UpdateImageState_Call {
	return &MockQuerier_UpdateImageState_Call{Call: _e.mock.On("UpdateImageState", ctx, arg)}
}

func (_c *MockQuerier_UpdateImageState_Call) Run(run func(ctx context.Context, arg UpdateImageStateParams)) *MockQuerier_UpdateImageState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateImageStateParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateImageState_Call) Return(_a0 error) *MockQuerier_UpdateImageState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateImageState_Call) RunAndReturn(run func(context.Context, UpdateImageStateParams) error) *MockQuerier_UpdateImageState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImageSyncStatus provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateImageSyncStatus(ctx context.Context, arg UpdateImageSyncStatusParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageSyncStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateImageSyncStatusParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateImageSyncStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImageSyncStatus'
type MockQuerier_UpdateImageSyncStatus_Call struct {
	*mock.Call
}

// UpdateImageSyncStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateImageSyncStatusParams
func (_e *MockQuerier_Expecter) UpdateImageSyncStatus(ctx interface{}, arg interface{}) *MockQuerier_UpdateImageSyncStatus_Call {
	return &MockQuerier_UpdateImageSyncStatus_Call{Call: _e.mock.On("UpdateImageSyncStatus", ctx, arg)}
}

func (_c *MockQuerier_UpdateImageSyncStatus_Call) Run(run func(ctx context.Context, arg UpdateImageSyncStatusParams)) *MockQuerier_UpdateImageSyncStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateImageSyncStatusParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateImageSyncStatus_Call) Return(_a0 error) *MockQuerier_UpdateImageSyncStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateImageSyncStatus_Call) RunAndReturn(run func(context.Context, UpdateImageSyncStatusParams) error) *MockQuerier_UpdateImageSyncStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkloadState provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateWorkloadState(ctx context.Context, arg UpdateWorkloadStateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkloadState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateWorkloadStateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateWorkloadState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkloadState'
type MockQuerier_UpdateWorkloadState_Call struct {
	*mock.Call
}

// UpdateWorkloadState is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateWorkloadStateParams
func (_e *MockQuerier_Expecter) UpdateWorkloadState(ctx interface{}, arg interface{}) *MockQuerier_UpdateWorkloadState_Call {
	return &MockQuerier_UpdateWorkloadState_Call{Call: _e.mock.On("UpdateWorkloadState", ctx, arg)}
}

func (_c *MockQuerier_UpdateWorkloadState_Call) Run(run func(ctx context.Context, arg UpdateWorkloadStateParams)) *MockQuerier_UpdateWorkloadState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateWorkloadStateParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateWorkloadState_Call) Return(_a0 error) *MockQuerier_UpdateWorkloadState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateWorkloadState_Call) RunAndReturn(run func(context.Context, UpdateWorkloadStateParams) error) *MockQuerier_UpdateWorkloadState_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertWorkload provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpsertWorkload(ctx context.Context, arg UpsertWorkloadParams) (pgtype.UUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertWorkload")
	}

	var r0 pgtype.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, UpsertWorkloadParams) (pgtype.UUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, UpsertWorkloadParams) pgtype.UUID); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgtype.UUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, UpsertWorkloadParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpsertWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWorkload'
type MockQuerier_UpsertWorkload_Call struct {
	*mock.Call
}

// UpsertWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpsertWorkloadParams
func (_e *MockQuerier_Expecter) UpsertWorkload(ctx interface{}, arg interface{}) *MockQuerier_UpsertWorkload_Call {
	return &MockQuerier_UpsertWorkload_Call{Call: _e.mock.On("UpsertWorkload", ctx, arg)}
}

func (_c *MockQuerier_UpsertWorkload_Call) Run(run func(ctx context.Context, arg UpsertWorkloadParams)) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpsertWorkloadParams))
	})
	return _c
}

func (_c *MockQuerier_UpsertWorkload_Call) Return(_a0 pgtype.UUID, _a1 error) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpsertWorkload_Call) RunAndReturn(run func(context.Context, UpsertWorkloadParams) (pgtype.UUID, error)) *MockQuerier_UpsertWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
