// Code generated by sqlc. DO NOT EDIT.

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	AddWorkloadEvent(ctx context.Context, arg AddWorkloadEventParams) error
	BatchUpdateImageState(ctx context.Context, arg []BatchUpdateImageStateParams) *BatchUpdateImageStateBatchResults
	BatchUpsertCve(ctx context.Context, arg []BatchUpsertCveParams) *BatchUpsertCveBatchResults
	BatchUpsertVulnerabilities(ctx context.Context, arg []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults
	BatchUpsertVulnerabilitySummary(ctx context.Context, arg []BatchUpsertVulnerabilitySummaryParams) *BatchUpsertVulnerabilitySummaryBatchResults
	CountSuppressedVulnerabilities(ctx context.Context, arg CountSuppressedVulnerabilitiesParams) (int64, error)
	CountVulnerabilities(ctx context.Context, arg CountVulnerabilitiesParams) (int64, error)
	CountVulnerabilitiesForImage(ctx context.Context, arg CountVulnerabilitiesForImageParams) (int64, error)
	CreateImage(ctx context.Context, arg CreateImageParams) error
	CreateSourceRef(ctx context.Context, arg CreateSourceRefParams) error
	CreateVulnerabilitySummary(ctx context.Context, arg CreateVulnerabilitySummaryParams) (*VulnerabilitySummary, error)
	CreateWorkload(ctx context.Context, arg CreateWorkloadParams) (*Workload, error)
	DeleteWorkload(ctx context.Context, arg DeleteWorkloadParams) (pgtype.UUID, error)
	GenerateVulnerabilitySummaryForImage(ctx context.Context, arg GenerateVulnerabilitySummaryForImageParams) (*GenerateVulnerabilitySummaryForImageRow, error)
	GetCve(ctx context.Context, cveID string) (*Cve, error)
	GetImage(ctx context.Context, arg GetImageParams) (*Image, error)
	GetImagesScheduledForSync(ctx context.Context) ([]*Image, error)
	GetVulnerability(ctx context.Context, arg GetVulnerabilityParams) (*Vulnerability, error)
	GetVulnerabilityById(ctx context.Context, id pgtype.UUID) (*GetVulnerabilityByIdRow, error)
	GetVulnerabilitySummary(ctx context.Context, arg GetVulnerabilitySummaryParams) (*GetVulnerabilitySummaryRow, error)
	GetVulnerabilitySummaryForImage(ctx context.Context, arg GetVulnerabilitySummaryForImageParams) (*VulnerabilitySummary, error)
	// Generate the time series calendar
	GetVulnerabilitySummaryTimeSeries(ctx context.Context, arg GetVulnerabilitySummaryTimeSeriesParams) ([]*GetVulnerabilitySummaryTimeSeriesRow, error)
	// TODO: remove later below
	GetVulnerabilitySummaryTimeSeriesNonCumulative(ctx context.Context, arg GetVulnerabilitySummaryTimeSeriesNonCumulativeParams) ([]*GetVulnerabilitySummaryTimeSeriesNonCumulativeRow, error)
	GetWorkload(ctx context.Context, arg GetWorkloadParams) (*Workload, error)
	InitializeWorkload(ctx context.Context, arg InitializeWorkloadParams) (*Workload, error)
	ListCumulativeVulnerabilityTimeSeries(ctx context.Context, arg ListCumulativeVulnerabilityTimeSeriesParams) ([]*ListCumulativeVulnerabilityTimeSeriesRow, error)
	ListSourceRefs(ctx context.Context, arg ListSourceRefsParams) ([]*SourceRef, error)
	ListSuppressedVulnerabilities(ctx context.Context, arg ListSuppressedVulnerabilitiesParams) ([]*ListSuppressedVulnerabilitiesRow, error)
	ListSuppressedVulnerabilitiesForImage(ctx context.Context, imageName string) ([]*SuppressedVulnerability, error)
	ListVulnerabilities(ctx context.Context, arg ListVulnerabilitiesParams) ([]*ListVulnerabilitiesRow, error)
	ListVulnerabilitiesForImage(ctx context.Context, arg ListVulnerabilitiesForImageParams) ([]*ListVulnerabilitiesForImageRow, error)
	ListVulnerabilitySummaries(ctx context.Context, arg ListVulnerabilitySummariesParams) ([]*ListVulnerabilitySummariesRow, error)
	// New: get most recent summary before `since`
	// Get all newer summaries + join to workloads
	// Combine recent and one older summary per image
	// Join with workloads
	ListVulnerabilitySummaryTimeseries(ctx context.Context, arg ListVulnerabilitySummaryTimeseriesParams) ([]*ListVulnerabilitySummaryTimeseriesRow, error)
	ListWorkloadsByCluster(ctx context.Context, cluster string) ([]*Workload, error)
	ListWorkloadsByImage(ctx context.Context, arg ListWorkloadsByImageParams) ([]*Workload, error)
	MarkImagesAsUntracked(ctx context.Context, arg MarkImagesAsUntrackedParams) error
	MarkImagesForResync(ctx context.Context, arg MarkImagesForResyncParams) error
	MarkUnusedImages(ctx context.Context, excludedStates []ImageState) error
	ResetDatabase(ctx context.Context) error
	SetWorkloadState(ctx context.Context, arg SetWorkloadStateParams) error
	// newest version
	// 1. Generate list of dates from that starting point to today
	// 2. Join each workload with each date
	// 3. For each workload/date, get latest summary up to that date
	// 4. Aggregate totals per day
	// 5. Final output
	SummaryTimeseries(ctx context.Context, arg SummaryTimeseriesParams) ([]*SummaryTimeseriesRow, error)
	// 1. Create the date range from start date up to today
	// 2. Get all workloads with image_name (we'll join on image_name)
	// 3. Combine every workload with every day
	// 4. For each workload + day, find the most recent vulnerability summary up to that day
	// 5. Return full time series
	SummaryTimeseries0(ctx context.Context, arg SummaryTimeseries0Params) ([]*SummaryTimeseries0Row, error)
	SuppressVulnerability(ctx context.Context, arg SuppressVulnerabilityParams) error
	UpdateImage(ctx context.Context, arg UpdateImageParams) error
	UpdateImageState(ctx context.Context, arg UpdateImageStateParams) error
	UpdateImageSyncStatus(ctx context.Context, arg UpdateImageSyncStatusParams) error
	UpdateWorkloadState(ctx context.Context, arg UpdateWorkloadStateParams) error
	UpsertWorkload(ctx context.Context, arg UpsertWorkloadParams) (pgtype.UUID, error)
}

var _ Querier = (*Queries)(nil)
