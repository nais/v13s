// Code generated by sqlc. DO NOT EDIT.
// source: batch.go

package sql

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchUpsertCwe = `-- name: BatchUpsertCwe :batchexec
INSERT INTO cwe(cwe_id,
                cwe_title,
                cwe_desc,
                cwe_link,
                severity)
VALUES ($1,
        $2,
        $3,
        $4,
        $5)
ON CONFLICT (cwe_id)
    DO
        UPDATE
    SET cwe_title = $2,
        cwe_desc = $3,
        cwe_link = $4,
        severity = $5
`

type BatchUpsertCweBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchUpsertCweParams struct {
	CweID    string
	CweTitle string
	CweDesc  string
	CweLink  string
	Severity int32
}

func (q *Queries) BatchUpsertCwe(ctx context.Context, arg []BatchUpsertCweParams) *BatchUpsertCweBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.CweID,
			a.CweTitle,
			a.CweDesc,
			a.CweLink,
			a.Severity,
		}
		batch.Queue(batchUpsertCwe, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchUpsertCweBatchResults{br, len(arg), false}
}

func (b *BatchUpsertCweBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchUpsertCweBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const batchUpsertVulnerabilities = `-- name: BatchUpsertVulnerabilities :batchexec
INSERT INTO vulnerabilities(image_name,
                                  image_tag,
                                  package,
                                  cwe_id)

VALUES ($1,
        $2,
        $3,
        $4)
ON CONFLICT DO NOTHING
`

type BatchUpsertVulnerabilitiesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchUpsertVulnerabilitiesParams struct {
	ImageName string
	ImageTag  string
	Package   string
	CweID     string
}

func (q *Queries) BatchUpsertVulnerabilities(ctx context.Context, arg []BatchUpsertVulnerabilitiesParams) *BatchUpsertVulnerabilitiesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ImageName,
			a.ImageTag,
			a.Package,
			a.CweID,
		}
		batch.Queue(batchUpsertVulnerabilities, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchUpsertVulnerabilitiesBatchResults{br, len(arg), false}
}

func (b *BatchUpsertVulnerabilitiesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchUpsertVulnerabilitiesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
