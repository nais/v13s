// Code generated by sqlc. DO NOT EDIT.

package sql

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
	typeext "github.com/nais/v13s/internal/database/typeext"
)

type ImageState string

const (
	ImageStateInitialized ImageState = "initialized"
	ImageStateUpdated     ImageState = "updated"
	ImageStateUntracked   ImageState = "untracked"
	ImageStateFailed      ImageState = "failed"
	ImageStateResync      ImageState = "resync"
	ImageStateOutdated    ImageState = "outdated"
	ImageStateUnused      ImageState = "unused"
)

func (e *ImageState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageState(s)
	case string:
		*e = ImageState(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageState: %T", src)
	}
	return nil
}

type NullImageState struct {
	ImageState ImageState
	Valid      bool // Valid is true if ImageState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageState) Scan(value interface{}) error {
	if value == nil {
		ns.ImageState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageState), nil
}

func (e ImageState) Valid() bool {
	switch e {
	case ImageStateInitialized,
		ImageStateUpdated,
		ImageStateUntracked,
		ImageStateFailed,
		ImageStateResync,
		ImageStateOutdated,
		ImageStateUnused:
		return true
	}
	return false
}

func AllImageStateValues() []ImageState {
	return []ImageState{
		ImageStateInitialized,
		ImageStateUpdated,
		ImageStateUntracked,
		ImageStateFailed,
		ImageStateResync,
		ImageStateOutdated,
		ImageStateUnused,
	}
}

type RiverJobState string

const (
	RiverJobStateAvailable RiverJobState = "available"
	RiverJobStateCancelled RiverJobState = "cancelled"
	RiverJobStateCompleted RiverJobState = "completed"
	RiverJobStateDiscarded RiverJobState = "discarded"
	RiverJobStatePending   RiverJobState = "pending"
	RiverJobStateRetryable RiverJobState = "retryable"
	RiverJobStateRunning   RiverJobState = "running"
	RiverJobStateScheduled RiverJobState = "scheduled"
)

func (e *RiverJobState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RiverJobState(s)
	case string:
		*e = RiverJobState(s)
	default:
		return fmt.Errorf("unsupported scan type for RiverJobState: %T", src)
	}
	return nil
}

type NullRiverJobState struct {
	RiverJobState RiverJobState
	Valid         bool // Valid is true if RiverJobState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRiverJobState) Scan(value interface{}) error {
	if value == nil {
		ns.RiverJobState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RiverJobState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRiverJobState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RiverJobState), nil
}

func (e RiverJobState) Valid() bool {
	switch e {
	case RiverJobStateAvailable,
		RiverJobStateCancelled,
		RiverJobStateCompleted,
		RiverJobStateDiscarded,
		RiverJobStatePending,
		RiverJobStateRetryable,
		RiverJobStateRunning,
		RiverJobStateScheduled:
		return true
	}
	return false
}

func AllRiverJobStateValues() []RiverJobState {
	return []RiverJobState{
		RiverJobStateAvailable,
		RiverJobStateCancelled,
		RiverJobStateCompleted,
		RiverJobStateDiscarded,
		RiverJobStatePending,
		RiverJobStateRetryable,
		RiverJobStateRunning,
		RiverJobStateScheduled,
	}
}

type VulnerabilitySuppressReason string

const (
	VulnerabilitySuppressReasonInTriage      VulnerabilitySuppressReason = "in_triage"
	VulnerabilitySuppressReasonResolved      VulnerabilitySuppressReason = "resolved"
	VulnerabilitySuppressReasonFalsePositive VulnerabilitySuppressReason = "false_positive"
	VulnerabilitySuppressReasonNotAffected   VulnerabilitySuppressReason = "not_affected"
	VulnerabilitySuppressReasonNotSet        VulnerabilitySuppressReason = "not_set"
)

func (e *VulnerabilitySuppressReason) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VulnerabilitySuppressReason(s)
	case string:
		*e = VulnerabilitySuppressReason(s)
	default:
		return fmt.Errorf("unsupported scan type for VulnerabilitySuppressReason: %T", src)
	}
	return nil
}

type NullVulnerabilitySuppressReason struct {
	VulnerabilitySuppressReason VulnerabilitySuppressReason
	Valid                       bool // Valid is true if VulnerabilitySuppressReason is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVulnerabilitySuppressReason) Scan(value interface{}) error {
	if value == nil {
		ns.VulnerabilitySuppressReason, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VulnerabilitySuppressReason.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVulnerabilitySuppressReason) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VulnerabilitySuppressReason), nil
}

func (e VulnerabilitySuppressReason) Valid() bool {
	switch e {
	case VulnerabilitySuppressReasonInTriage,
		VulnerabilitySuppressReasonResolved,
		VulnerabilitySuppressReasonFalsePositive,
		VulnerabilitySuppressReasonNotAffected,
		VulnerabilitySuppressReasonNotSet:
		return true
	}
	return false
}

func AllVulnerabilitySuppressReasonValues() []VulnerabilitySuppressReason {
	return []VulnerabilitySuppressReason{
		VulnerabilitySuppressReasonInTriage,
		VulnerabilitySuppressReasonResolved,
		VulnerabilitySuppressReasonFalsePositive,
		VulnerabilitySuppressReasonNotAffected,
		VulnerabilitySuppressReasonNotSet,
	}
}

type WorkloadState string

const (
	WorkloadStateInitialized   WorkloadState = "initialized"
	WorkloadStateUpdated       WorkloadState = "updated"
	WorkloadStateNoAttestation WorkloadState = "no_attestation"
	WorkloadStateProcessing    WorkloadState = "processing"
	WorkloadStateFailed        WorkloadState = "failed"
	WorkloadStateUnrecoverable WorkloadState = "unrecoverable"
	WorkloadStateResync        WorkloadState = "resync"
)

func (e *WorkloadState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WorkloadState(s)
	case string:
		*e = WorkloadState(s)
	default:
		return fmt.Errorf("unsupported scan type for WorkloadState: %T", src)
	}
	return nil
}

type NullWorkloadState struct {
	WorkloadState WorkloadState
	Valid         bool // Valid is true if WorkloadState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWorkloadState) Scan(value interface{}) error {
	if value == nil {
		ns.WorkloadState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WorkloadState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWorkloadState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WorkloadState), nil
}

func (e WorkloadState) Valid() bool {
	switch e {
	case WorkloadStateInitialized,
		WorkloadStateUpdated,
		WorkloadStateNoAttestation,
		WorkloadStateProcessing,
		WorkloadStateFailed,
		WorkloadStateUnrecoverable,
		WorkloadStateResync:
		return true
	}
	return false
}

func AllWorkloadStateValues() []WorkloadState {
	return []WorkloadState{
		WorkloadStateInitialized,
		WorkloadStateUpdated,
		WorkloadStateNoAttestation,
		WorkloadStateProcessing,
		WorkloadStateFailed,
		WorkloadStateUnrecoverable,
		WorkloadStateResync,
	}
}

type Cve struct {
	CveID     string
	CveTitle  string
	CveDesc   string
	CveLink   string
	Severity  int32
	Refs      typeext.MapStringString
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Image struct {
	Name             string
	Tag              string
	Metadata         typeext.MapStringString
	State            ImageState
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	ReadyForResyncAt pgtype.Timestamptz
}

type RiverJob struct {
	ID           int64
	State        RiverJobState
	Attempt      int16
	MaxAttempts  int16
	AttemptedAt  pgtype.Timestamptz
	CreatedAt    pgtype.Timestamptz
	FinalizedAt  pgtype.Timestamptz
	ScheduledAt  pgtype.Timestamptz
	Priority     int16
	Args         []byte
	AttemptedBy  []string
	Errors       [][]byte
	Kind         string
	Metadata     []byte
	Queue        string
	Tags         []string
	UniqueKey    []byte
	UniqueStates pgtype.Bits
}

type SourceRef struct {
	ID         pgtype.UUID
	SourceID   pgtype.UUID
	SourceType string
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	ImageName  string
	ImageTag   string
}

type SuppressedVulnerability struct {
	ID           pgtype.UUID
	ImageName    string
	Package      string
	CveID        string
	Suppressed   bool
	Reason       VulnerabilitySuppressReason
	ReasonText   string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	SuppressedBy string
}

type Vulnerability struct {
	ID               pgtype.UUID
	ImageName        string
	ImageTag         string
	Package          string
	CveID            string
	Source           string
	LatestVersion    string
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	LastSeverity     *int32
	BecameCriticalAt pgtype.Timestamptz
}

type VulnerabilitySummary struct {
	ID         pgtype.UUID
	ImageName  string
	ImageTag   string
	Critical   int32
	High       int32
	Medium     int32
	Low        int32
	Unassigned int32
	RiskScore  int32
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

type Workload struct {
	ID           pgtype.UUID
	Name         string
	WorkloadType string
	Namespace    string
	Cluster      string
	ImageName    string
	ImageTag     string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	State        WorkloadState
}
