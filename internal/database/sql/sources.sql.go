// Code generated by sqlc. DO NOT EDIT.
// source: sources.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSourceRef = `-- name: CreateSourceRef :exec
INSERT INTO source_refs(
    image_name,
    image_tag,
    source_id,
    source_type
)
VALUES (
        $1,
        $2,
        $3,
           $4
       ) ON CONFLICT
    DO NOTHING
`

type CreateSourceRefParams struct {
	ImageName  string
	ImageTag   string
	SourceID   pgtype.UUID
	SourceType string
}

func (q *Queries) CreateSourceRef(ctx context.Context, arg CreateSourceRefParams) error {
	_, err := q.db.Exec(ctx, createSourceRef,
		arg.ImageName,
		arg.ImageTag,
		arg.SourceID,
		arg.SourceType,
	)
	return err
}

const deleteSourceRef = `-- name: DeleteSourceRef :exec
DELETE
FROM source_refs
WHERE image_name = $1
  AND image_tag = $2
  AND source_type = $3
`

type DeleteSourceRefParams struct {
	ImageName  string
	ImageTag   string
	SourceType string
}

func (q *Queries) DeleteSourceRef(ctx context.Context, arg DeleteSourceRefParams) error {
	_, err := q.db.Exec(ctx, deleteSourceRef, arg.ImageName, arg.ImageTag, arg.SourceType)
	return err
}

const getSourceRef = `-- name: GetSourceRef :one
SELECT id, source_id, source_type, created_at, updated_at, image_name, image_tag
FROM source_refs
WHERE image_name = $1
  AND image_tag = $2
  AND source_type = $3
ORDER BY
    (source_id, source_type) DESC
`

type GetSourceRefParams struct {
	ImageName  string
	ImageTag   string
	SourceType string
}

func (q *Queries) GetSourceRef(ctx context.Context, arg GetSourceRefParams) (*SourceRef, error) {
	row := q.db.QueryRow(ctx, getSourceRef, arg.ImageName, arg.ImageTag, arg.SourceType)
	var i SourceRef
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.SourceType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageName,
		&i.ImageTag,
	)
	return &i, err
}

const listUnusedSourceRefs = `-- name: ListUnusedSourceRefs :many
SELECT sr.id, sr.source_id, sr.source_type, sr.created_at, sr.updated_at, sr.image_name, sr.image_tag
FROM source_refs sr
         JOIN images i
              ON sr.image_name = i.name
                  AND sr.image_tag  = i.tag
WHERE NOT EXISTS (
    SELECT 1
    FROM workloads w
    WHERE w.image_name = i.name
      AND w.image_tag  = i.tag
)
  AND ($1::TEXT IS NULL OR i.name = $1::TEXT)
ORDER BY sr.updated_at DESC
`

func (q *Queries) ListUnusedSourceRefs(ctx context.Context, name *string) ([]*SourceRef, error) {
	rows, err := q.db.Query(ctx, listUnusedSourceRefs, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SourceRef{}
	for rows.Next() {
		var i SourceRef
		if err := rows.Scan(
			&i.ID,
			&i.SourceID,
			&i.SourceType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageName,
			&i.ImageTag,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
