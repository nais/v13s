// Code generated by sqlc. DO NOT EDIT.
// source: sources.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSourceRef = `-- name: CreateSourceRef :exec
INSERT INTO source_refs(
    workload_id,
    source_id,
    source_type
)
VALUES (
           $1,
           $2,
           $3
       ) ON CONFLICT
    DO NOTHING
`

type CreateSourceRefParams struct {
	WorkloadID pgtype.UUID
	SourceID   pgtype.UUID
	SourceType string
}

func (q *Queries) CreateSourceRef(ctx context.Context, arg CreateSourceRefParams) error {
	_, err := q.db.Exec(ctx, createSourceRef, arg.WorkloadID, arg.SourceID, arg.SourceType)
	return err
}

const listSourceRefs = `-- name: ListSourceRefs :many
SELECT id, workload_id, source_id, source_type, created_at, updated_at
FROM source_refs
WHERE workload_id = $1
  AND source_type = $2
ORDER BY
    (source_id, source_type) DESC
`

type ListSourceRefsParams struct {
	WorkloadID pgtype.UUID
	SourceType string
}

func (q *Queries) ListSourceRefs(ctx context.Context, arg ListSourceRefsParams) ([]*SourceRef, error) {
	rows, err := q.db.Query(ctx, listSourceRefs, arg.WorkloadID, arg.SourceType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SourceRef{}
	for rows.Next() {
		var i SourceRef
		if err := rows.Scan(
			&i.ID,
			&i.WorkloadID,
			&i.SourceID,
			&i.SourceType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
