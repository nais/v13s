// Code generated by mockery. DO NOT EDIT.

package attestation

import (
	context "context"

	attestation "github.com/nais/v13s/internal/attestation"

	mock "github.com/stretchr/testify/mock"
)

// MockVerifier is an autogenerated mock type for the Verifier type
type MockVerifier struct {
	mock.Mock
}

type MockVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifier) EXPECT() *MockVerifier_Expecter {
	return &MockVerifier_Expecter{mock: &_m.Mock}
}

// GetAttestation provides a mock function with given fields: ctx, image
func (_m *MockVerifier) GetAttestation(ctx context.Context, image string) (*attestation.Attestation, error) {
	ret := _m.Called(ctx, image)

	if len(ret) == 0 {
		panic("no return value specified for GetAttestation")
	}

	var r0 *attestation.Attestation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*attestation.Attestation, error)); ok {
		return rf(ctx, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *attestation.Attestation); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attestation.Attestation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerifier_GetAttestation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttestation'
type MockVerifier_GetAttestation_Call struct {
	*mock.Call
}

// GetAttestation is a helper method to define mock.On call
//   - ctx context.Context
//   - image string
func (_e *MockVerifier_Expecter) GetAttestation(ctx interface{}, image interface{}) *MockVerifier_GetAttestation_Call {
	return &MockVerifier_GetAttestation_Call{Call: _e.mock.On("GetAttestation", ctx, image)}
}

func (_c *MockVerifier_GetAttestation_Call) Run(run func(ctx context.Context, image string)) *MockVerifier_GetAttestation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVerifier_GetAttestation_Call) Return(_a0 *attestation.Attestation, _a1 error) *MockVerifier_GetAttestation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerifier_GetAttestation_Call) RunAndReturn(run func(context.Context, string) (*attestation.Attestation, error)) *MockVerifier_GetAttestation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerifier creates a new instance of MockVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifier {
	mock := &MockVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
