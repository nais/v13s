// Code generated by mockery. DO NOT EDIT.

package vulnerabilities

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockVulnerabilitiesServer is an autogenerated mock type for the VulnerabilitiesServer type
type MockVulnerabilitiesServer struct {
	mock.Mock
}

type MockVulnerabilitiesServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVulnerabilitiesServer) EXPECT() *MockVulnerabilitiesServer_Expecter {
	return &MockVulnerabilitiesServer_Expecter{mock: &_m.Mock}
}

// GetVulnerabilitySummary provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) GetVulnerabilitySummary(_a0 context.Context, _a1 *GetVulnerabilitySummaryRequest) (*GetVulnerabilitySummaryResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitySummary")
	}

	var r0 *GetVulnerabilitySummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetVulnerabilitySummaryRequest) (*GetVulnerabilitySummaryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetVulnerabilitySummaryRequest) *GetVulnerabilitySummaryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetVulnerabilitySummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetVulnerabilitySummaryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_GetVulnerabilitySummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitySummary'
type MockVulnerabilitiesServer_GetVulnerabilitySummary_Call struct {
	*mock.Call
}

// GetVulnerabilitySummary is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetVulnerabilitySummaryRequest
func (_e *MockVulnerabilitiesServer_Expecter) GetVulnerabilitySummary(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	return &MockVulnerabilitiesServer_GetVulnerabilitySummary_Call{Call: _e.mock.On("GetVulnerabilitySummary", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call) Run(run func(_a0 context.Context, _a1 *GetVulnerabilitySummaryRequest)) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetVulnerabilitySummaryRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call) Return(_a0 *GetVulnerabilitySummaryResponse, _a1 error) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call) RunAndReturn(run func(context.Context, *GetVulnerabilitySummaryRequest) (*GetVulnerabilitySummaryResponse, error)) *MockVulnerabilitiesServer_GetVulnerabilitySummary_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilities provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) ListVulnerabilities(_a0 context.Context, _a1 *ListVulnerabilitiesRequest) (*ListVulnerabilitiesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilities")
	}

	var r0 *ListVulnerabilitiesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListVulnerabilitiesRequest) (*ListVulnerabilitiesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListVulnerabilitiesRequest) *ListVulnerabilitiesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListVulnerabilitiesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListVulnerabilitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_ListVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilities'
type MockVulnerabilitiesServer_ListVulnerabilities_Call struct {
	*mock.Call
}

// ListVulnerabilities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListVulnerabilitiesRequest
func (_e *MockVulnerabilitiesServer_Expecter) ListVulnerabilities(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	return &MockVulnerabilitiesServer_ListVulnerabilities_Call{Call: _e.mock.On("ListVulnerabilities", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilities_Call) Run(run func(_a0 context.Context, _a1 *ListVulnerabilitiesRequest)) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListVulnerabilitiesRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilities_Call) Return(_a0 *ListVulnerabilitiesResponse, _a1 error) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilities_Call) RunAndReturn(run func(context.Context, *ListVulnerabilitiesRequest) (*ListVulnerabilitiesResponse, error)) *MockVulnerabilitiesServer_ListVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// ListVulnerabilitySummaries provides a mock function with given fields: _a0, _a1
func (_m *MockVulnerabilitiesServer) ListVulnerabilitySummaries(_a0 context.Context, _a1 *ListVulnerabilitySummariesRequest) (*ListVulnerabilitySummariesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVulnerabilitySummaries")
	}

	var r0 *ListVulnerabilitySummariesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListVulnerabilitySummariesRequest) (*ListVulnerabilitySummariesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListVulnerabilitySummariesRequest) *ListVulnerabilitySummariesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListVulnerabilitySummariesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListVulnerabilitySummariesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVulnerabilitySummaries'
type MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call struct {
	*mock.Call
}

// ListVulnerabilitySummaries is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListVulnerabilitySummariesRequest
func (_e *MockVulnerabilitiesServer_Expecter) ListVulnerabilitySummaries(_a0 interface{}, _a1 interface{}) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	return &MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call{Call: _e.mock.On("ListVulnerabilitySummaries", _a0, _a1)}
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call) Run(run func(_a0 context.Context, _a1 *ListVulnerabilitySummariesRequest)) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListVulnerabilitySummariesRequest))
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call) Return(_a0 *ListVulnerabilitySummariesResponse, _a1 error) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call) RunAndReturn(run func(context.Context, *ListVulnerabilitySummariesRequest) (*ListVulnerabilitySummariesResponse, error)) *MockVulnerabilitiesServer_ListVulnerabilitySummaries_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedVulnerabilitiesServer provides a mock function with no fields
func (_m *MockVulnerabilitiesServer) mustEmbedUnimplementedVulnerabilitiesServer() {
	_m.Called()
}

// MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedVulnerabilitiesServer'
type MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedVulnerabilitiesServer is a helper method to define mock.On call
func (_e *MockVulnerabilitiesServer_Expecter) mustEmbedUnimplementedVulnerabilitiesServer() *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	return &MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call{Call: _e.mock.On("mustEmbedUnimplementedVulnerabilitiesServer")}
}

func (_c *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call) Run(run func()) *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call) Return() *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call) RunAndReturn(run func()) *MockVulnerabilitiesServer_mustEmbedUnimplementedVulnerabilitiesServer_Call {
	_c.Run(run)
	return _c
}

// NewMockVulnerabilitiesServer creates a new instance of MockVulnerabilitiesServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVulnerabilitiesServer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockVulnerabilitiesServer {
	mock := &MockVulnerabilitiesServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
