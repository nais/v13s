// Trying to adhere to the following - https://cloud.google.com/apis/design/proto3
// https://cloud.google.com/apis/design
syntax = "proto3";

//package nais.io.v13s.v1;
package v13s.api.protobuf;

option go_package = "./pkg/api/vulnerabilities";

import "google/protobuf/timestamp.proto";
// TODO: fix this import conflict in api or here
import "v13s.pagination.proto";

//consider adding this at a later stage - https://github.com/grpc-ecosystem/grpc-gateway
//import "google/api/annotations.proto";

service Vulnerabilities {
  // List all vulnerabilities for the given filters: cluster, namespace, workload, workload_type
  // Example: only supplying a namespace will return all vulnerabilities for all workloads in that namespace across all clusters
  rpc ListVulnerabilities(ListVulnerabilitiesRequest) returns (ListVulnerabilitiesResponse);

  // List all workloads with their vulnerability summaries for the given filters: cluster, namespace, workload, workload_type
  // Example: only supplying a namespace will return all workloads in that namespace across all clusters
  rpc ListVulnerabilitySummaries(ListVulnerabilitySummariesRequest) returns (ListVulnerabilitySummariesResponse);

  // Get the summary of vulnerabilities for the given filters: cluster, namespace, workload, workload_type
  // Examples:
  // Only supplying a namespace will give the total summary for all workloads in that namespace across all clusters
  // Only supplying a cluster will give the total summary for all workloads in that cluster across all namespaces
  // Only supplying a workload will give the summary for that workload across all clusters and namespaces
  // Only supplying a workload_type will give the summary for all workloads of that type across all clusters and namespaces
  // Supplying all filters will give the summary for that specific workload
  rpc GetVulnerabilitySummary(GetVulnerabilitySummaryRequest) returns (GetVulnerabilitySummaryResponse);

  rpc GetVulnerabilitySummaryForImage(GetVulnerabilitySummaryForImageRequest) returns (GetVulnerabilitySummaryForImageResponse);

  rpc ListVulnerabilitiesForImage(ListVulnerabilitiesForImageRequest) returns (ListVulnerabilitiesForImageResponse);

  // Used on image details page in console, could also include summary and list of vulnerabilities
  // TODO: implement the commented out rpcs
  //rpc GetImageVulnerabilityDetails()

  rpc SuppressVulnerability(SuppressVulnerabilityRequest) returns (SuppressVulnerabilityResponse);

  rpc ListSuppressedVulnerabilities(ListSuppressedVulnerabilitiesRequest) returns (ListSuppressedVulnerabilitiesResponse);

  rpc GetSbomCoverageSummary(GetSbomCoverageSummaryRequest) returns (GetSbomCoverageSummaryResponse);
}

message Filter {
  optional string cluster = 1;
  optional string namespace = 2;
  optional string workload = 3;
  optional string workload_type = 4;
  optional string image_name = 5;
  optional string image_tag = 6;
}

message GetSbomCoverageSummaryRequest {
  Filter filter = 1;
}

message GetSbomCoverageSummaryResponse {
  Filter filter = 1;
  int32 sbom_count = 2;
  int32 no_sbom_count = 3;
  int32 workload_count = 4;
  int32 sbom_coverage_percentage = 5;
}

message ListVulnerabilitiesForImageRequest {
  string image_name = 1;
  string image_tag = 2;
  bool include_suppressed = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message ListVulnerabilitiesForImageResponse {
  repeated Vulnerability nodes = 1;
  PageInfo page_info = 2;
}

message GetVulnerabilitySummaryForImageRequest {
  string image_name = 1;
  string image_tag = 2;
}

message GetVulnerabilitySummaryForImageResponse {
  Summary vulnerability_summary = 1;
  repeated Workload workloadRef = 2;
}

message ListVulnerabilitySummariesRequest {
  Filter filter = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListVulnerabilitySummariesResponse {
  repeated WorkloadSummary workload_summaries = 1;
  PageInfo page_info = 2;
}

message WorkloadSummary {
  Workload workload = 1;
  Summary vulnerability_summary = 2;
}

message ListVulnerabilitiesRequest {
  Filter filter = 1;
  optional bool suppressed = 2;
  int32 limit = 3;
  int32 offset = 4;
  optional OrderBy order_by = 5;
}

message ListVulnerabilitiesResponse {
  Filter filter = 1;
  repeated Finding nodes = 2;
  PageInfo page_info = 3;
}

message SuppressVulnerabilityRequest {
  SuppressedVulnerability suppressed_vulnerability = 1;
}

enum SuppressState {
  FALSE_POSITIVE = 0;
  IN_TRIAGE = 1;
  RESOLVED = 2;
  NOT_AFFECTED = 3;
  NOT_SET = 4;
}

message SuppressVulnerabilityResponse {
  string cve_id = 1;
  bool suppressed = 2;
}

message ListSuppressedVulnerabilitiesRequest {
  Filter filter = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListSuppressedVulnerabilitiesResponse {
  repeated SuppressedVulnerability nodes = 1;
  PageInfo page_info = 2;
}

message SuppressedVulnerability {
  string image_name = 1;
  string cve_id = 2;
  string package = 3;
  SuppressState state = 4;
  optional string reason = 5;
  optional string suppressed_by = 6;
  optional bool suppress = 7;
}

enum Direction {
  ASC = 0;
  DESC = 1;
}

enum OrderByField {
  SEVERITY = 0;
  CLUSTER = 1;
  NAMESPACE = 2;
  WORKLOAD = 3;
}

message OrderBy {
  OrderByField field = 1;
  Direction direction = 2;
}

message GetVulnerabilitySummaryRequest {
  Filter filter = 1;
}

message GetVulnerabilitySummaryResponse {
  Filter filter = 1;
  optional Summary vulnerability_summary = 2;
  int32 sbom_count = 3;
  int32 workload_count = 4;
  float coverage = 5;
}

message Summary {
  int32 critical = 1;
  int32 high = 2;
  int32 medium = 3;
  int32 low = 4;
  int32 unassigned = 5;
  int32 riskScore = 6;
  bool hasSbom = 7;
  optional google.protobuf.Timestamp last_updated = 8;
}

message Workload {
  string cluster = 1;
  string namespace = 2;
  string name = 3;
  string type = 4;
  string image_name = 5;
  string image_tag = 6;
}

enum Severity {
  CRITICAL = 0;
  HIGH = 1;
  MEDIUM = 2;
  LOW = 3;
  UNASSIGNED = 4;
}

message Cve {
  string id = 1;
  string title = 2;
  string description = 3;
  string link = 4;
  Severity severity = 5;
  map<string, string> references = 6;
}

// TODO: should it be grouped by package like now or Cve?
message Vulnerability {
  string package = 1;
  Cve cve = 2;
  string latest_version = 3;
  optional bool suppressed = 4;
  optional string suppressed_reason = 5;
  optional string suppressed_details = 6;
}

message Finding {
  Workload workload_ref = 1;
  Vulnerability vulnerability = 2;
  optional google.protobuf.Timestamp last_updated = 3;
}
