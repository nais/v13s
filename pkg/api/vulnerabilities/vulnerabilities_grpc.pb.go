// Trying to adhere to the following - https://cloud.google.com/apis/design/proto3
// https://cloud.google.com/apis/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: vulnerabilities.proto

//package nais.io.v13s.v1;

package vulnerabilities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vulnerabilities_ListVulnerabilities_FullMethodName             = "/v13s.api.protobuf.Vulnerabilities/ListVulnerabilities"
	Vulnerabilities_ListVulnerabilitySummaries_FullMethodName      = "/v13s.api.protobuf.Vulnerabilities/ListVulnerabilitySummaries"
	Vulnerabilities_ListVulnerabilitiesForImage_FullMethodName     = "/v13s.api.protobuf.Vulnerabilities/ListVulnerabilitiesForImage"
	Vulnerabilities_ListSuppressedVulnerabilities_FullMethodName   = "/v13s.api.protobuf.Vulnerabilities/ListSuppressedVulnerabilities"
	Vulnerabilities_GetVulnerabilitySummary_FullMethodName         = "/v13s.api.protobuf.Vulnerabilities/GetVulnerabilitySummary"
	Vulnerabilities_GetVulnerabilitySummaryForImage_FullMethodName = "/v13s.api.protobuf.Vulnerabilities/GetVulnerabilitySummaryForImage"
	Vulnerabilities_SuppressVulnerability_FullMethodName           = "/v13s.api.protobuf.Vulnerabilities/SuppressVulnerability"
)

// VulnerabilitiesClient is the client API for Vulnerabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VulnerabilitiesClient interface {
	// List all vulnerabilities for the given filters: cluster, namespace, workload, workload_type
	// Example: only supplying a namespace will return all vulnerabilities for all workloads in that namespace across all clusters
	ListVulnerabilities(ctx context.Context, in *ListVulnerabilitiesRequest, opts ...grpc.CallOption) (*ListVulnerabilitiesResponse, error)
	// List all workloads with their vulnerability summaries for the given filters: cluster, namespace, workload, workload_type
	// Example: only supplying a namespace will return all workloads in that namespace across all clusters
	ListVulnerabilitySummaries(ctx context.Context, in *ListVulnerabilitySummariesRequest, opts ...grpc.CallOption) (*ListVulnerabilitySummariesResponse, error)
	ListVulnerabilitiesForImage(ctx context.Context, in *ListVulnerabilitiesForImageRequest, opts ...grpc.CallOption) (*ListVulnerabilitiesForImageResponse, error)
	ListSuppressedVulnerabilities(ctx context.Context, in *ListSuppressedVulnerabilitiesRequest, opts ...grpc.CallOption) (*ListSuppressedVulnerabilitiesResponse, error)
	// Get the summary of vulnerabilities for the given filters: cluster, namespace, workload, workload_type
	// Examples:
	// Only supplying a namespace will give the total summary for all workloads in that namespace across all clusters
	// Only supplying a cluster will give the total summary for all workloads in that cluster across all namespaces
	// Only supplying a workload will give the summary for that workload across all clusters and namespaces
	// Only supplying a workload_type will give the summary for all workloads of that type across all clusters and namespaces
	// Supplying all filters will give the summary for that specific workload
	GetVulnerabilitySummary(ctx context.Context, in *GetVulnerabilitySummaryRequest, opts ...grpc.CallOption) (*GetVulnerabilitySummaryResponse, error)
	GetVulnerabilitySummaryForImage(ctx context.Context, in *GetVulnerabilitySummaryForImageRequest, opts ...grpc.CallOption) (*GetVulnerabilitySummaryForImageResponse, error)
	SuppressVulnerability(ctx context.Context, in *SuppressVulnerabilityRequest, opts ...grpc.CallOption) (*SuppressVulnerabilityResponse, error)
}

type vulnerabilitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnerabilitiesClient(cc grpc.ClientConnInterface) VulnerabilitiesClient {
	return &vulnerabilitiesClient{cc}
}

func (c *vulnerabilitiesClient) ListVulnerabilities(ctx context.Context, in *ListVulnerabilitiesRequest, opts ...grpc.CallOption) (*ListVulnerabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_ListVulnerabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) ListVulnerabilitySummaries(ctx context.Context, in *ListVulnerabilitySummariesRequest, opts ...grpc.CallOption) (*ListVulnerabilitySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVulnerabilitySummariesResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_ListVulnerabilitySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) ListVulnerabilitiesForImage(ctx context.Context, in *ListVulnerabilitiesForImageRequest, opts ...grpc.CallOption) (*ListVulnerabilitiesForImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVulnerabilitiesForImageResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_ListVulnerabilitiesForImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) ListSuppressedVulnerabilities(ctx context.Context, in *ListSuppressedVulnerabilitiesRequest, opts ...grpc.CallOption) (*ListSuppressedVulnerabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuppressedVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_ListSuppressedVulnerabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetVulnerabilitySummary(ctx context.Context, in *GetVulnerabilitySummaryRequest, opts ...grpc.CallOption) (*GetVulnerabilitySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVulnerabilitySummaryResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetVulnerabilitySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) GetVulnerabilitySummaryForImage(ctx context.Context, in *GetVulnerabilitySummaryForImageRequest, opts ...grpc.CallOption) (*GetVulnerabilitySummaryForImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVulnerabilitySummaryForImageResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_GetVulnerabilitySummaryForImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vulnerabilitiesClient) SuppressVulnerability(ctx context.Context, in *SuppressVulnerabilityRequest, opts ...grpc.CallOption) (*SuppressVulnerabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuppressVulnerabilityResponse)
	err := c.cc.Invoke(ctx, Vulnerabilities_SuppressVulnerability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VulnerabilitiesServer is the server API for Vulnerabilities service.
// All implementations must embed UnimplementedVulnerabilitiesServer
// for forward compatibility.
type VulnerabilitiesServer interface {
	// List all vulnerabilities for the given filters: cluster, namespace, workload, workload_type
	// Example: only supplying a namespace will return all vulnerabilities for all workloads in that namespace across all clusters
	ListVulnerabilities(context.Context, *ListVulnerabilitiesRequest) (*ListVulnerabilitiesResponse, error)
	// List all workloads with their vulnerability summaries for the given filters: cluster, namespace, workload, workload_type
	// Example: only supplying a namespace will return all workloads in that namespace across all clusters
	ListVulnerabilitySummaries(context.Context, *ListVulnerabilitySummariesRequest) (*ListVulnerabilitySummariesResponse, error)
	ListVulnerabilitiesForImage(context.Context, *ListVulnerabilitiesForImageRequest) (*ListVulnerabilitiesForImageResponse, error)
	ListSuppressedVulnerabilities(context.Context, *ListSuppressedVulnerabilitiesRequest) (*ListSuppressedVulnerabilitiesResponse, error)
	// Get the summary of vulnerabilities for the given filters: cluster, namespace, workload, workload_type
	// Examples:
	// Only supplying a namespace will give the total summary for all workloads in that namespace across all clusters
	// Only supplying a cluster will give the total summary for all workloads in that cluster across all namespaces
	// Only supplying a workload will give the summary for that workload across all clusters and namespaces
	// Only supplying a workload_type will give the summary for all workloads of that type across all clusters and namespaces
	// Supplying all filters will give the summary for that specific workload
	GetVulnerabilitySummary(context.Context, *GetVulnerabilitySummaryRequest) (*GetVulnerabilitySummaryResponse, error)
	GetVulnerabilitySummaryForImage(context.Context, *GetVulnerabilitySummaryForImageRequest) (*GetVulnerabilitySummaryForImageResponse, error)
	SuppressVulnerability(context.Context, *SuppressVulnerabilityRequest) (*SuppressVulnerabilityResponse, error)
	mustEmbedUnimplementedVulnerabilitiesServer()
}

// UnimplementedVulnerabilitiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVulnerabilitiesServer struct{}

func (UnimplementedVulnerabilitiesServer) ListVulnerabilities(context.Context, *ListVulnerabilitiesRequest) (*ListVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVulnerabilities not implemented")
}
func (UnimplementedVulnerabilitiesServer) ListVulnerabilitySummaries(context.Context, *ListVulnerabilitySummariesRequest) (*ListVulnerabilitySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVulnerabilitySummaries not implemented")
}
func (UnimplementedVulnerabilitiesServer) ListVulnerabilitiesForImage(context.Context, *ListVulnerabilitiesForImageRequest) (*ListVulnerabilitiesForImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVulnerabilitiesForImage not implemented")
}
func (UnimplementedVulnerabilitiesServer) ListSuppressedVulnerabilities(context.Context, *ListSuppressedVulnerabilitiesRequest) (*ListSuppressedVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuppressedVulnerabilities not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetVulnerabilitySummary(context.Context, *GetVulnerabilitySummaryRequest) (*GetVulnerabilitySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilitySummary not implemented")
}
func (UnimplementedVulnerabilitiesServer) GetVulnerabilitySummaryForImage(context.Context, *GetVulnerabilitySummaryForImageRequest) (*GetVulnerabilitySummaryForImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilitySummaryForImage not implemented")
}
func (UnimplementedVulnerabilitiesServer) SuppressVulnerability(context.Context, *SuppressVulnerabilityRequest) (*SuppressVulnerabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuppressVulnerability not implemented")
}
func (UnimplementedVulnerabilitiesServer) mustEmbedUnimplementedVulnerabilitiesServer() {}
func (UnimplementedVulnerabilitiesServer) testEmbeddedByValue()                         {}

// UnsafeVulnerabilitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VulnerabilitiesServer will
// result in compilation errors.
type UnsafeVulnerabilitiesServer interface {
	mustEmbedUnimplementedVulnerabilitiesServer()
}

func RegisterVulnerabilitiesServer(s grpc.ServiceRegistrar, srv VulnerabilitiesServer) {
	// If the following call pancis, it indicates UnimplementedVulnerabilitiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vulnerabilities_ServiceDesc, srv)
}

func _Vulnerabilities_ListVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).ListVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_ListVulnerabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).ListVulnerabilities(ctx, req.(*ListVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_ListVulnerabilitySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVulnerabilitySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).ListVulnerabilitySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_ListVulnerabilitySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).ListVulnerabilitySummaries(ctx, req.(*ListVulnerabilitySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_ListVulnerabilitiesForImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVulnerabilitiesForImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).ListVulnerabilitiesForImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_ListVulnerabilitiesForImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).ListVulnerabilitiesForImage(ctx, req.(*ListVulnerabilitiesForImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_ListSuppressedVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuppressedVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).ListSuppressedVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_ListSuppressedVulnerabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).ListSuppressedVulnerabilities(ctx, req.(*ListSuppressedVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetVulnerabilitySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVulnerabilitySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetVulnerabilitySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetVulnerabilitySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetVulnerabilitySummary(ctx, req.(*GetVulnerabilitySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_GetVulnerabilitySummaryForImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVulnerabilitySummaryForImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).GetVulnerabilitySummaryForImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_GetVulnerabilitySummaryForImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).GetVulnerabilitySummaryForImage(ctx, req.(*GetVulnerabilitySummaryForImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vulnerabilities_SuppressVulnerability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressVulnerabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilitiesServer).SuppressVulnerability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerabilities_SuppressVulnerability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilitiesServer).SuppressVulnerability(ctx, req.(*SuppressVulnerabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vulnerabilities_ServiceDesc is the grpc.ServiceDesc for Vulnerabilities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vulnerabilities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v13s.api.protobuf.Vulnerabilities",
	HandlerType: (*VulnerabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVulnerabilities",
			Handler:    _Vulnerabilities_ListVulnerabilities_Handler,
		},
		{
			MethodName: "ListVulnerabilitySummaries",
			Handler:    _Vulnerabilities_ListVulnerabilitySummaries_Handler,
		},
		{
			MethodName: "ListVulnerabilitiesForImage",
			Handler:    _Vulnerabilities_ListVulnerabilitiesForImage_Handler,
		},
		{
			MethodName: "ListSuppressedVulnerabilities",
			Handler:    _Vulnerabilities_ListSuppressedVulnerabilities_Handler,
		},
		{
			MethodName: "GetVulnerabilitySummary",
			Handler:    _Vulnerabilities_GetVulnerabilitySummary_Handler,
		},
		{
			MethodName: "GetVulnerabilitySummaryForImage",
			Handler:    _Vulnerabilities_GetVulnerabilitySummaryForImage_Handler,
		},
		{
			MethodName: "SuppressVulnerability",
			Handler:    _Vulnerabilities_SuppressVulnerability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vulnerabilities.proto",
}
