// Code generated by mockery. DO NOT EDIT.

package management

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockManagementServer is an autogenerated mock type for the ManagementServer type
type MockManagementServer struct {
	mock.Mock
}

type MockManagementServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManagementServer) EXPECT() *MockManagementServer_Expecter {
	return &MockManagementServer_Expecter{mock: &_m.Mock}
}

// RegisterWorkload provides a mock function with given fields: _a0, _a1
func (_m *MockManagementServer) RegisterWorkload(_a0 context.Context, _a1 *RegisterWorkloadRequest) (*RegisterWorkloadResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterWorkload")
	}

	var r0 *RegisterWorkloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterWorkloadRequest) (*RegisterWorkloadResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterWorkloadRequest) *RegisterWorkloadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterWorkloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RegisterWorkloadRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementServer_RegisterWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterWorkload'
type MockManagementServer_RegisterWorkload_Call struct {
	*mock.Call
}

// RegisterWorkload is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *RegisterWorkloadRequest
func (_e *MockManagementServer_Expecter) RegisterWorkload(_a0 interface{}, _a1 interface{}) *MockManagementServer_RegisterWorkload_Call {
	return &MockManagementServer_RegisterWorkload_Call{Call: _e.mock.On("RegisterWorkload", _a0, _a1)}
}

func (_c *MockManagementServer_RegisterWorkload_Call) Run(run func(_a0 context.Context, _a1 *RegisterWorkloadRequest)) *MockManagementServer_RegisterWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*RegisterWorkloadRequest))
	})
	return _c
}

func (_c *MockManagementServer_RegisterWorkload_Call) Return(_a0 *RegisterWorkloadResponse, _a1 error) *MockManagementServer_RegisterWorkload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementServer_RegisterWorkload_Call) RunAndReturn(run func(context.Context, *RegisterWorkloadRequest) (*RegisterWorkloadResponse, error)) *MockManagementServer_RegisterWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedManagementServer provides a mock function with no fields
func (_m *MockManagementServer) mustEmbedUnimplementedManagementServer() {
	_m.Called()
}

// MockManagementServer_mustEmbedUnimplementedManagementServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedManagementServer'
type MockManagementServer_mustEmbedUnimplementedManagementServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedManagementServer is a helper method to define mock.On call
func (_e *MockManagementServer_Expecter) mustEmbedUnimplementedManagementServer() *MockManagementServer_mustEmbedUnimplementedManagementServer_Call {
	return &MockManagementServer_mustEmbedUnimplementedManagementServer_Call{Call: _e.mock.On("mustEmbedUnimplementedManagementServer")}
}

func (_c *MockManagementServer_mustEmbedUnimplementedManagementServer_Call) Run(run func()) *MockManagementServer_mustEmbedUnimplementedManagementServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagementServer_mustEmbedUnimplementedManagementServer_Call) Return() *MockManagementServer_mustEmbedUnimplementedManagementServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManagementServer_mustEmbedUnimplementedManagementServer_Call) RunAndReturn(run func()) *MockManagementServer_mustEmbedUnimplementedManagementServer_Call {
	_c.Run(run)
	return _c
}

// NewMockManagementServer creates a new instance of MockManagementServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManagementServer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockManagementServer {
	mock := &MockManagementServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
